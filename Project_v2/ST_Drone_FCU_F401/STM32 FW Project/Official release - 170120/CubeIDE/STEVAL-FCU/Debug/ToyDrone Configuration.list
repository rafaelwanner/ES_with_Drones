
ToyDrone Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a044  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  0800a610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ce8  2000007c  0800a68c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00008000  20000d64  0800a68c  00020d64  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00038696  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005f36  00000000  00000000  00058742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001f30  00000000  00000000  0005e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001d10  00000000  00000000  000605a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020bbb  00000000  00000000  000622b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028884  00000000  00000000  00082e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000a69a6  00000000  00000000  000ab6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0015209d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008700  00000000  00000000  001520f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1cc 	.word	0x0800a1cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800a1cc 	.word	0x0800a1cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <VL53L0x_init>:
#include "VL53L0X.h"
#include <math.h>


void VL53L0x_init(I2C_HandleTypeDef *hi2c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af04      	add	r7, sp, #16
 8000286:	6078      	str	r0, [r7, #4]
	uint8_t VL53L0x_SendData[2] = {0x01};
 8000288:	2301      	movs	r3, #1
 800028a:	82bb      	strh	r3, [r7, #20]
	uint8_t VL53L0x_RecData[5] ;

	HAL_I2C_Mem_Write(hi2c, VL53L0x_add, VL53L0X_REG_SYSRANGE_START, I2C_MEMADD_SIZE_8BIT, VL53L0x_SendData, 1, 1);
 800028c:	2301      	movs	r3, #1
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2301      	movs	r3, #1
 800029c:	2200      	movs	r2, #0
 800029e:	2152      	movs	r1, #82	; 0x52
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f003 fa25 	bl	80036f0 <HAL_I2C_Mem_Write>

	VL53L0x_SendData[1] = 100;
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	757b      	strb	r3, [r7, #21]
	while(VL53L0x_SendData[1]--)
 80002aa:	e015      	b.n	80002d8 <VL53L0x_init+0x58>
	{
		HAL_Delay(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f002 fb9f 	bl	80029f0 <HAL_Delay>
		HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_RESULT_RANGE_STATUS, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData+4, 1, 1);
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	3304      	adds	r3, #4
 80002b8:	2201      	movs	r2, #1
 80002ba:	9202      	str	r2, [sp, #8]
 80002bc:	2201      	movs	r2, #1
 80002be:	9201      	str	r2, [sp, #4]
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2301      	movs	r3, #1
 80002c4:	2214      	movs	r2, #20
 80002c6:	2152      	movs	r1, #82	; 0x52
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f003 fb1b 	bl	8003904 <HAL_I2C_Mem_Read>
			if (VL53L0x_RecData[4] & 0x01) break;
 80002ce:	7c3b      	ldrb	r3, [r7, #16]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d106      	bne.n	80002e6 <VL53L0x_init+0x66>
	while(VL53L0x_SendData[1]--)
 80002d8:	7d7b      	ldrb	r3, [r7, #21]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	757a      	strb	r2, [r7, #21]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1e3      	bne.n	80002ac <VL53L0x_init+0x2c>
	}
}
 80002e4:	e000      	b.n	80002e8 <VL53L0x_init+0x68>
			if (VL53L0x_RecData[4] & 0x01) break;
 80002e6:	bf00      	nop
}
 80002e8:	bf00      	nop
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <VL53L0x_Check>:

 //Check if VL53L0x is normal
 //Return 0 if check is successful
 //Return 1 if the check fails
uint8_t VL53L0x_Check(I2C_HandleTypeDef *hi2c)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af04      	add	r7, sp, #16
 80002f6:	6078      	str	r0, [r7, #4]
	uint8_t VL53L0x_SendData[2] = {0x01};
 80002f8:	2301      	movs	r3, #1
 80002fa:	82bb      	strh	r3, [r7, #20]
	uint8_t VL53L0x_RecData[5];

	//Revision ID:
	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_IDENTIFICATION_REVISION_ID, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData, 1, 1);
 80002fc:	2301      	movs	r3, #1
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	2301      	movs	r3, #1
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	22c2      	movs	r2, #194	; 0xc2
 800030e:	2152      	movs	r1, #82	; 0x52
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f003 faf7 	bl	8003904 <HAL_I2C_Mem_Read>
	//Device ID:
	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_IDENTIFICATION_MODEL_ID, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData+1, 1, 1);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	3301      	adds	r3, #1
 800031c:	2201      	movs	r2, #1
 800031e:	9202      	str	r2, [sp, #8]
 8000320:	2201      	movs	r2, #1
 8000322:	9201      	str	r2, [sp, #4]
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2301      	movs	r3, #1
 8000328:	22c0      	movs	r2, #192	; 0xc0
 800032a:	2152      	movs	r1, #82	; 0x52
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f003 fae9 	bl	8003904 <HAL_I2C_Mem_Read>
	//PRE_RANGE_CONFIG_VCSEL_PERIOD =
	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData+2, 1, 1);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	3302      	adds	r3, #2
 8000338:	2201      	movs	r2, #1
 800033a:	9202      	str	r2, [sp, #8]
 800033c:	2201      	movs	r2, #1
 800033e:	9201      	str	r2, [sp, #4]
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	2250      	movs	r2, #80	; 0x50
 8000346:	2152      	movs	r1, #82	; 0x52
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f003 fadb 	bl	8003904 <HAL_I2C_Mem_Read>
	//FINAL_RANGE_CONFIG_VCSEL_PERIOD=
	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData+3, 1, 1);
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	3303      	adds	r3, #3
 8000354:	2201      	movs	r2, #1
 8000356:	9202      	str	r2, [sp, #8]
 8000358:	2201      	movs	r2, #1
 800035a:	9201      	str	r2, [sp, #4]
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2301      	movs	r3, #1
 8000360:	2270      	movs	r2, #112	; 0x70
 8000362:	2152      	movs	r1, #82	; 0x52
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f003 facd 	bl	8003904 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Write(hi2c, VL53L0x_add, VL53L0X_REG_SYSRANGE_START, I2C_MEMADD_SIZE_8BIT, VL53L0x_SendData, 1, 1);
 800036a:	2301      	movs	r3, #1
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2301      	movs	r3, #1
 800037a:	2200      	movs	r2, #0
 800037c:	2152      	movs	r1, #82	; 0x52
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f003 f9b6 	bl	80036f0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000388:	f002 fb32 	bl	80029f0 <HAL_Delay>

	VL53L0x_SendData[1] = 100;
 800038c:	2364      	movs	r3, #100	; 0x64
 800038e:	757b      	strb	r3, [r7, #21]
	while(VL53L0x_SendData[1]--)
 8000390:	e015      	b.n	80003be <VL53L0x_Check+0xce>
	{
		HAL_Delay(10);
 8000392:	200a      	movs	r0, #10
 8000394:	f002 fb2c 	bl	80029f0 <HAL_Delay>
		HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_RESULT_RANGE_STATUS, I2C_MEMADD_SIZE_8BIT, VL53L0x_RecData+4, 1, 1);
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	3304      	adds	r3, #4
 800039e:	2201      	movs	r2, #1
 80003a0:	9202      	str	r2, [sp, #8]
 80003a2:	2201      	movs	r2, #1
 80003a4:	9201      	str	r2, [sp, #4]
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2301      	movs	r3, #1
 80003aa:	2214      	movs	r2, #20
 80003ac:	2152      	movs	r1, #82	; 0x52
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f003 faa8 	bl	8003904 <HAL_I2C_Mem_Read>
			if (VL53L0x_RecData[4] & 0x01) break;
 80003b4:	7c3b      	ldrb	r3, [r7, #16]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d106      	bne.n	80003cc <VL53L0x_Check+0xdc>
	while(VL53L0x_SendData[1]--)
 80003be:	7d7b      	ldrb	r3, [r7, #21]
 80003c0:	1e5a      	subs	r2, r3, #1
 80003c2:	b2d2      	uxtb	r2, r2
 80003c4:	757a      	strb	r2, [r7, #21]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1e3      	bne.n	8000392 <VL53L0x_Check+0xa2>
 80003ca:	e000      	b.n	80003ce <VL53L0x_Check+0xde>
			if (VL53L0x_RecData[4] & 0x01) break;
 80003cc:	bf00      	nop
	}

	if (VL53L0x_RecData[4] & 0x01)
 80003ce:	7c3b      	ldrb	r3, [r7, #16]
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <VL53L0x_Check+0xec>
	 return 0; //return 0 if check is successful
 80003d8:	2300      	movs	r3, #0
 80003da:	e000      	b.n	80003de <VL53L0x_Check+0xee>
	 else return 1; //return 1 if check fails
 80003dc:	2301      	movs	r3, #1
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <VL53L0x_StartConversion>:

 //VL53L0x convert once
void VL53L0x_StartConversion(I2C_HandleTypeDef *hi2c)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b088      	sub	sp, #32
 80003ea:	af04      	add	r7, sp, #16
 80003ec:	6078      	str	r0, [r7, #4]
	uint8_t VL53L0x_SendData[1] = {0x01};
 80003ee:	2301      	movs	r3, #1
 80003f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(hi2c, VL53L0x_add, VL53L0X_REG_SYSRANGE_START, I2C_MEMADD_SIZE_8BIT, VL53L0x_SendData, 1, 1);
 80003f2:	2301      	movs	r3, #1
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	2301      	movs	r3, #1
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	2200      	movs	r2, #0
 8000404:	2152      	movs	r1, #82	; 0x52
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f003 f972 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <makeuint16>:

uint16_t makeuint16(int lsb, int msb)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
    return ((msb & 0xFF) << 8) | (lsb & 0xFF);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	021b      	lsls	r3, r3, #8
 8000422:	b21a      	sxth	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	b21b      	sxth	r3, r3
 8000428:	b2db      	uxtb	r3, r3
 800042a:	b21b      	sxth	r3, r3
 800042c:	4313      	orrs	r3, r2
 800042e:	b21b      	sxth	r3, r3
 8000430:	b29b      	uxth	r3, r3
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <VL53L0x_ReadDistance>:


 //VL53L0x reading distance
void VL53L0x_ReadDistance(I2C_HandleTypeDef *hi2c, struct VL53L0xData *VL_temp)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af04      	add	r7, sp, #16
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
	 //Record historical valid values
	VL_temp->dist_last = VL_temp->distValid;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	8ada      	ldrh	r2, [r3, #22]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	829a      	strh	r2, [r3, #20]

	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_RESULT_RANGE_STATUS, I2C_MEMADD_SIZE_8BIT, VL_temp->vtemp, 12, 1);
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2201      	movs	r2, #1
 8000454:	9202      	str	r2, [sp, #8]
 8000456:	220c      	movs	r2, #12
 8000458:	9201      	str	r2, [sp, #4]
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2301      	movs	r3, #1
 800045e:	2214      	movs	r2, #20
 8000460:	2152      	movs	r1, #82	; 0x52
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f003 fa4e 	bl	8003904 <HAL_I2C_Mem_Read>

	VL_temp->dist = makeuint16(VL_temp->vtemp[11], VL_temp->vtemp[10]);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	7adb      	ldrb	r3, [r3, #11]
 800046c:	461a      	mov	r2, r3
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	7a9b      	ldrb	r3, [r3, #10]
 8000472:	4619      	mov	r1, r3
 8000474:	4610      	mov	r0, r2
 8000476:	f7ff ffcd 	bl	8000414 <makeuint16>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	821a      	strh	r2, [r3, #16]
	VL_temp->DeviceRangeStatusInternal = ((VL_temp->vtemp[0] & 0x78) >> 3);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	10db      	asrs	r3, r3, #3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	f003 030f 	and.w	r3, r3, #15
 800048e:	b2da      	uxtb	r2, r3
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	749a      	strb	r2, [r3, #18]


	 //Take last reading if read is invalid
	 if(VL_temp->dist == 8190 || VL_temp->dist == 20 ) //Distance data is invalid
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	8a1b      	ldrh	r3, [r3, #16]
 8000498:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800049c:	4293      	cmp	r3, r2
 800049e:	d003      	beq.n	80004a8 <VL53L0x_ReadDistance+0x6a>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	8a1b      	ldrh	r3, [r3, #16]
 80004a4:	2b14      	cmp	r3, #20
 80004a6:	d104      	bne.n	80004b2 <VL53L0x_ReadDistance+0x74>
		VL_temp->distValid = VL_temp->dist_last;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	8a9a      	ldrh	r2, [r3, #20]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	82da      	strh	r2, [r3, #22]
 80004b0:	e00c      	b.n	80004cc <VL53L0x_ReadDistance+0x8e>
	 else //valid
		VL_temp->distValid = (VL_temp->dist + VL_temp->dist_last)/2;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	8a1b      	ldrh	r3, [r3, #16]
 80004b6:	461a      	mov	r2, r3
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	8a9b      	ldrh	r3, [r3, #20]
 80004bc:	4413      	add	r3, r2
 80004be:	0fda      	lsrs	r2, r3, #31
 80004c0:	4413      	add	r3, r2
 80004c2:	105b      	asrs	r3, r3, #1
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	82da      	strh	r2, [r3, #22]

}
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <myprintf>:

extern UART_HandleTypeDef huart1;

#ifdef DEBUG
int myprintf(const char *format, ...)
{
 80004d4:	b40f      	push	{r0, r1, r2, r3}
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b0c2      	sub	sp, #264	; 0x108
 80004da:	af00      	add	r7, sp, #0
    va_list arg;
    va_start(arg, format);
 80004dc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80004e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    char temp[255];
    int len;
    // Limit the length of string to 254
    len = vsnprintf(temp, 254, format, arg);
 80004e4:	4638      	mov	r0, r7
 80004e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80004ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80004ee:	21fe      	movs	r1, #254	; 0xfe
 80004f0:	f009 fb0a 	bl	8009b08 <vsniprintf>
 80004f4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    usart_puts(temp, len);
 80004f8:	463b      	mov	r3, r7
 80004fa:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f80a 	bl	8000518 <usart_puts>
    return len;
 8000504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000508:	4618      	mov	r0, r3
 800050a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800050e:	46bd      	mov	sp, r7
 8000510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000514:	b004      	add	sp, #16
 8000516:	4770      	bx	lr

08000518 <usart_puts>:
    
int usart_puts(const char *str, int len) 
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
    //putc(*str ++);
    //while (huart1.Lock == HAL_LOCKED);
    HAL_UART_Transmit(&huart1, (uint8_t *)str, len, 1000);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	b29a      	uxth	r2, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <usart_puts+0x24>)
 800052e:	f006 fe1a 	bl	8007166 <HAL_UART_Transmit>
    return 0;
 8000532:	2300      	movs	r3, #0
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200004d0 	.word	0x200004d0

08000540 <FlightControlPID_innerLoop>:
    pid_z_integ1 = -pid->z_i1_limit;
  pid->z_s1 =  pid->z_kp1*error + pid->z_ki1*pid_z_integ1;
}

void FlightControlPID_innerLoop(EulerAngleTypeDef *euler_rc, Gyro_Rad *gyro_rad, AHRS_State_TypeDef *ahrs, P_PI_PIDControlTypeDef *pid, MotorControlTypeDef *motor_pwm)
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	603b      	str	r3, [r7, #0]
  float error, deriv;

  if(gTHR<MIN_THR)
 800054e:	4bbd      	ldr	r3, [pc, #756]	; (8000844 <FlightControlPID_innerLoop+0x304>)
 8000550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000554:	2bc7      	cmp	r3, #199	; 0xc7
 8000556:	dc0b      	bgt.n	8000570 <FlightControlPID_innerLoop+0x30>
  {
    pid_x_integ2 = 0;
 8000558:	4bbb      	ldr	r3, [pc, #748]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 800055a:	f04f 0200 	mov.w	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
    pid_y_integ2 = 0;
 8000560:	4bba      	ldr	r3, [pc, #744]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 8000562:	f04f 0200 	mov.w	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
    pid_z_integ2 = 0;
 8000568:	4bb9      	ldr	r3, [pc, #740]	; (8000850 <FlightControlPID_innerLoop+0x310>)
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
  }
  
  dt_recip = 1/pid->ts;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	ed93 7a00 	vldr	s14, [r3]
 8000576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800057a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800057e:	4bb5      	ldr	r3, [pc, #724]	; (8000854 <FlightControlPID_innerLoop+0x314>)
 8000580:	edc3 7a00 	vstr	s15, [r3]

  //X Axis
  error = pid->x_s1 - gyro_rad->gx;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000594:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ2 += error*pid->ts;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	ed93 7a00 	vldr	s14, [r3]
 800059e:	edd7 7a05 	vldr	s15, [r7, #20]
 80005a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005a6:	4ba8      	ldr	r3, [pc, #672]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005a8:	edd3 7a00 	vldr	s15, [r3]
 80005ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b0:	4ba5      	ldr	r3, [pc, #660]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005b2:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ2 > pid->x_i2_limit)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80005bc:	4ba2      	ldr	r3, [pc, #648]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005be:	edd3 7a00 	vldr	s15, [r3]
 80005c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ca:	d504      	bpl.n	80005d6 <FlightControlPID_innerLoop+0x96>
    pid_x_integ2 = pid->x_i2_limit;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	4a9d      	ldr	r2, [pc, #628]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	e014      	b.n	8000600 <FlightControlPID_innerLoop+0xc0>
  else if(pid_x_integ2 < -pid->x_i2_limit)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80005dc:	eeb1 7a67 	vneg.f32	s14, s15
 80005e0:	4b99      	ldr	r3, [pc, #612]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ee:	dd07      	ble.n	8000600 <FlightControlPID_innerLoop+0xc0>
    pid_x_integ2 = -pid->x_i2_limit;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80005f6:	eef1 7a67 	vneg.f32	s15, s15
 80005fa:	4b93      	ldr	r3, [pc, #588]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 80005fc:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_x_pre_error2)*dt_recip;
 8000600:	4b95      	ldr	r3, [pc, #596]	; (8000858 <FlightControlPID_innerLoop+0x318>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	ed97 7a05 	vldr	s14, [r7, #20]
 800060a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800060e:	4b91      	ldr	r3, [pc, #580]	; (8000854 <FlightControlPID_innerLoop+0x314>)
 8000610:	edd3 7a00 	vldr	s15, [r3]
 8000614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000618:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_error2 = error;
 800061c:	4a8e      	ldr	r2, [pc, #568]	; (8000858 <FlightControlPID_innerLoop+0x318>)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	6013      	str	r3, [r2, #0]
  deriv = pid_x_pre_deriv + (deriv - pid_x_pre_deriv)*D_FILTER_COFF;
 8000622:	4b8e      	ldr	r3, [pc, #568]	; (800085c <FlightControlPID_innerLoop+0x31c>)
 8000624:	edd3 7a00 	vldr	s15, [r3]
 8000628:	ed97 7a04 	vldr	s14, [r7, #16]
 800062c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000630:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8000860 <FlightControlPID_innerLoop+0x320>
 8000634:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000638:	4b88      	ldr	r3, [pc, #544]	; (800085c <FlightControlPID_innerLoop+0x31c>)
 800063a:	edd3 7a00 	vldr	s15, [r3]
 800063e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000642:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_deriv = deriv;
 8000646:	4a85      	ldr	r2, [pc, #532]	; (800085c <FlightControlPID_innerLoop+0x31c>)
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	6013      	str	r3, [r2, #0]
  pid->x_s2 = pid->x_kp2*error + pid->x_ki2*pid_x_integ2 + pid->x_kd2*deriv;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000652:	edd7 7a05 	vldr	s15, [r7, #20]
 8000656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000660:	4b79      	ldr	r3, [pc, #484]	; (8000848 <FlightControlPID_innerLoop+0x308>)
 8000662:	edd3 7a00 	vldr	s15, [r3]
 8000666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800066a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	edd3 6a05 	vldr	s13, [r3, #20]
 8000674:	edd7 7a04 	vldr	s15, [r7, #16]
 8000678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800067c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  
  if(pid->x_s2 > MAX_ADJ_AMOUNT)  pid->x_s2 = MAX_ADJ_AMOUNT;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800068c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000864 <FlightControlPID_innerLoop+0x324>
 8000690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000698:	dd02      	ble.n	80006a0 <FlightControlPID_innerLoop+0x160>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	4a72      	ldr	r2, [pc, #456]	; (8000868 <FlightControlPID_innerLoop+0x328>)
 800069e:	65da      	str	r2, [r3, #92]	; 0x5c
  if(pid->x_s2 < -MAX_ADJ_AMOUNT)  pid->x_s2 = -MAX_ADJ_AMOUNT;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80006a6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800086c <FlightControlPID_innerLoop+0x32c>
 80006aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	d502      	bpl.n	80006ba <FlightControlPID_innerLoop+0x17a>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	4a6e      	ldr	r2, [pc, #440]	; (8000870 <FlightControlPID_innerLoop+0x330>)
 80006b8:	65da      	str	r2, [r3, #92]	; 0x5c

  //Y Axis
  error = pid->y_s1 - gyro_rad->gy;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80006c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ca:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ2 += error*pid->ts;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	ed93 7a00 	vldr	s14, [r3]
 80006d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 80006de:	edd3 7a00 	vldr	s15, [r3]
 80006e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e6:	4b59      	ldr	r3, [pc, #356]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ2 > pid->y_i2_limit)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80006f2:	4b56      	ldr	r3, [pc, #344]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000700:	d504      	bpl.n	800070c <FlightControlPID_innerLoop+0x1cc>
    pid_y_integ2 = pid->y_i2_limit;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000706:	4a51      	ldr	r2, [pc, #324]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	e014      	b.n	8000736 <FlightControlPID_innerLoop+0x1f6>
  else if(pid_y_integ2 < -pid->y_i2_limit)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000712:	eeb1 7a67 	vneg.f32	s14, s15
 8000716:	4b4d      	ldr	r3, [pc, #308]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 8000718:	edd3 7a00 	vldr	s15, [r3]
 800071c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	dd07      	ble.n	8000736 <FlightControlPID_innerLoop+0x1f6>
    pid_y_integ2 = -pid->y_i2_limit;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800072c:	eef1 7a67 	vneg.f32	s15, s15
 8000730:	4b46      	ldr	r3, [pc, #280]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 8000732:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_y_pre_error2)*dt_recip;
 8000736:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <FlightControlPID_innerLoop+0x334>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <FlightControlPID_innerLoop+0x314>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074e:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_error2 = error;
 8000752:	4a48      	ldr	r2, [pc, #288]	; (8000874 <FlightControlPID_innerLoop+0x334>)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	6013      	str	r3, [r2, #0]
  deriv = pid_y_pre_deriv + (deriv - pid_y_pre_deriv)*D_FILTER_COFF;
 8000758:	4b47      	ldr	r3, [pc, #284]	; (8000878 <FlightControlPID_innerLoop+0x338>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000766:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000860 <FlightControlPID_innerLoop+0x320>
 800076a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <FlightControlPID_innerLoop+0x338>)
 8000770:	edd3 7a00 	vldr	s15, [r3]
 8000774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000778:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_deriv = deriv;
 800077c:	4a3e      	ldr	r2, [pc, #248]	; (8000878 <FlightControlPID_innerLoop+0x338>)
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	6013      	str	r3, [r2, #0]
  pid->y_s2 = pid->y_kp2*error + pid->y_ki2*pid_y_integ2 + pid->y_kd2*deriv;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	ed93 7a08 	vldr	s14, [r3, #32]
 8000788:	edd7 7a05 	vldr	s15, [r7, #20]
 800078c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <FlightControlPID_innerLoop+0x30c>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80007aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80007ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  if(pid->y_s2 > MAX_ADJ_AMOUNT)  pid->y_s2 = MAX_ADJ_AMOUNT;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80007c2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000864 <FlightControlPID_innerLoop+0x324>
 80007c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	dd02      	ble.n	80007d6 <FlightControlPID_innerLoop+0x296>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4a25      	ldr	r2, [pc, #148]	; (8000868 <FlightControlPID_innerLoop+0x328>)
 80007d4:	665a      	str	r2, [r3, #100]	; 0x64
  if(pid->y_s2 < -MAX_ADJ_AMOUNT)  pid->y_s2 = -MAX_ADJ_AMOUNT;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80007dc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800086c <FlightControlPID_innerLoop+0x32c>
 80007e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e8:	d502      	bpl.n	80007f0 <FlightControlPID_innerLoop+0x2b0>
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <FlightControlPID_innerLoop+0x330>)
 80007ee:	665a      	str	r2, [r3, #100]	; 0x64

  //Z Axis
  error = pid->z_s1 - gyro_rad->gz;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80007fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000800:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ2 += error*pid->ts;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	ed93 7a00 	vldr	s14, [r3]
 800080a:	edd7 7a05 	vldr	s15, [r7, #20]
 800080e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <FlightControlPID_innerLoop+0x310>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <FlightControlPID_innerLoop+0x310>)
 800081e:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ2 > pid->z_i2_limit)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <FlightControlPID_innerLoop+0x310>)
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000836:	d521      	bpl.n	800087c <FlightControlPID_innerLoop+0x33c>
    pid_z_integ2 = pid->z_i2_limit;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <FlightControlPID_innerLoop+0x310>)
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	e031      	b.n	80008a6 <FlightControlPID_innerLoop+0x366>
 8000842:	bf00      	nop
 8000844:	2000087e 	.word	0x2000087e
 8000848:	20000098 	.word	0x20000098
 800084c:	2000009c 	.word	0x2000009c
 8000850:	200000a0 	.word	0x200000a0
 8000854:	20000104 	.word	0x20000104
 8000858:	200000a4 	.word	0x200000a4
 800085c:	200000b0 	.word	0x200000b0
 8000860:	3ccccccd 	.word	0x3ccccccd
 8000864:	44480000 	.word	0x44480000
 8000868:	44480000 	.word	0x44480000
 800086c:	c4480000 	.word	0xc4480000
 8000870:	c4480000 	.word	0xc4480000
 8000874:	200000a8 	.word	0x200000a8
 8000878:	200000b4 	.word	0x200000b4
  else if(pid_z_integ2 < -pid->z_i2_limit)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000882:	eeb1 7a67 	vneg.f32	s14, s15
 8000886:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <FlightControlPID_innerLoop+0x518>)
 8000888:	edd3 7a00 	vldr	s15, [r3]
 800088c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	dd07      	ble.n	80008a6 <FlightControlPID_innerLoop+0x366>
    pid_z_integ2 = -pid->z_i2_limit;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800089c:	eef1 7a67 	vneg.f32	s15, s15
 80008a0:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <FlightControlPID_innerLoop+0x518>)
 80008a2:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_z_pre_error2)*dt_recip;
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <FlightControlPID_innerLoop+0x51c>)
 80008a8:	edd3 7a00 	vldr	s15, [r3]
 80008ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80008b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008b4:	4b6a      	ldr	r3, [pc, #424]	; (8000a60 <FlightControlPID_innerLoop+0x520>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008be:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_z_pre_error2 = error;
 80008c2:	4a66      	ldr	r2, [pc, #408]	; (8000a5c <FlightControlPID_innerLoop+0x51c>)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	6013      	str	r3, [r2, #0]
  pid->z_s2 = pid->z_kp2*error + pid->z_ki2*pid_z_integ2 + pid->z_kd2*deriv;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80008ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80008dc:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <FlightControlPID_innerLoop+0x518>)
 80008de:	edd3 7a00 	vldr	s15, [r3]
 80008e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80008f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80008f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  if(pid->z_s2 > MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = MAX_ADJ_AMOUNT_YAW;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000908:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000a64 <FlightControlPID_innerLoop+0x524>
 800090c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	dd02      	ble.n	800091c <FlightControlPID_innerLoop+0x3dc>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <FlightControlPID_innerLoop+0x528>)
 800091a:	66da      	str	r2, [r3, #108]	; 0x6c
  if(pid->z_s2 < -MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = -MAX_ADJ_AMOUNT_YAW;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000922:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000a6c <FlightControlPID_innerLoop+0x52c>
 8000926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092e:	d502      	bpl.n	8000936 <FlightControlPID_innerLoop+0x3f6>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4a4f      	ldr	r2, [pc, #316]	; (8000a70 <FlightControlPID_innerLoop+0x530>)
 8000934:	66da      	str	r2, [r3, #108]	; 0x6c

  
#ifdef MOTOR_DC

  motor_thr = ((int16_t) (0.05f*(float)gTHR + 633.333f));           //Remocon Devo7E >> 630 to 1700
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <FlightControlPID_innerLoop+0x534>)
 8000938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000944:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8000a78 <FlightControlPID_innerLoop+0x538>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000a7c <FlightControlPID_innerLoop+0x53c>
 8000950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000958:	ee17 3a90 	vmov	r3, s15
 800095c:	b21a      	sxth	r2, r3
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <FlightControlPID_innerLoop+0x540>)
 8000960:	801a      	strh	r2, [r3, #0]
  motor_thr = 0.28f*gTHR + 750.0f;                 //TGY-i6 remocon and external ESC STEVAL-ESC001V1
//    motor_thr = ((int16_t) (0.28f*(float)gTHR + 850.0f));                 //TGY-i6 remocon and external ESC Afro12A

#endif

  motor_pwm->motor1_pwm = motor_thr - pid->x_s2 - pid->y_s2 + pid->z_s2 + MOTOR_OFF1;
 8000962:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <FlightControlPID_innerLoop+0x540>)
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800098a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000a84 <FlightControlPID_innerLoop+0x544>
 8000992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	edc3 7a00 	vstr	s15, [r3]
  motor_pwm->motor2_pwm = motor_thr + pid->x_s2 - pid->y_s2 - pid->z_s2 + MOTOR_OFF2;
 800099c:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <FlightControlPID_innerLoop+0x540>)
 800099e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80009b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80009ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80009c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000a84 <FlightControlPID_innerLoop+0x544>
 80009cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	edc3 7a01 	vstr	s15, [r3, #4]
  motor_pwm->motor3_pwm = motor_thr + pid->x_s2 + pid->y_s2 + pid->z_s2 + MOTOR_OFF3;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <FlightControlPID_innerLoop+0x540>)
 80009d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80009ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80009f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80009fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a02:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000a84 <FlightControlPID_innerLoop+0x544>
 8000a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	edc3 7a02 	vstr	s15, [r3, #8]
  motor_pwm->motor4_pwm = motor_thr - pid->x_s2 + pid->y_s2 - pid->z_s2 + MOTOR_OFF4;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <FlightControlPID_innerLoop+0x540>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000a24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000a84 <FlightControlPID_innerLoop+0x544>
 8000a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a44:	6a3b      	ldr	r3, [r7, #32]
 8000a46:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000a0 	.word	0x200000a0
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	20000104 	.word	0x20000104
 8000a64:	44480000 	.word	0x44480000
 8000a68:	44480000 	.word	0x44480000
 8000a6c:	c4480000 	.word	0xc4480000
 8000a70:	c4480000 	.word	0xc4480000
 8000a74:	2000087e 	.word	0x2000087e
 8000a78:	3d4ccccd 	.word	0x3d4ccccd
 8000a7c:	441e5550 	.word	0x441e5550
 8000a80:	20000100 	.word	0x20000100
 8000a84:	00000000 	.word	0x00000000

08000a88 <main>:


/* USER CODE END 0 */

int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b092      	sub	sp, #72	; 0x48
 8000a8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	int16_t pid_interval, i;

	int mytimcnt = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
	acc_fil.AXIS_X = 0;
 8000a92:	4bb9      	ldr	r3, [pc, #740]	; (8000d78 <main+0x2f0>)
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
	acc_fil.AXIS_Y = 0;
 8000a9a:	4bb7      	ldr	r3, [pc, #732]	; (8000d78 <main+0x2f0>)
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
	acc_fil.AXIS_Z = 0;
 8000aa2:	4bb5      	ldr	r3, [pc, #724]	; (8000d78 <main+0x2f0>)
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
	mag_fil.AXIS_X = 0;
 8000aaa:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <main+0x2f4>)
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
	mag_fil.AXIS_Y = 0;
 8000ab2:	4bb2      	ldr	r3, [pc, #712]	; (8000d7c <main+0x2f4>)
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
	mag_fil.AXIS_Z = 0;
 8000aba:	4bb0      	ldr	r3, [pc, #704]	; (8000d7c <main+0x2f4>)
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
	gyro_fil.AXIS_X = 0;
 8000ac2:	4baf      	ldr	r3, [pc, #700]	; (8000d80 <main+0x2f8>)
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
	gyro_fil.AXIS_Y = 0;
 8000aca:	4bad      	ldr	r3, [pc, #692]	; (8000d80 <main+0x2f8>)
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
	gyro_fil.AXIS_Z = 0;
 8000ad2:	4bab      	ldr	r3, [pc, #684]	; (8000d80 <main+0x2f8>)
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
	euler_rc_fil.thx = 0;
 8000ada:	4baa      	ldr	r3, [pc, #680]	; (8000d84 <main+0x2fc>)
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
	euler_rc_fil.thy = 0;
 8000ae2:	4ba8      	ldr	r3, [pc, #672]	; (8000d84 <main+0x2fc>)
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
	euler_rc_fil.thz = 0;
 8000aea:	4ba6      	ldr	r3, [pc, #664]	; (8000d84 <main+0x2fc>)
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
	acc_off_calc.AXIS_X = 0;
 8000af2:	4ba5      	ldr	r3, [pc, #660]	; (8000d88 <main+0x300>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
	acc_off_calc.AXIS_Y = 0;
 8000af8:	4ba3      	ldr	r3, [pc, #652]	; (8000d88 <main+0x300>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	acc_off_calc.AXIS_Z = 0;
 8000afe:	4ba2      	ldr	r3, [pc, #648]	; (8000d88 <main+0x300>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
	gyro_off_calc.AXIS_X = 0;
 8000b04:	4ba1      	ldr	r3, [pc, #644]	; (8000d8c <main+0x304>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
	gyro_off_calc.AXIS_Y = 0;
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	; (8000d8c <main+0x304>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
	gyro_off_calc.AXIS_Z = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <main+0x304>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
	acc_offset.AXIS_X = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <main+0x308>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
	acc_offset.AXIS_Y = 0;
 8000b1c:	4b9c      	ldr	r3, [pc, #624]	; (8000d90 <main+0x308>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
	acc_offset.AXIS_Z = 1000;
 8000b22:	4b9b      	ldr	r3, [pc, #620]	; (8000d90 <main+0x308>)
 8000b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b28:	609a      	str	r2, [r3, #8]
	gyro_offset.AXIS_X = 0;
 8000b2a:	4b9a      	ldr	r3, [pc, #616]	; (8000d94 <main+0x30c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	gyro_offset.AXIS_Y = 0;
 8000b30:	4b98      	ldr	r3, [pc, #608]	; (8000d94 <main+0x30c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
	gyro_offset.AXIS_Z = 0;
 8000b36:	4b97      	ldr	r3, [pc, #604]	; (8000d94 <main+0x30c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	euler_rc.thz = euler_ahrs.thz;
 8000b3c:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <main+0x310>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4a96      	ldr	r2, [pc, #600]	; (8000d9c <main+0x314>)
 8000b42:	6093      	str	r3, [r2, #8]
	euler_ahrs_offset.thx = 0;
 8000b44:	4b96      	ldr	r3, [pc, #600]	; (8000da0 <main+0x318>)
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
	euler_ahrs_offset.thy = 0;
 8000b4c:	4b94      	ldr	r3, [pc, #592]	; (8000da0 <main+0x318>)
 8000b4e:	f04f 0200 	mov.w	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]

	for(i=0;i<4;i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000b5a:	e0d8      	b.n	8000d0e <main+0x286>
	{
		acc_y_pre[i].AXIS_X = 0;
 8000b5c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000b60:	4990      	ldr	r1, [pc, #576]	; (8000da4 <main+0x31c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
		acc_y_pre[i].AXIS_Y = 0;
 8000b72:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000b76:	498b      	ldr	r1, [pc, #556]	; (8000da4 <main+0x31c>)
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3304      	adds	r3, #4
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
		acc_y_pre[i].AXIS_Z = 0;
 8000b8a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000b8e:	4985      	ldr	r1, [pc, #532]	; (8000da4 <main+0x31c>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
		acc_x_pre[i].AXIS_X = 0;
 8000ba2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000ba6:	4980      	ldr	r1, [pc, #512]	; (8000da8 <main+0x320>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
		acc_x_pre[i].AXIS_Y = 0;
 8000bb8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000bbc:	497a      	ldr	r1, [pc, #488]	; (8000da8 <main+0x320>)
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3304      	adds	r3, #4
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
		acc_x_pre[i].AXIS_Z = 0;
 8000bd0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000bd4:	4974      	ldr	r1, [pc, #464]	; (8000da8 <main+0x320>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3308      	adds	r3, #8
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
		gyro_y_pre[i].AXIS_X = 0;
 8000be8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000bec:	496f      	ldr	r1, [pc, #444]	; (8000dac <main+0x324>)
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
		gyro_y_pre[i].AXIS_Y = 0;
 8000bfe:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c02:	496a      	ldr	r1, [pc, #424]	; (8000dac <main+0x324>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3304      	adds	r3, #4
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
		gyro_y_pre[i].AXIS_Z = 0;
 8000c16:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c1a:	4964      	ldr	r1, [pc, #400]	; (8000dac <main+0x324>)
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	3308      	adds	r3, #8
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
		gyro_x_pre[i].AXIS_X = 0;
 8000c2e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c32:	495f      	ldr	r1, [pc, #380]	; (8000db0 <main+0x328>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
		gyro_x_pre[i].AXIS_Y = 0;
 8000c44:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c48:	4959      	ldr	r1, [pc, #356]	; (8000db0 <main+0x328>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3304      	adds	r3, #4
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		gyro_x_pre[i].AXIS_Z = 0;
 8000c5c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c60:	4953      	ldr	r1, [pc, #332]	; (8000db0 <main+0x328>)
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		euler_rc_y_pre[i].thx = 0;
 8000c74:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c78:	494e      	ldr	r1, [pc, #312]	; (8000db4 <main+0x32c>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
		euler_rc_y_pre[i].thy = 0;
 8000c8a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000c8e:	4949      	ldr	r1, [pc, #292]	; (8000db4 <main+0x32c>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		euler_rc_y_pre[i].thz = 0;
 8000ca2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000ca6:	4943      	ldr	r1, [pc, #268]	; (8000db4 <main+0x32c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
		euler_rc_x_pre[i].thx = 0;
 8000cba:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000cbe:	493e      	ldr	r1, [pc, #248]	; (8000db8 <main+0x330>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
		euler_rc_x_pre[i].thy = 0;
 8000cd0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000cd4:	4938      	ldr	r1, [pc, #224]	; (8000db8 <main+0x330>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
		euler_rc_x_pre[i].thz = 0;
 8000ce8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000cec:	4932      	ldr	r1, [pc, #200]	; (8000db8 <main+0x330>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8000d00:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000d0e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	f77f af22 	ble.w	8000b5c <main+0xd4>
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d18:	f001 fe12 	bl	8002940 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000d1c:	f000 f854 	bl	8000dc8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d20:	f000 f9e8 	bl	80010f4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d24:	f000 f8b8 	bl	8000e98 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000d28:	f000 f8f2 	bl	8000f10 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000d2c:	f000 f944 	bl	8000fb8 <MX_TIM4_Init>
	MX_TIM9_Init();
 8000d30:	f000 f996 	bl	8001060 <MX_TIM9_Init>
	MX_USART1_UART_Init();
 8000d34:	f000 f9ba 	bl	80010ac <MX_USART1_UART_Init>

	MX_I2C2_Init();
 8000d38:	f000 fee8 	bl	8001b0c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */


	struct VL53L0xData readout_data;

	VL53L0x_init(&hi2c2);
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <main+0x334>)
 8000d3e:	f7ff fa9f 	bl	8000280 <VL53L0x_init>

	while(1) {
	  HAL_Delay(1000);
 8000d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d46:	f001 fe53 	bl	80029f0 <HAL_Delay>

	  int checksensor = VL53L0x_Check(&hi2c2);
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <main+0x334>)
 8000d4c:	f7ff fad0 	bl	80002f0 <VL53L0x_Check>
 8000d50:	4603      	mov	r3, r0
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
	  VL53L0x_StartConversion(&hi2c2);
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <main+0x334>)
 8000d56:	f7ff fb46 	bl	80003e6 <VL53L0x_StartConversion>
	  VL53L0x_ReadDistance(&hi2c2, &readout_data);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <main+0x334>)
 8000d60:	f7ff fb6d 	bl	800043e <VL53L0x_ReadDistance>

	  PRINTF("Status: %d \n", checksensor);
 8000d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000d66:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <main+0x338>)
 8000d68:	f7ff fbb4 	bl	80004d4 <myprintf>
	  PRINTF("Distance: %d mm\n", readout_data.dist_last);
 8000d6c:	8b3b      	ldrh	r3, [r7, #24]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <main+0x33c>)
 8000d72:	f7ff fbaf 	bl	80004d4 <myprintf>
	while(1) {
 8000d76:	e7e4      	b.n	8000d42 <main+0x2ba>
 8000d78:	20000390 	.word	0x20000390
 8000d7c:	20000130 	.word	0x20000130
 8000d80:	20000348 	.word	0x20000348
 8000d84:	200003f4 	.word	0x200003f4
 8000d88:	20000538 	.word	0x20000538
 8000d8c:	20000510 	.word	0x20000510
 8000d90:	200004c4 	.word	0x200004c4
 8000d94:	20000544 	.word	0x20000544
 8000d98:	20000840 	.word	0x20000840
 8000d9c:	200005a8 	.word	0x200005a8
 8000da0:	20000464 	.word	0x20000464
 8000da4:	20000804 	.word	0x20000804
 8000da8:	20000658 	.word	0x20000658
 8000dac:	20000494 	.word	0x20000494
 8000db0:	20000788 	.word	0x20000788
 8000db4:	200003c4 	.word	0x200003c4
 8000db8:	200002bc 	.word	0x200002bc
 8000dbc:	200002f4 	.word	0x200002f4
 8000dc0:	0800a1e4 	.word	0x0800a1e4
 8000dc4:	0800a1f4 	.word	0x0800a1f4

08000dc8 <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <SystemClock_Config+0xc4>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a2d      	ldr	r2, [pc, #180]	; (8000e8c <SystemClock_Config+0xc4>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <SystemClock_Config+0xc4>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <SystemClock_Config+0xc8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df6:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <SystemClock_Config+0xc8>)
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SystemClock_Config+0xc8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e22:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 f997 	bl	8005168 <HAL_RCC_OscConfig>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fbe0 	bl	800561c <HAL_RCC_ClockConfig>

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e5c:	f004 fd70 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <SystemClock_Config+0xcc>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	099b      	lsrs	r3, r3, #6
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 f93f 	bl	80030ee <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e70:	2004      	movs	r0, #4
 8000e72:	f002 f949 	bl	8003108 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7e:	f002 f90c 	bl	800309a <HAL_NVIC_SetPriority>


}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000
 8000e94:	10624dd3 	.word	0x10624dd3

08000e98 <MX_ADC1_Init>:

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <MX_ADC1_Init+0x74>)
 8000ea2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eaa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION12b;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	615a      	str	r2, [r3, #20]
	HAL_ADC_Init(&hadc1);
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000ee4:	f001 fd9b 	bl	8002a1e <HAL_ADC_Init>

	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000ee8:	2309      	movs	r3, #9
 8000eea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <MX_ADC1_Init+0x70>)
 8000efa:	f001 fdd3 	bl	8002aa4 <HAL_ADC_ConfigChannel>

}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000410 	.word	0x20000410
 8000f0c:	40012000 	.word	0x40012000

08000f10 <MX_TIM2_Init>:
//
//}

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 20;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f20:	2214      	movs	r2, #20
 8000f22:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 32767;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f30:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim2);
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f3a:	f005 f86e 	bl	800601a <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f4c:	f005 fb64 	bl	8006618 <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f52:	f005 f8c2 	bl	80060da <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f66:	f006 f858 	bl	800701a <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f82:	f005 f9e7 	bl	8006354 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 8000f86:	463b      	mov	r3, r7
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f8e:	f005 f9e1 	bl	8006354 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3);
 8000f92:	463b      	mov	r3, r7
 8000f94:	2208      	movs	r2, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000f9a:	f005 f9db 	bl	8006354 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM2_Init+0xa4>)
 8000fa6:	f005 f9d5 	bl	8006354 <HAL_TIM_IC_ConfigChannel>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000061c 	.word	0x2000061c

08000fb8 <MX_TIM4_Init>:

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	htim4.Instance = TIM4;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <MX_TIM4_Init+0xa4>)
 8000fc2:	601a      	str	r2, [r3, #0]
#ifdef MOTOR_DC
	htim4.Init.Prescaler = 84;                                    /* DC motor configuration - Freq 494Hz*/
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fc6:	2254      	movs	r2, #84	; 0x54
 8000fc8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1999;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fd2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fd6:	60da      	str	r2, [r3, #12]
	htim4.Init.Prescaler = 100;                                    /* ESC motor configuration - Freq 400Hz*/
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 2075;
#endif

	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim4);
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000fe0:	f005 f81b 	bl	800601a <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000ff2:	f005 fb11 	bl	8006618 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim4);
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_TIM4_Init+0xa0>)
 8000ff8:	f005 f83a 	bl	8006070 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4619      	mov	r1, r3
 800100a:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_TIM4_Init+0xa0>)
 800100c:	f006 f805 	bl	800701a <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001010:	2360      	movs	r3, #96	; 0x60
 8001012:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <MX_TIM4_Init+0xa0>)
 8001028:	f005 fa30 	bl	800648c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2204      	movs	r2, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_TIM4_Init+0xa0>)
 8001034:	f005 fa2a 	bl	800648c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2208      	movs	r2, #8
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM4_Init+0xa0>)
 8001040:	f005 fa24 	bl	800648c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	220c      	movs	r2, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM4_Init+0xa0>)
 800104c:	f005 fa1e 	bl	800648c <HAL_TIM_PWM_ConfigChannel>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000244 	.word	0x20000244
 800105c:	40000800 	.word	0x40000800

08001060 <MX_TIM9_Init>:

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;

	htim9.Instance = TIM9;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_TIM9_Init+0x44>)
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_TIM9_Init+0x48>)
 800106a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 51;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_TIM9_Init+0x44>)
 800106e:	2233      	movs	r2, #51	; 0x33
 8001070:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_TIM9_Init+0x44>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 1999;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_TIM9_Init+0x44>)
 800107a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800107e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_TIM9_Init+0x44>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim9);
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM9_Init+0x44>)
 8001088:	f004 ffc7 	bl	800601a <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	603b      	str	r3, [r7, #0]
	HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig);
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM9_Init+0x44>)
 8001098:	f005 fabe 	bl	8006618 <HAL_TIM_ConfigClockSource>

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000564 	.word	0x20000564
 80010a8:	40014000 	.word	0x40014000

080010ac <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <MX_USART1_UART_Init+0x44>)
 80010b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart1);
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <MX_USART1_UART_Init+0x40>)
 80010e4:	f005 fff2 	bl	80070cc <HAL_UART_Init>

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200004d0 	.word	0x200004d0
 80010f0:	40011000 	.word	0x40011000

080010f4 <MX_GPIO_Init>:
 * EXTI
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 */
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_GPIO_Init+0x9c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
	__GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_GPIO_Init+0x9c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
	__GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <MX_GPIO_Init+0x9c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800114e:	2330      	movs	r3, #48	; 0x30
 8001150:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001152:	2311      	movs	r3, #17
 8001154:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0xa0>)
 8001166:	f002 f813 	bl	8003190 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001170:	2311      	movs	r3, #17
 8001172:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_GPIO_Init+0xa4>)
 8001184:	f002 f804 	bl	8003190 <HAL_GPIO_Init>

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800

0800119c <HAL_TIM_PeriodElapsedCallback>:
/*
 *  Handle Timer9 interrupt @ 800Hz
 *  Set the event flag and increase time index
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]
	if(sensor_init_cali == 0)
 80011a4:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 80c4 	bne.w	8001336 <HAL_TIM_PeriodElapsedCallback+0x19a>
	{
		sensor_init_cali_count++;
 80011ae:	4ba1      	ldr	r3, [pc, #644]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a9f      	ldr	r2, [pc, #636]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011b6:	6013      	str	r3, [r2, #0]

		if(sensor_init_cali_count > 800)
 80011b8:	4b9e      	ldr	r3, [pc, #632]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80011c0:	f340 80b9 	ble.w	8001336 <HAL_TIM_PeriodElapsedCallback+0x19a>
		{
			// Read sensor data and prepare for specific coodinate system
			ReadSensorRawData(LSM6DSL_X_0_handle, LSM6DSL_G_0_handle, LIS2MDL_M_0_handle, LPS22HB_P_0_handle, &acc, &gyro, &mag, &press);
 80011c4:	4b9c      	ldr	r3, [pc, #624]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	4b9c      	ldr	r3, [pc, #624]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	4b9c      	ldr	r3, [pc, #624]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b9c      	ldr	r3, [pc, #624]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4c9c      	ldr	r4, [pc, #624]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011d6:	9403      	str	r4, [sp, #12]
 80011d8:	4c9c      	ldr	r4, [pc, #624]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011da:	9402      	str	r4, [sp, #8]
 80011dc:	4c9c      	ldr	r4, [pc, #624]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011de:	9401      	str	r4, [sp, #4]
 80011e0:	4c9c      	ldr	r4, [pc, #624]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011e2:	9400      	str	r4, [sp, #0]
 80011e4:	f000 fe42 	bl	8001e6c <ReadSensorRawData>

			acc_off_calc.AXIS_X += acc.AXIS_X;
 80011e8:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b99      	ldr	r3, [pc, #612]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a99      	ldr	r2, [pc, #612]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011f4:	6013      	str	r3, [r2, #0]
			acc_off_calc.AXIS_Y += acc.AXIS_Y;
 80011f6:	4b98      	ldr	r3, [pc, #608]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4b96      	ldr	r3, [pc, #600]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	4a95      	ldr	r2, [pc, #596]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001202:	6053      	str	r3, [r2, #4]
			acc_off_calc.AXIS_Z += acc.AXIS_Z;
 8001204:	4b94      	ldr	r3, [pc, #592]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4413      	add	r3, r2
 800120e:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001210:	6093      	str	r3, [r2, #8]

			gyro_off_calc.AXIS_X += gyro.AXIS_X;
 8001212:	4b92      	ldr	r3, [pc, #584]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a8f      	ldr	r2, [pc, #572]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800121e:	6013      	str	r3, [r2, #0]
			gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 8001220:	4b8e      	ldr	r3, [pc, #568]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a8c      	ldr	r2, [pc, #560]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800122c:	6053      	str	r3, [r2, #4]
			gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 800122e:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4413      	add	r3, r2
 8001238:	4a88      	ldr	r2, [pc, #544]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800123a:	6093      	str	r3, [r2, #8]

			if (sensor_init_cali_count >= 1600)
 800123c:	4b7d      	ldr	r3, [pc, #500]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001244:	db77      	blt.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x19a>
			{
				acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 8001246:	4b84      	ldr	r3, [pc, #528]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125e:	ee17 2a90 	vmov	r2, s15
 8001262:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001264:	601a      	str	r2, [r3, #0]
				acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 8001266:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001284:	605a      	str	r2, [r3, #4]
				acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 8001286:	4b74      	ldr	r3, [pc, #464]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001292:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 2a90 	vmov	r2, s15
 80012a2:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012a4:	609a      	str	r2, [r3, #8]

				gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012be:	ee17 2a90 	vmov	r2, s15
 80012c2:	4b69      	ldr	r3, [pc, #420]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012c4:	601a      	str	r2, [r3, #0]
				gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 80012d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 2a90 	vmov	r2, s15
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012e4:	605a      	str	r2, [r3, #4]
				gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 2a90 	vmov	r2, s15
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001304:	609a      	str	r2, [r3, #8]

				acc_off_calc.AXIS_X = 0;
 8001306:	4b54      	ldr	r3, [pc, #336]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
				acc_off_calc.AXIS_Y = 0;
 800130c:	4b52      	ldr	r3, [pc, #328]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
				acc_off_calc.AXIS_Z = 0;
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
				gyro_off_calc.AXIS_X = 0;
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
				gyro_off_calc.AXIS_Y = 0;
 800131e:	4b4f      	ldr	r3, [pc, #316]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
				gyro_off_calc.AXIS_Z = 0;
 8001324:	4b4d      	ldr	r3, [pc, #308]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]

				sensor_init_cali_count = 0;
 800132a:	4b42      	ldr	r3, [pc, #264]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				sensor_init_cali = 1;
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(sensor_init_cali == 1)
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 83bf 	bne.w	8001abe <HAL_TIM_PeriodElapsedCallback+0x922>
	{
		tim9_cnt++;
 8001340:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001348:	6013      	str	r3, [r2, #0]
		tim9_cnt2++;
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001352:	6013      	str	r3, [r2, #0]

		// Read sensor data and prepare for specific coodinate system
		ReadSensorRawData(LSM6DSL_X_0_handle, LSM6DSL_G_0_handle, LIS2MDL_M_0_handle, LPS22HB_P_0_handle, &acc, &gyro, &mag, &press);
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4c38      	ldr	r4, [pc, #224]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001366:	9403      	str	r4, [sp, #12]
 8001368:	4c38      	ldr	r4, [pc, #224]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800136a:	9402      	str	r4, [sp, #8]
 800136c:	4c38      	ldr	r4, [pc, #224]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800136e:	9401      	str	r4, [sp, #4]
 8001370:	4c38      	ldr	r4, [pc, #224]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001372:	9400      	str	r4, [sp, #0]
 8001374:	f000 fd7a 	bl	8001e6c <ReadSensorRawData>

		if (rc_cal_flag == 1)
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	f040 80d5 	bne.w	800152c <HAL_TIM_PeriodElapsedCallback+0x390>
		{
			acc_off_calc.AXIS_X += acc.AXIS_X;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800138e:	6013      	str	r3, [r2, #0]
			acc_off_calc.AXIS_Y += acc.AXIS_Y;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800139c:	6053      	str	r3, [r2, #4]
			acc_off_calc.AXIS_Z += acc.AXIS_Z;
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013aa:	6093      	str	r3, [r2, #8]

			gyro_off_calc.AXIS_X += gyro.AXIS_X;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013b8:	6013      	str	r3, [r2, #0]
			gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a25      	ldr	r2, [pc, #148]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013c6:	6053      	str	r3, [r2, #4]
			gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a22      	ldr	r2, [pc, #136]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013d4:	6093      	str	r3, [r2, #8]

			rc_cal_cnt++;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013de:	6013      	str	r3, [r2, #0]

			if (rc_cal_cnt >= 800)
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013e8:	f2c0 80a0 	blt.w	800152c <HAL_TIM_PeriodElapsedCallback+0x390>
			{
				acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001404:	ee17 2a90 	vmov	r2, s15
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800140a:	601a      	str	r2, [r3, #0]
				acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001418:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001460 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001424:	ee17 2a90 	vmov	r2, s15
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	e026      	b.n	800147c <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800142e:	bf00      	nop
 8001430:	200000e8 	.word	0x200000e8
 8001434:	200000ec 	.word	0x200000ec
 8001438:	200000bc 	.word	0x200000bc
 800143c:	200000c0 	.word	0x200000c0
 8001440:	200000c4 	.word	0x200000c4
 8001444:	200000c8 	.word	0x200000c8
 8001448:	200005c0 	.word	0x200005c0
 800144c:	20000834 	.word	0x20000834
 8001450:	20000474 	.word	0x20000474
 8001454:	20000108 	.word	0x20000108
 8001458:	20000538 	.word	0x20000538
 800145c:	20000510 	.word	0x20000510
 8001460:	3aa3d70a 	.word	0x3aa3d70a
 8001464:	200004c4 	.word	0x200004c4
 8001468:	20000544 	.word	0x20000544
 800146c:	200000e0 	.word	0x200000e0
 8001470:	200000e4 	.word	0x200000e4
 8001474:	200000cc 	.word	0x200000cc
 8001478:	200000d4 	.word	0x200000d4
				acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 800147c:	4bae      	ldr	r3, [pc, #696]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x5a0>
 800148c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001494:	ee17 2a90 	vmov	r2, s15
 8001498:	4ba9      	ldr	r3, [pc, #676]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800149a:	609a      	str	r2, [r3, #8]

				gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 800149c:	4ba9      	ldr	r3, [pc, #676]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x5a0>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b4:	ee17 2a90 	vmov	r2, s15
 80014b8:	4ba3      	ldr	r3, [pc, #652]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80014ba:	601a      	str	r2, [r3, #0]
				gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 80014bc:	4ba1      	ldr	r3, [pc, #644]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x5a0>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	4b9b      	ldr	r3, [pc, #620]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80014da:	605a      	str	r2, [r3, #4]
				gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 80014dc:	4b99      	ldr	r3, [pc, #612]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x5a0>
 80014ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f4:	ee17 2a90 	vmov	r2, s15
 80014f8:	4b93      	ldr	r3, [pc, #588]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80014fa:	609a      	str	r2, [r3, #8]

				acc_off_calc.AXIS_X = 0;
 80014fc:	4b8e      	ldr	r3, [pc, #568]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
				acc_off_calc.AXIS_Y = 0;
 8001502:	4b8d      	ldr	r3, [pc, #564]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
				acc_off_calc.AXIS_Z = 0;
 8001508:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
				gyro_off_calc.AXIS_X = 0;
 800150e:	4b8d      	ldr	r3, [pc, #564]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
				gyro_off_calc.AXIS_Y = 0;
 8001514:	4b8b      	ldr	r3, [pc, #556]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
				gyro_off_calc.AXIS_Z = 0;
 800151a:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]

				rc_cal_cnt = 0;
 8001520:	4b8a      	ldr	r3, [pc, #552]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
				rc_cal_flag = 0;
 8001526:	4b8a      	ldr	r3, [pc, #552]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
			}
		}

		acc.AXIS_X -= acc_offset.AXIS_X;
 800152c:	4b89      	ldr	r3, [pc, #548]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b83      	ldr	r3, [pc, #524]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a87      	ldr	r2, [pc, #540]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001538:	6013      	str	r3, [r2, #0]
		acc.AXIS_Y -= acc_offset.AXIS_Y;
 800153a:	4b86      	ldr	r3, [pc, #536]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4b80      	ldr	r3, [pc, #512]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a83      	ldr	r2, [pc, #524]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001546:	6053      	str	r3, [r2, #4]
		acc.AXIS_Z -= (acc_offset.AXIS_Z - 1000);
 8001548:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a7f      	ldr	r2, [pc, #508]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001558:	6093      	str	r3, [r2, #8]
		gyro.AXIS_X -= gyro_offset.AXIS_X;
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001566:	6013      	str	r3, [r2, #0]
		gyro.AXIS_Y -= gyro_offset.AXIS_Y;
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	4a79      	ldr	r2, [pc, #484]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001574:	6053      	str	r3, [r2, #4]
		gyro.AXIS_Z -= gyro_offset.AXIS_Z;
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b73      	ldr	r3, [pc, #460]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001582:	6093      	str	r3, [r2, #8]

		// Save filtered data to acc_FIFO
		acc_FIFO[tim9_cnt2-1].AXIS_X = acc.AXIS_X;
 8001584:	4b73      	ldr	r3, [pc, #460]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	ee07 1a90 	vmov	s15, r1
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	4972      	ldr	r1, [pc, #456]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		acc_FIFO[tim9_cnt2-1].AXIS_Y = acc.AXIS_Y;
 80015a6:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80015a8:	6859      	ldr	r1, [r3, #4]
 80015aa:	4b6c      	ldr	r3, [pc, #432]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1e5a      	subs	r2, r3, #1
 80015b0:	ee07 1a90 	vmov	s15, r1
 80015b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b8:	4969      	ldr	r1, [pc, #420]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3304      	adds	r3, #4
 80015c6:	edc3 7a00 	vstr	s15, [r3]
		acc_FIFO[tim9_cnt2-1].AXIS_Z = acc.AXIS_Z;
 80015ca:	4b62      	ldr	r3, [pc, #392]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	ee07 1a90 	vmov	s15, r1
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	4960      	ldr	r1, [pc, #384]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3308      	adds	r3, #8
 80015ea:	edc3 7a00 	vstr	s15, [r3]

		// IIR Filtering on gyro
		gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80015f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001606:	edd3 6a03 	vldr	s13, [r3, #12]
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001618:	4b52      	ldr	r3, [pc, #328]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800161a:	edd3 6a04 	vldr	s13, [r3, #16]
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001620:	edd3 7a03 	vldr	s15, [r3, #12]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_X + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_X;
 800162c:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001642:	edd3 6a01 	vldr	s13, [r3, #4]
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001648:	edd3 7a03 	vldr	s15, [r3, #12]
 800164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
		gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 8001654:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001656:	edc3 7a00 	vstr	s15, [r3]
		gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 800165a:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800165c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001672:	edd3 6a03 	vldr	s13, [r3, #12]
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001678:	edd3 7a01 	vldr	s15, [r3, #4]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001684:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001686:	edd3 6a04 	vldr	s13, [r3, #16]
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800168c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Y + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Y;
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800169a:	edd3 6a00 	vldr	s13, [r3]
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80016ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80016b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
		gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80016c2:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80016c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80016de:	edd3 6a03 	vldr	s13, [r3, #12]
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80016e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80016f2:	edd3 6a04 	vldr	s13, [r3, #16]
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80016f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Z + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Z;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001706:	edd3 6a00 	vldr	s13, [r3]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800170c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800171a:	edd3 6a01 	vldr	s13, [r3, #4]
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001720:	edd3 7a05 	vldr	s15, [r3, #20]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
		gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800172e:	edc3 7a02 	vstr	s15, [r3, #8]
		// Shift IIR filter state
		for(int i=1;i>0;i--)
 8001732:	2301      	movs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e08e      	b.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x6ba>
 8001738:	20000538 	.word	0x20000538
 800173c:	3aa3d70a 	.word	0x3aa3d70a
 8001740:	200004c4 	.word	0x200004c4
 8001744:	20000510 	.word	0x20000510
 8001748:	20000544 	.word	0x20000544
 800174c:	200000d4 	.word	0x200000d4
 8001750:	200000cc 	.word	0x200000cc
 8001754:	20000108 	.word	0x20000108
 8001758:	20000474 	.word	0x20000474
 800175c:	200000e4 	.word	0x200000e4
 8001760:	2000013c 	.word	0x2000013c
 8001764:	20000000 	.word	0x20000000
 8001768:	20000788 	.word	0x20000788
 800176c:	20000494 	.word	0x20000494
 8001770:	20000348 	.word	0x20000348
		{
			gyro_x_pre[i].AXIS_X = gyro_x_pre[i-1].AXIS_X;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	4966      	ldr	r1, [pc, #408]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	4863      	ldr	r0, [pc, #396]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4403      	add	r3, r0
 8001794:	6019      	str	r1, [r3, #0]
			gyro_x_pre[i].AXIS_Y = gyro_x_pre[i-1].AXIS_Y;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	495e      	ldr	r1, [pc, #376]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3304      	adds	r3, #4
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	485a      	ldr	r0, [pc, #360]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	3304      	adds	r3, #4
 80017ba:	6019      	str	r1, [r3, #0]
			gyro_x_pre[i].AXIS_Z = gyro_x_pre[i-1].AXIS_Z;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	4954      	ldr	r1, [pc, #336]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3308      	adds	r3, #8
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	4850      	ldr	r0, [pc, #320]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4403      	add	r3, r0
 80017de:	3308      	adds	r3, #8
 80017e0:	6019      	str	r1, [r3, #0]
			gyro_y_pre[i].AXIS_X = gyro_y_pre[i-1].AXIS_X;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	494c      	ldr	r1, [pc, #304]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	4848      	ldr	r0, [pc, #288]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4403      	add	r3, r0
 8001802:	6019      	str	r1, [r3, #0]
			gyro_y_pre[i].AXIS_Y = gyro_y_pre[i-1].AXIS_Y;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	4943      	ldr	r1, [pc, #268]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3304      	adds	r3, #4
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	483f      	ldr	r0, [pc, #252]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4403      	add	r3, r0
 8001826:	3304      	adds	r3, #4
 8001828:	6019      	str	r1, [r3, #0]
			gyro_y_pre[i].AXIS_Z = gyro_y_pre[i-1].AXIS_Z;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	493a      	ldr	r1, [pc, #232]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3308      	adds	r3, #8
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	4836      	ldr	r0, [pc, #216]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4403      	add	r3, r0
 800184c:	3308      	adds	r3, #8
 800184e:	6019      	str	r1, [r3, #0]
		for(int i=1;i>0;i--)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3b01      	subs	r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	dc8b      	bgt.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x5d8>
		}
		gyro_x_pre[0].AXIS_X = gyro.AXIS_X;
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x780>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
		gyro_x_pre[0].AXIS_Y = gyro.AXIS_Y;
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800187c:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_x_pre[0].AXIS_Z = gyro.AXIS_Z;
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x780>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800188e:	edc3 7a02 	vstr	s15, [r3, #8]
		gyro_y_pre[0].AXIS_X = gyro_fil.AXIS_X;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8001898:	6013      	str	r3, [r2, #0]
		gyro_y_pre[0].AXIS_Y = gyro_fil.AXIS_Y;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80018a0:	6053      	str	r3, [r2, #4]
		gyro_y_pre[0].AXIS_Z = gyro_fil.AXIS_Z;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80018a8:	6093      	str	r3, [r2, #8]

		//  Save filtered data to gyro_FIFO
		gyro_FIFO[tim9_cnt2-1].AXIS_X = gyro_fil.AXIS_X;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	481c      	ldr	r0, [pc, #112]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4403      	add	r3, r0
 80018c0:	6019      	str	r1, [r3, #0]
		gyro_FIFO[tim9_cnt2-1].AXIS_Y = gyro_fil.AXIS_Y;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	4816      	ldr	r0, [pc, #88]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4403      	add	r3, r0
 80018d8:	3304      	adds	r3, #4
 80018da:	6019      	str	r1, [r3, #0]
		gyro_FIFO[tim9_cnt2-1].AXIS_Z = gyro_fil.AXIS_Z;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4403      	add	r3, r0
 80018f2:	3308      	adds	r3, #8
 80018f4:	6019      	str	r1, [r3, #0]


		if(tim9_cnt2 == FIFO_Order)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	f040 8086 	bne.w	8001a0c <HAL_TIM_PeriodElapsedCallback+0x870>
		{
			tim9_cnt2 = 0;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
			tim9_event_flag = 1;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x790>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
			for(int i=0;i<FIFO_Order;i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	e079      	b.n	8001a06 <HAL_TIM_PeriodElapsedCallback+0x86a>
 8001912:	bf00      	nop
 8001914:	20000788 	.word	0x20000788
 8001918:	20000494 	.word	0x20000494
 800191c:	20000474 	.word	0x20000474
 8001920:	20000348 	.word	0x20000348
 8001924:	200000e4 	.word	0x200000e4
 8001928:	200007c4 	.word	0x200007c4
 800192c:	200000dc 	.word	0x200000dc
			{
				acc_ahrs_FIFO[i].AXIS_X = acc_FIFO[i].AXIS_X;
 8001930:	4965      	ldr	r1, [pc, #404]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4862      	ldr	r0, [pc, #392]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	6019      	str	r1, [r3, #0]
				acc_ahrs_FIFO[i].AXIS_Y = acc_FIFO[i].AXIS_Y;
 8001950:	495d      	ldr	r1, [pc, #372]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3304      	adds	r3, #4
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	485a      	ldr	r0, [pc, #360]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4403      	add	r3, r0
 8001970:	3304      	adds	r3, #4
 8001972:	6019      	str	r1, [r3, #0]
				acc_ahrs_FIFO[i].AXIS_Z = acc_FIFO[i].AXIS_Z;
 8001974:	4954      	ldr	r1, [pc, #336]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3308      	adds	r3, #8
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	4851      	ldr	r0, [pc, #324]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	3308      	adds	r3, #8
 8001996:	6019      	str	r1, [r3, #0]
				gyro_ahrs_FIFO[i].AXIS_X = gyro_FIFO[i].AXIS_X;
 8001998:	494d      	ldr	r1, [pc, #308]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	484a      	ldr	r0, [pc, #296]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4403      	add	r3, r0
 80019b6:	6019      	str	r1, [r3, #0]
				gyro_ahrs_FIFO[i].AXIS_Y = gyro_FIFO[i].AXIS_Y;
 80019b8:	4945      	ldr	r1, [pc, #276]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x934>)
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3304      	adds	r3, #4
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	4842      	ldr	r0, [pc, #264]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4403      	add	r3, r0
 80019d8:	3304      	adds	r3, #4
 80019da:	6019      	str	r1, [r3, #0]
				gyro_ahrs_FIFO[i].AXIS_Z = gyro_FIFO[i].AXIS_Z;
 80019dc:	493c      	ldr	r1, [pc, #240]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x934>)
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3308      	adds	r3, #8
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	4839      	ldr	r0, [pc, #228]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	3308      	adds	r3, #8
 80019fe:	6019      	str	r1, [r3, #0]
			for(int i=0;i<FIFO_Order;i++)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	dd91      	ble.n	8001930 <HAL_TIM_PeriodElapsedCallback+0x794>
			}
		}


		gyro_rad.gx = ((float)gyro_fil.AXIS_X)*((float)COE_MDPS_TO_RADPS);
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001adc <HAL_TIM_PeriodElapsedCallback+0x940>
 8001a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
		gyro_rad.gy = ((float)gyro_fil.AXIS_Y)*((float)COE_MDPS_TO_RADPS);
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a26:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001adc <HAL_TIM_PeriodElapsedCallback+0x940>
 8001a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001a30:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_rad.gz = ((float)gyro_fil.AXIS_Z)*((float)COE_MDPS_TO_RADPS);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001a36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a3a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001adc <HAL_TIM_PeriodElapsedCallback+0x940>
 8001a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001a44:	edc3 7a02 	vstr	s15, [r3, #8]

		euler_ahrs.thz += gyro_rad.gz*PID_SAMPLING_TIME;
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001a4a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a54:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001ae8 <HAL_TIM_PeriodElapsedCallback+0x94c>
 8001a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001a62:	edc3 7a02 	vstr	s15, [r3, #8]

		if(gTHR<MIN_THR)
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6c:	2bc7      	cmp	r3, #199	; 0xc7
 8001a6e:	dc07      	bgt.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x8e4>
		{
			euler_rc.thz = 0;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
			euler_ahrs.thz = 0;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
		}

		if (rc_connection_flag && rc_enable_motor)
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x906>
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x906>
		{   // Do PID Control
			FlightControlPID_innerLoop(&euler_rc_fil, &gyro_rad, &ahrs, &pid, &motor_pwm);
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001a98:	4911      	ldr	r1, [pc, #68]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001a9a:	481b      	ldr	r0, [pc, #108]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001a9c:	f7fe fd50 	bl	8000540 <FlightControlPID_innerLoop>
 8001aa0:	e002      	b.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x90c>
		}
		else
		{
			// set motor output zero
			set_motor_pwm_zero(&motor_pwm);
 8001aa2:	4816      	ldr	r0, [pc, #88]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001aa4:	f000 f910 	bl	8001cc8 <set_motor_pwm_zero>
		}

		if(gTHR<MIN_THR)
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	2bc7      	cmp	r3, #199	; 0xc7
 8001ab0:	dc02      	bgt.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0x91c>
		{
			set_motor_pwm_zero(&motor_pwm);
 8001ab2:	4812      	ldr	r0, [pc, #72]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001ab4:	f000 f908 	bl	8001cc8 <set_motor_pwm_zero>
		}

		set_motor_pwm(&motor_pwm);      /* To comment if want to debug remocon calibration switching off the motors */
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001aba:	f000 f85b 	bl	8001b74 <set_motor_pwm>
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000013c 	.word	0x2000013c
 8001acc:	20000280 	.word	0x20000280
 8001ad0:	200007c4 	.word	0x200007c4
 8001ad4:	20000354 	.word	0x20000354
 8001ad8:	20000348 	.word	0x20000348
 8001adc:	379268a9 	.word	0x379268a9
 8001ae0:	2000052c 	.word	0x2000052c
 8001ae4:	20000840 	.word	0x20000840
 8001ae8:	3aa3d70a 	.word	0x3aa3d70a
 8001aec:	2000087e 	.word	0x2000087e
 8001af0:	200005a8 	.word	0x200005a8
 8001af4:	20000882 	.word	0x20000882
 8001af8:	200000d0 	.word	0x200000d0
 8001afc:	20000484 	.word	0x20000484
 8001b00:	200001d0 	.word	0x200001d0
 8001b04:	20000114 	.word	0x20000114
 8001b08:	200003f4 	.word	0x200003f4

08001b0c <MX_I2C2_Init>:
	ARMING_Update(rc_enable_motor);
}


static void MX_I2C2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_I2C2_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_I2C2_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_I2C2_Init+0x50>)
 8001b4a:	f001 fcef 	bl	800352c <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 f808 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002f4 	.word	0x200002f4
 8001b60:	40005800 	.word	0x40005800
 8001b64:	000186a0 	.word	0x000186a0

08001b68 <Error_Handler>:

void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <set_motor_pwm>:
/*
 * Setup the driving power for 4 motors. p1~p4 data range is 0~1999, which equals
 * to 0~100% duty cycle (for DC motor configuration)
 */
void set_motor_pwm(MotorControlTypeDef *motor_pwm)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if (motor_pwm->motor1_pwm >= MOTOR_MAX_PWM_VALUE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001cc0 <set_motor_pwm+0x14c>
 8001b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	db05      	blt.n	8001b9c <set_motor_pwm+0x28>
    htim4.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 8001b90:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <set_motor_pwm+0x150>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f240 726c 	movw	r2, #1900	; 0x76c
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9a:	e016      	b.n	8001bca <set_motor_pwm+0x56>
  else if (motor_pwm->motor1_pwm <= MOTOR_MIN_PWM_VALUE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d804      	bhi.n	8001bb6 <set_motor_pwm+0x42>
    htim4.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <set_motor_pwm+0x150>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	e009      	b.n	8001bca <set_motor_pwm+0x56>
  else
    htim4.Instance->CCR1 = (uint32_t) motor_pwm->motor1_pwm; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <set_motor_pwm+0x150>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc4:	ee17 2a90 	vmov	r2, s15
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (motor_pwm->motor2_pwm >= MOTOR_MAX_PWM_VALUE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001cc0 <set_motor_pwm+0x14c>
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	db05      	blt.n	8001bea <set_motor_pwm+0x76>
    htim4.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <set_motor_pwm+0x150>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f240 726c 	movw	r2, #1900	; 0x76c
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
 8001be8:	e016      	b.n	8001c18 <set_motor_pwm+0xa4>
  else if (motor_pwm->motor2_pwm <= MOTOR_MIN_PWM_VALUE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d804      	bhi.n	8001c04 <set_motor_pwm+0x90>
    htim4.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <set_motor_pwm+0x150>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
 8001c02:	e009      	b.n	8001c18 <set_motor_pwm+0xa4>
  else
    htim4.Instance->CCR2 = (uint32_t) motor_pwm->motor2_pwm;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c12:	ee17 2a90 	vmov	r2, s15
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (motor_pwm->motor3_pwm >= MOTOR_MAX_PWM_VALUE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001cc0 <set_motor_pwm+0x14c>
 8001c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	db05      	blt.n	8001c38 <set_motor_pwm+0xc4>
    htim4.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f240 726c 	movw	r2, #1900	; 0x76c
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c36:	e016      	b.n	8001c66 <set_motor_pwm+0xf2>
  else if (motor_pwm->motor3_pwm <= MOTOR_MIN_PWM_VALUE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d804      	bhi.n	8001c52 <set_motor_pwm+0xde>
    htim4.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c50:	e009      	b.n	8001c66 <set_motor_pwm+0xf2>
  else
    htim4.Instance->CCR3 = (uint32_t) motor_pwm->motor3_pwm;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c60:	ee17 2a90 	vmov	r2, s15
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c
  
  if (motor_pwm->motor4_pwm >= MOTOR_MAX_PWM_VALUE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c6c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001cc0 <set_motor_pwm+0x14c>
 8001c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	db05      	blt.n	8001c86 <set_motor_pwm+0x112>
    htim4.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f240 726c 	movw	r2, #1900	; 0x76c
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
}
 8001c84:	e016      	b.n	8001cb4 <set_motor_pwm+0x140>
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d804      	bhi.n	8001ca0 <set_motor_pwm+0x12c>
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <set_motor_pwm+0x150>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c9e:	e009      	b.n	8001cb4 <set_motor_pwm+0x140>
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <set_motor_pwm+0x150>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cae:	ee17 2a90 	vmov	r2, s15
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	44ed8000 	.word	0x44ed8000
 8001cc4:	20000244 	.word	0x20000244

08001cc8 <set_motor_pwm_zero>:


void set_motor_pwm_zero(MotorControlTypeDef *motor_pwm)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  motor_pwm->motor1_pwm = 0;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
  motor_pwm->motor2_pwm = 0;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  motor_pwm->motor3_pwm = 0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  motor_pwm->motor4_pwm = 0;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <init_rc_variables>:
  cnt = 0;
  init_queue(&que);
}

void init_rc_variables(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  uint32_t i;
  rc_connection_flag = 0;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <init_rc_variables+0x54>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  for (i=0;i<4;i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	e016      	b.n	8001d3c <init_rc_variables+0x40>
  {
    rc_flag[i] = 0;
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <init_rc_variables+0x58>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    rc_t_rise[i] = 0;
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <init_rc_variables+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t_fall[i] = 0;
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <init_rc_variables+0x60>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2100      	movs	r1, #0
 8001d28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t[i] = 0;
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <init_rc_variables+0x64>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2100      	movs	r1, #0
 8001d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i=0;i<4;i++)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d9e5      	bls.n	8001d0e <init_rc_variables+0x12>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	20000882 	.word	0x20000882
 8001d54:	20000858 	.word	0x20000858
 8001d58:	2000085c 	.word	0x2000085c
 8001d5c:	200008d4 	.word	0x200008d4
 8001d60:	2000086c 	.word	0x2000086c

08001d64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
      }
  }
  #endif
  #ifdef REMOCON_BLE
        
        update_rc_data(0);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f823 	bl	8001db8 <update_rc_data>
      
  #endif
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_SYSTICK_Callback>:


void HAL_SYSTICK_Callback(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  // Process user timer
  User_Timer_Callback();
 8001d80:	f000 fa80 	bl	8002284 <User_Timer_Callback>
  // Count rc_timeout up to 1s
  if (rc_timeout < 1000)
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_SYSTICK_Callback+0x34>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8c:	da04      	bge.n	8001d98 <HAL_SYSTICK_Callback+0x1c>
    rc_timeout++;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_SYSTICK_Callback+0x34>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_SYSTICK_Callback+0x34>)
 8001d96:	6013      	str	r3, [r2, #0]
  if (rc_timeout > RC_TIMEOUT_VALUE)
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_SYSTICK_Callback+0x34>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b1e      	cmp	r3, #30
 8001d9e:	dd01      	ble.n	8001da4 <HAL_SYSTICK_Callback+0x28>
    init_rc_variables();
 8001da0:	f7ff ffac 	bl	8001cfc <init_rc_variables>
  #ifdef REMOCON_PWM
    rc_connection_flag = (rc_timeout <= RC_TIMEOUT_VALUE);
  #endif
  #ifdef REMOCON_BLE
    rc_connection_flag = 1;             /* To modify and check status of BLE connection */
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_SYSTICK_Callback+0x38>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
  #endif
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000850 	.word	0x20000850
 8001db4:	20000882 	.word	0x20000882

08001db8 <update_rc_data>:


/* Update global variables of R/C data */
void update_rc_data(int32_t idx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
      default: break;
    }
  #endif
  
  // Activate Calibration Procedure  
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL > RC_CAL_THRESHOLD) && (gRUD < - RC_CAL_THRESHOLD))
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <update_rc_data+0x98>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d114      	bne.n	8001df4 <update_rc_data+0x3c>
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <update_rc_data+0x9c>)
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001dd4:	da0e      	bge.n	8001df4 <update_rc_data+0x3c>
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <update_rc_data+0xa0>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001de0:	dd08      	ble.n	8001df4 <update_rc_data+0x3c>
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <update_rc_data+0xa4>)
 8001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de8:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001dec:	da02      	bge.n	8001df4 <update_rc_data+0x3c>
  {
    rc_cal_flag = 1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <update_rc_data+0xa8>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
  }

  // Activate Arming/Disarming 
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL < - RC_CAL_THRESHOLD) && (gRUD > RC_CAL_THRESHOLD))
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <update_rc_data+0x98>)
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d122      	bne.n	8001e44 <update_rc_data+0x8c>
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <update_rc_data+0x9c>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001e08:	da1c      	bge.n	8001e44 <update_rc_data+0x8c>
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <update_rc_data+0xa0>)
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001e14:	da16      	bge.n	8001e44 <update_rc_data+0x8c>
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <update_rc_data+0xa4>)
 8001e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001e20:	dd10      	ble.n	8001e44 <update_rc_data+0x8c>
  {
    if (rc_enable_motor==0) // if not armed -> arm
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <update_rc_data+0xac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <update_rc_data+0x80>
    {
      rc_enable_motor = 1;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <update_rc_data+0xac>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
      fly_ready = 1;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <update_rc_data+0xb0>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    {
      rc_enable_motor = 0;
      fly_ready = 0;
    }
  }
}
 8001e36:	e005      	b.n	8001e44 <update_rc_data+0x8c>
      rc_enable_motor = 0;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <update_rc_data+0xac>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
      fly_ready = 0;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <update_rc_data+0xb0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	2000087e 	.word	0x2000087e
 8001e54:	2000087c 	.word	0x2000087c
 8001e58:	20000880 	.word	0x20000880
 8001e5c:	200008d2 	.word	0x200008d2
 8001e60:	200000cc 	.word	0x200000cc
 8001e64:	200000d0 	.word	0x200000d0
 8001e68:	200000d8 	.word	0x200000d8

08001e6c <ReadSensorRawData>:
 *      Acc - mg
 *      Gyro - mdps
 *      Mag - mguass
 */
void ReadSensorRawData(void *ACC_handle, void *GYR_handle, void *MAG_handle, void *PRE_handle, AxesRaw_TypeDef *acc, AxesRaw_TypeDef *gyro, AxesRaw_TypeDef *mag, float *pre)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
    int32_t t1;
    SensorAxes_t acc_temp_int16, gyro_temp_int16, mag_temp_int16;            /* Data Type int16_t */
    AxesRaw_TypeDef acc_temp, gyro_temp; 
    /* Data Type int32_t */
    // Read data is in mg unit
    BSP_ACCELERO_Get_Axes(ACC_handle, &acc_temp_int16);
 8001e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e7e:	4619      	mov	r1, r3
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fbd2 	bl	800262a <BSP_ACCELERO_Get_Axes>
    acc_temp.AXIS_X = (int32_t) acc_temp_int16.AXIS_X;                /* Casting data to int32_t */
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	61fb      	str	r3, [r7, #28]
    acc_temp.AXIS_Y = (int32_t) acc_temp_int16.AXIS_Y;
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8c:	623b      	str	r3, [r7, #32]
    acc_temp.AXIS_Z = (int32_t) acc_temp_int16.AXIS_Z;
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    // Read data is in mdps unit
    BSP_GYRO_Get_Axes(GYR_handle, &gyro_temp_int16);
 8001e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e96:	4619      	mov	r1, r3
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f000 fbf1 	bl	8002680 <BSP_GYRO_Get_Axes>
    gyro_temp.AXIS_X = (int32_t) gyro_temp_int16.AXIS_X;                /* Casting data to int32_t */
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	613b      	str	r3, [r7, #16]
    gyro_temp.AXIS_Y = (int32_t) gyro_temp_int16.AXIS_Y;
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea4:	617b      	str	r3, [r7, #20]
    gyro_temp.AXIS_Z = (int32_t) gyro_temp_int16.AXIS_Z;
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	61bb      	str	r3, [r7, #24]
    // Read data is in mg unit
    if (USE_MAG_SENSOR){
        BSP_MAGNETO_Get_Axes(MAG_handle, &mag_temp_int16);
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fc10 	bl	80026d6 <BSP_MAGNETO_Get_Axes>
        mag->AXIS_X = (int32_t) mag_temp_int16.AXIS_X;
 8001eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eba:	601a      	str	r2, [r3, #0]
        mag->AXIS_Y = (int32_t) mag_temp_int16.AXIS_Y;
 8001ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec0:	605a      	str	r2, [r3, #4]
        mag->AXIS_Z = (int32_t) mag_temp_int16.AXIS_Z;
 8001ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec6:	609a      	str	r2, [r3, #8]
        mag->AXIS_Y = 0;
        mag->AXIS_Z = 0;
    }
    
    if (USE_PRESSURE_SENSOR)
        BSP_PRESSURE_Get_Press(PRE_handle, pre);
 8001ec8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f000 fc2e 	bl	800272c <BSP_PRESSURE_Get_Press>
        // No need to convert in this case
    }
    else if (COORDINATE_SYSTEM == 3)
    {
     
      acc->AXIS_X = -acc_temp.AXIS_Y;
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	425a      	negs	r2, r3
 8001ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed6:	601a      	str	r2, [r3, #0]
      acc->AXIS_Y = acc_temp.AXIS_X;
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001edc:	605a      	str	r2, [r3, #4]
      acc->AXIS_Z = acc_temp.AXIS_Z;
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee2:	609a      	str	r2, [r3, #8]
      
      gyro->AXIS_X = -gyro_temp.AXIS_Y;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	425a      	negs	r2, r3
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	601a      	str	r2, [r3, #0]
      gyro->AXIS_Y = gyro_temp.AXIS_X;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	605a      	str	r2, [r3, #4]
      gyro->AXIS_Z = gyro_temp.AXIS_Z;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef6:	609a      	str	r2, [r3, #8]
      
      // convert mag
      t1 = mag->AXIS_X;
 8001ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	64fb      	str	r3, [r7, #76]	; 0x4c
      mag->AXIS_X = - mag->AXIS_Y;
 8001efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	425a      	negs	r2, r3
 8001f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f06:	601a      	str	r2, [r3, #0]
      mag->AXIS_Y = t1;
 8001f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f0c:	605a      	str	r2, [r3, #4]
        gyro->AXIS_Y = - gyro->AXIS_Y;
        // convert mag
        mag->AXIS_X = - mag->AXIS_X;
        mag->AXIS_Y = - mag->AXIS_Y;
    }
}
 8001f0e:	bf00      	nop
 8001f10:	3750      	adds	r7, #80	; 0x50
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	f001 f8b2 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f28:	f001 f8b7 	bl	800309a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_ADC_MspInit+0x50>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d119      	bne.n	8001f76 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_ADC_MspInit+0x54>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_ADC_MspInit+0x54>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_ADC_MspInit+0x54>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_ADC_MspInit+0x58>)
 8001f72:	f001 f90d 	bl	8003190 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40012000 	.word	0x40012000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400

08001f8c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d126      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a33      	ldr	r2, [pc, #204]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fba:	230f      	movs	r3, #15
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4828      	ldr	r0, [pc, #160]	; (8002078 <HAL_TIM_Base_MspInit+0xec>)
 8001fd6:	f001 f8db 	bl	8003190 <HAL_GPIO_Init>

  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2102      	movs	r1, #2
 8001fde:	201c      	movs	r0, #28
 8001fe0:	f001 f85b 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fe4:	201c      	movs	r0, #28
 8001fe6:	f001 f874 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001fea:	e03f      	b.n	800206c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM4)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_TIM_Base_MspInit+0xf0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11f      	bne.n	8002036 <HAL_TIM_Base_MspInit+0xaa>
    __TIM4_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002012:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002024:	2302      	movs	r3, #2
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4814      	ldr	r0, [pc, #80]	; (8002080 <HAL_TIM_Base_MspInit+0xf4>)
 8002030:	f001 f8ae 	bl	8003190 <HAL_GPIO_Init>
}
 8002034:	e01a      	b.n	800206c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM9)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_TIM_Base_MspInit+0xf8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d115      	bne.n	800206c <HAL_TIM_Base_MspInit+0xe0>
    __TIM9_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6453      	str	r3, [r2, #68]	; 0x44
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_TIM_Base_MspInit+0xe8>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2103      	movs	r1, #3
 8002060:	2018      	movs	r0, #24
 8002062:	f001 f81a 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002066:	2018      	movs	r0, #24
 8002068:	f001 f833 	bl	80030d2 <HAL_NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40000800 	.word	0x40000800
 8002080:	40020400 	.word	0x40020400
 8002084:	40014000 	.word	0x40014000

08002088 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x68>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d126      	bne.n	80020e8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_UART_MspInit+0x6c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_UART_MspInit+0x6c>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_UART_MspInit+0x6c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c8:	2307      	movs	r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_UART_MspInit+0x70>)
 80020d4:	f001 f85c 	bl	8003190 <HAL_GPIO_Init>

  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2104      	movs	r1, #4
 80020dc:	2025      	movs	r0, #37	; 0x25
 80020de:	f000 ffdc 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e2:	2025      	movs	r0, #37	; 0x25
 80020e4:	f000 fff5 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40011000 	.word	0x40011000
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000

080020fc <HAL_I2C_MspInit>:

}

/* USER CODE BEGIN 1 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_I2C_MspInit+0xa4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d13c      	bne.n	8002198 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002144:	2301      	movs	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800214c:	2304      	movs	r3, #4
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <HAL_I2C_MspInit+0xac>)
 8002158:	f001 f81a 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800215c:	2308      	movs	r3, #8
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002160:	2312      	movs	r3, #18
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002164:	2301      	movs	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800216c:	2309      	movs	r3, #9
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <HAL_I2C_MspInit+0xac>)
 8002178:	f001 f80a 	bl	8003190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40005800 	.word	0x40005800
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400

080021ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 fc04 	bl	80029bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80021b4:	f000 ffc4 	bl	8003140 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <TIM1_BRK_TIM9_IRQHandler>:

/**
* @brief This function handles TIM1 Break interrupt and TIM9 global interrupt.
*/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80021c2:	f003 ffbf 	bl	8006144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000564 	.word	0x20000564

080021d0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <TIM2_IRQHandler+0x10>)
 80021d6:	f003 ffb5 	bl	8006144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000061c 	.word	0x2000061c

080021e4 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <SPI1_IRQHandler+0x10>)
 80021ea:	f003 fd99 	bl	8005d20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200005c4 	.word	0x200005c4

080021f8 <SPI2_IRQHandler>:

/**
* @brief This function handles SPI2 global interrupt.
*/
void SPI2_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <SPI2_IRQHandler+0x10>)
 80021fe:	f003 fd8f 	bl	8005d20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000178 	.word	0x20000178

0800220c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <USART1_IRQHandler+0x10>)
 8002212:	f005 f841 	bl	8007298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200004d0 	.word	0x200004d0

08002220 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <OTG_FS_IRQHandler+0x10>)
 8002226:	f002 f8bf 	bl	80043a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200008f8 	.word	0x200008f8

08002234 <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI4_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002238:	2010      	movs	r0, #16
 800223a:	f001 f95f 	bl	80034fc <HAL_GPIO_EXTI_IRQHandler>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}

08002242 <TimerProcess>:
{
    t->event_cnt = 0;
}

void TimerProcess(tUserTimer *t)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
    uint32_t k; 
    if (t->flag && HAL_GetTick() >= t->target_tick)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <TimerProcess+0x3a>
 8002252:	f000 fbc1 	bl	80029d8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d30d      	bcc.n	800227c <TimerProcess+0x3a>
    {
        t->event_cnt++;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
        k = t->target_tick; // to prevent Warning volatile access in IAR EWARM  
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]
        t->target_tick = k + t->interval;  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	441a      	add	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	601a      	str	r2, [r3, #0]

    }
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <User_Timer_Callback>:
{
    return t->event_cnt;
}

void User_Timer_Callback(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
    TimerProcess(&tim);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <User_Timer_Callback+0x10>)
 800228a:	f7ff ffda 	bl	8002242 <TimerProcess>
    // Add additional timer processing if more user timers
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200008e4 	.word	0x200008e4

08002298 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f006 fcaf 	bl	8008c12 <USBD_LL_SetupStage>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f006 fce1 	bl	8008cac <USBD_LL_DataOutStage>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3344      	adds	r3, #68	; 0x44
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	4619      	mov	r1, r3
 800231a:	f006 fd22 	bl	8008d62 <USBD_LL_DataInStage>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002334:	4618      	mov	r0, r3
 8002336:	f006 fe08 	bl	8008f4a <USBD_LL_SOF>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_PCD_ResetCallback+0x1a>
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_PCD_ResetCallback+0x20>
 800235a:	e005      	b.n	8002368 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
    break;
 8002360:	e005      	b.n	800236e <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
    break;
 8002366:	e002      	b.n	800236e <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
    break;    
 800236c:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f006 fdb0 	bl	8008ede <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002384:	4618      	mov	r0, r3
 8002386:	f006 fd7b 	bl	8008e80 <USBD_LL_Reset>
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 fdab 	bl	8008efe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6013      	str	r3, [r2, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_PCD_SuspendCallback+0x48>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_PCD_SuspendCallback+0x48>)
 80023ce:	f043 0306 	orr.w	r3, r3, #6
 80023d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80023ee:	4618      	mov	r0, r3
 80023f0:	f006 fd9a 	bl	8008f28 <USBD_LL_Resume>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f006 fdc0 	bl	8008f98 <USBD_LL_IsoOUTIncomplete>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f006 fda1 	bl	8008f7e <USBD_LL_IsoINIncomplete>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8002452:	4618      	mov	r0, r3
 8002454:	f006 fdad 	bl	8008fb2 <USBD_LL_DevConnected>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800246e:	4618      	mov	r0, r3
 8002470:	f006 fdaa 	bl	8008fc8 <USBD_LL_DevDisconnected>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	70fb      	strb	r3, [r7, #3]
 800248e:	460b      	mov	r3, r1
 8002490:	70bb      	strb	r3, [r7, #2]
 8002492:	4613      	mov	r3, r2
 8002494:	803b      	strh	r3, [r7, #0]

  HAL_PCD_EP_Open(pdev->pData, 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	883a      	ldrh	r2, [r7, #0]
 80024a0:	78f9      	ldrb	r1, [r7, #3]
 80024a2:	f002 fc20 	bl	8004ce6 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fd26 	bl	8004f18 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fd6e 	bl	8004fce <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800250e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8002510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002514:	2b00      	cmp	r3, #0
 8002516:	da0b      	bge.n	8002530 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	333a      	adds	r3, #58	; 0x3a
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	e00b      	b.n	8002548 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8002546:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fb9a 	bl	8004ca4 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	461a      	mov	r2, r3
 8002586:	460b      	mov	r3, r1
 8002588:	72fb      	strb	r3, [r7, #11]
 800258a:	4613      	mov	r3, r2
 800258c:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	7af9      	ldrb	r1, [r7, #11]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	f002 fc65 	bl	8004e68 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	460b      	mov	r3, r1
 80025b6:	72fb      	strb	r3, [r7, #11]
 80025b8:	4613      	mov	r3, r2
 80025ba:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80025c2:	893b      	ldrh	r3, [r7, #8]
 80025c4:	7af9      	ldrb	r1, [r7, #11]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	f002 fbf5 	bl	8004db6 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
  ldr  r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002602:	f000 f8bf 	bl	8002784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f007 f967 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7fe fa3d 	bl	8000a88 <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002614:	0800a610 	.word	0x0800a610
  ldr  r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800261c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002620:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002624:	20000d64 	.word	0x20000d64

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>

0800262a <BSP_ACCELERO_Get_Axes>:
 * @param acceleration pointer where the values of the axes are written [mg]
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_ACCELERO_Get_Axes( void *handle, SensorAxes_t *acceleration )
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60fb      	str	r3, [r7, #12]
  ACCELERO_Drv_t *driver = NULL;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]

  if(ctx == NULL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <BSP_ACCELERO_Get_Axes+0x1c>
  {
    return COMPONENT_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e018      	b.n	8002678 <BSP_ACCELERO_Get_Axes+0x4e>
  }

  driver = ( ACCELERO_Drv_t * )ctx->pVTable;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	60bb      	str	r3, [r7, #8]

  if(acceleration == NULL)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <BSP_ACCELERO_Get_Axes+0x2c>
  {
    return COMPONENT_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e010      	b.n	8002678 <BSP_ACCELERO_Get_Axes+0x4e>
  }

  if ( driver->Get_Axes == NULL )
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <BSP_ACCELERO_Get_Axes+0x38>
  {
    return COMPONENT_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00a      	b.n	8002678 <BSP_ACCELERO_Get_Axes+0x4e>
  }

  if ( driver->Get_Axes( ctx, acceleration ) == COMPONENT_ERROR )
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	4798      	blx	r3
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <BSP_ACCELERO_Get_Axes+0x4c>
  {
    return COMPONENT_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <BSP_ACCELERO_Get_Axes+0x4e>
  }

  return COMPONENT_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <BSP_GYRO_Get_Axes>:
 * @param angular_velocity pointer where the values of the axes are written [mdps]
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_GYRO_Get_Axes( void *handle, SensorAxes_t *angular_velocity )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]
  GYRO_Drv_t *driver = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]

  if(ctx == NULL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <BSP_GYRO_Get_Axes+0x1c>
  {
    return COMPONENT_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e018      	b.n	80026ce <BSP_GYRO_Get_Axes+0x4e>
  }

  driver = ( GYRO_Drv_t * )ctx->pVTable;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]

  if ( angular_velocity == NULL )
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <BSP_GYRO_Get_Axes+0x2c>
  {
    return COMPONENT_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e010      	b.n	80026ce <BSP_GYRO_Get_Axes+0x4e>
  }
  if ( driver->Get_Axes == NULL )
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <BSP_GYRO_Get_Axes+0x38>
  {
    return COMPONENT_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e00a      	b.n	80026ce <BSP_GYRO_Get_Axes+0x4e>
  }
  if ( driver->Get_Axes( ctx, angular_velocity ) == COMPONENT_ERROR )
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	4798      	blx	r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <BSP_GYRO_Get_Axes+0x4c>
  {
    return COMPONENT_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <BSP_GYRO_Get_Axes+0x4e>
  }

  return COMPONENT_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <BSP_MAGNETO_Get_Axes>:
 * @param magnetic_field pointer where the values of the axes are written [mgauss]
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_MAGNETO_Get_Axes( void *handle, SensorAxes_t *magnetic_field )
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60fb      	str	r3, [r7, #12]
  MAGNETO_Drv_t *driver = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]

  if(ctx == NULL)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <BSP_MAGNETO_Get_Axes+0x1c>
  {
    return COMPONENT_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e018      	b.n	8002724 <BSP_MAGNETO_Get_Axes+0x4e>
  }

  driver = ( MAGNETO_Drv_t * )ctx->pVTable;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	60bb      	str	r3, [r7, #8]

  if ( magnetic_field == NULL )
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <BSP_MAGNETO_Get_Axes+0x2c>
  {
    return COMPONENT_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e010      	b.n	8002724 <BSP_MAGNETO_Get_Axes+0x4e>
  }
  if ( driver->Get_Axes == NULL )
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <BSP_MAGNETO_Get_Axes+0x38>
  {
    return COMPONENT_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00a      	b.n	8002724 <BSP_MAGNETO_Get_Axes+0x4e>
  }
  if ( driver->Get_Axes( ctx, magnetic_field ) == COMPONENT_ERROR )
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	4798      	blx	r3
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <BSP_MAGNETO_Get_Axes+0x4c>
  {
    return COMPONENT_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <BSP_MAGNETO_Get_Axes+0x4e>
  }

  return COMPONENT_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <BSP_PRESSURE_Get_Press>:
 * @param pressure pointer where the value is written [hPa]
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_PRESSURE_Get_Press( void *handle, float *pressure )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]
  PRESSURE_Drv_t *driver = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]

  if(ctx == NULL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <BSP_PRESSURE_Get_Press+0x1c>
  {
    return COMPONENT_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e018      	b.n	800277a <BSP_PRESSURE_Get_Press+0x4e>
  }

  driver = ( PRESSURE_Drv_t * )ctx->pVTable;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]

  if ( pressure == NULL )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <BSP_PRESSURE_Get_Press+0x2c>
  {
    return COMPONENT_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e010      	b.n	800277a <BSP_PRESSURE_Get_Press+0x4e>
  }
  if ( driver->Get_Press == NULL )
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <BSP_PRESSURE_Get_Press+0x38>
  {
    return COMPONENT_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00a      	b.n	800277a <BSP_PRESSURE_Get_Press+0x4e>
  }
  if ( driver->Get_Press( ctx, pressure ) == COMPONENT_ERROR )
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	4798      	blx	r3
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <BSP_PRESSURE_Get_Press+0x4c>
  {
    return COMPONENT_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <BSP_PRESSURE_Get_Press+0x4e>
  }

  return COMPONENT_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <SystemInit+0x60>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <SystemInit+0x60>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <SystemInit+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <SystemInit+0x64>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <SystemInit+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <SystemInit+0x64>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <SystemInit+0x64>)
 80027b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <SystemInit+0x64>)
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <SystemInit+0x68>)
 80027be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <SystemInit+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <SystemInit+0x64>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SystemInit+0x60>)
 80027d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d8:	609a      	str	r2, [r3, #8]
#endif
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	24003010 	.word	0x24003010

080027f0 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d105      	bne.n	800280c <HAL_GPIO_EXTI_Callback+0x1c>
    case BNRG_SPI_EXTI_PIN:
      HCI_Isr();
 8002800:	f006 f8c4 	bl	800898c <HCI_Isr>
      HCI_ProcessEvent=1;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GPIO_EXTI_Callback+0x24>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    break;
 800280a:	bf00      	nop
  }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200000b8 	.word	0x200000b8

08002818 <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 800281c:	2110      	movs	r1, #16
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <BlueNRG_DataPresent+0x1c>)
 8002820:	f000 fe3a 	bl	8003498 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <BlueNRG_DataPresent+0x16>
    return 1;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 800282e:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020000 	.word	0x40020000

08002838 <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(SPI_HandleTypeDef *hspi, uint8_t *buffer,
                             uint8_t buff_size)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	71fb      	strb	r3, [r7, #7]
  uint16_t byte_count;
  uint8_t len = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t char_ff = 0xff;
 800284c:	23ff      	movs	r3, #255	; 0xff
 800284e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002852:	4a33      	ldr	r2, [pc, #204]	; (8002920 <BlueNRG_SPI_Read_All+0xe8>)
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800285c:	6018      	str	r0, [r3, #0]
 800285e:	3304      	adds	r3, #4
 8002860:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	482f      	ldr	r0, [pc, #188]	; (8002924 <BlueNRG_SPI_Read_All+0xec>)
 8002868:	f000 fe2e 	bl	80034c8 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 800286c:	f107 0214 	add.w	r2, r7, #20
 8002870:	f107 011c 	add.w	r1, r7, #28
 8002874:	230f      	movs	r3, #15
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2305      	movs	r3, #5
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f003 f8b0 	bl	80059e0 <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 8002880:	7d3b      	ldrb	r3, [r7, #20]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d136      	bne.n	80028f4 <BlueNRG_SPI_Read_All+0xbc>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 8002886:	7e3b      	ldrb	r3, [r7, #24]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	b21a      	sxth	r2, r3
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	b21b      	sxth	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b21b      	sxth	r3, r3
 8002894:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (byte_count > 0) {
 8002896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <BlueNRG_SPI_Read_All+0xbc>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d901      	bls.n	80028aa <BlueNRG_SPI_Read_All+0x72>
        byte_count = buff_size;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
      
      for (len = 0; len < byte_count; len++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80028b0:	e01a      	b.n	80028e8 <BlueNRG_SPI_Read_All+0xb0>
  __ASM volatile ("cpsid i" : : : "memory");
 80028b2:	b672      	cpsid	i
}
 80028b4:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 80028b6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80028ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80028be:	230f      	movs	r3, #15
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2301      	movs	r3, #1
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f003 f88b 	bl	80059e0 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80028ca:	b662      	cpsie	i
}
 80028cc:	bf00      	nop
        __enable_irq();
        buffer[len] = read_char;
 80028ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	4413      	add	r3, r2
 80028d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 80028de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028e2:	3301      	adds	r3, #1
 80028e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80028e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8de      	bhi.n	80028b2 <BlueNRG_SPI_Read_All+0x7a>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	2101      	movs	r1, #1
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <BlueNRG_SPI_Read_All+0xec>)
 80028fa:	f000 fde5 	bl	80034c8 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e004      	b.n	800290e <BlueNRG_SPI_Read_All+0xd6>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002904:	bf00      	nop
}
 8002906:	bf00      	nop
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3301      	adds	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b01      	cmp	r3, #1
 8002912:	ddf7      	ble.n	8002904 <BlueNRG_SPI_Read_All+0xcc>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 8002914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0800a5ac 	.word	0x0800a5ac
 8002924:	40020400 	.word	0x40020400

08002928 <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <Clear_SPI_EXTI_Flag+0x14>)
 800292e:	2210      	movs	r2, #16
 8002930:	615a      	str	r2, [r3, #20]
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_Init+0x40>)
 800294a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_Init+0x40>)
 8002956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_Init+0x40>)
 8002962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002968:	2003      	movs	r0, #3
 800296a:	f000 fb8b 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296e:	200f      	movs	r0, #15
 8002970:	f000 f808 	bl	8002984 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002974:	f7ff facf 	bl	8001f16 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00

08002984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_InitTick+0x30>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_InitTick+0x34>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fba8 	bl	80030ee <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800299e:	2200      	movs	r2, #0
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a6:	f000 fb78 	bl	800309a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000014 	.word	0x20000014
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick++;
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_IncTick+0x18>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <HAL_IncTick+0x18>)
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	20000d40 	.word	0x20000d40

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000d40 	.word	0x20000d40

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80029fc:	f7ff ffec 	bl	80029d8 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002a02:	bf00      	nop
 8002a04:	f7ff ffe8 	bl	80029d8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3f7      	bcc.n	8002a04 <HAL_Delay+0x14>
  {
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e033      	b.n	8002a9c <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fa70 	bl	8001f30 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d118      	bne.n	8002a8e <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a64:	f023 0302 	bic.w	r3, r3, #2
 8002a68:	f043 0202 	orr.w	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f937 	bl	8002ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f023 0303 	bic.w	r3, r3, #3
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8c:	e001      	b.n	8002a92 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e103      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x224>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d925      	bls.n	8002b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43da      	mvns	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	400a      	ands	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68d9      	ldr	r1, [r3, #12]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4403      	add	r3, r0
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	409a      	lsls	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e022      	b.n	8002b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	2207      	movs	r2, #7
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4403      	add	r3, r0
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d824      	bhi.n	8002bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b05      	subs	r3, #5
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b05      	subs	r3, #5
 8002ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb2:	e04c      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d824      	bhi.n	8002c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b23      	subs	r3, #35	; 0x23
 8002bce:	221f      	movs	r2, #31
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	400a      	ands	r2, r1
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b23      	subs	r3, #35	; 0x23
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
 8002c04:	e023      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b41      	subs	r3, #65	; 0x41
 8002c18:	221f      	movs	r2, #31
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	400a      	ands	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b41      	subs	r3, #65	; 0x41
 8002c42:	fa00 f203 	lsl.w	r2, r0, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <HAL_ADC_ConfigChannel+0x230>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1c8>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b12      	cmp	r3, #18
 8002c5e:	d105      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_ADC_ConfigChannel+0x234>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_ADC_ConfigChannel+0x234>)
 8002c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_ADC_ConfigChannel+0x230>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d123      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d003      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x1e2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b11      	cmp	r3, #17
 8002c84:	d11b      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_ADC_ConfigChannel+0x234>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_ADC_ConfigChannel+0x234>)
 8002c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c90:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_ADC_ConfigChannel+0x238>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <HAL_ADC_ConfigChannel+0x23c>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9a      	lsrs	r2, r3, #18
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	40012300 	.word	0x40012300
 8002cdc:	20000014 	.word	0x20000014
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cec:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <ADC_Init+0x200>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a7c      	ldr	r2, [pc, #496]	; (8002ee4 <ADC_Init+0x200>)
 8002cf2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cf6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cf8:	4b7a      	ldr	r3, [pc, #488]	; (8002ee4 <ADC_Init+0x200>)
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4978      	ldr	r1, [pc, #480]	; (8002ee4 <ADC_Init+0x200>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <ADC_Init+0x204>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e00f      	b.n	8002dde <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0202 	bic.w	r2, r2, #2
 8002dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d026      	beq.n	8002e58 <ADC_Init+0x174>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e18:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e28:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	1e5a      	subs	r2, r3, #1
 8002e30:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e34:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	fa02 f103 	lsl.w	r1, r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e007      	b.n	8002e68 <ADC_Init+0x184>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	051a      	lsls	r2, r3, #20
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	025a      	lsls	r2, r3, #9
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6899      	ldr	r1, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	029a      	lsls	r2, r3, #10
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	0f000001 	.word	0x0f000001

08002eec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <NVIC_EnableIRQ+0x30>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0b      	bge.n	8002fb0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <NVIC_SetPriority+0x4c>)
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	3b04      	subs	r3, #4
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fae:	e009      	b.n	8002fc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <NVIC_SetPriority+0x50>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff2d 	bl	8002eec <NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff42 	bl	8002f34 <NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff35 	bl	8002f50 <NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d106      	bne.n	8003124 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003122:	e005      	b.n	8003130 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003144:	f7fe fe1a 	bl	8001d7c <HAL_SYSTICK_Callback>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d004      	beq.n	800316a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e00c      	b.n	8003184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2205      	movs	r2, #5
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e159      	b.n	8003460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f040 8148 	bne.w	800345a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x4a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b12      	cmp	r3, #18
 80031d8:	d123      	bne.n	8003222 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2203      	movs	r2, #3
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00b      	beq.n	8003276 <HAL_GPIO_Init+0xe6>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d007      	beq.n	8003276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800326a:	2b11      	cmp	r3, #17
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b12      	cmp	r3, #18
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a2 	beq.w	800345a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_GPIO_Init+0x2e8>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a56      	ldr	r2, [pc, #344]	; (8003478 <HAL_GPIO_Init+0x2e8>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b54      	ldr	r3, [pc, #336]	; (8003478 <HAL_GPIO_Init+0x2e8>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003332:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_GPIO_Init+0x2ec>)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a49      	ldr	r2, [pc, #292]	; (8003480 <HAL_GPIO_Init+0x2f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x202>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a48      	ldr	r2, [pc, #288]	; (8003484 <HAL_GPIO_Init+0x2f4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x1fe>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_GPIO_Init+0x2f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x1fa>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a46      	ldr	r2, [pc, #280]	; (800348c <HAL_GPIO_Init+0x2fc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x1f6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a45      	ldr	r2, [pc, #276]	; (8003490 <HAL_GPIO_Init+0x300>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x1f2>
 800337e:	2304      	movs	r3, #4
 8003380:	e008      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003382:	2307      	movs	r3, #7
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003386:	2303      	movs	r3, #3
 8003388:	e004      	b.n	8003394 <HAL_GPIO_Init+0x204>
 800338a:	2302      	movs	r3, #2
 800338c:	e002      	b.n	8003394 <HAL_GPIO_Init+0x204>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003392:	2300      	movs	r3, #0
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f002 0203 	and.w	r2, r2, #3
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	4093      	lsls	r3, r2
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a4:	4935      	ldr	r1, [pc, #212]	; (800347c <HAL_GPIO_Init+0x2ec>)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b2:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_GPIO_Init+0x304>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <HAL_GPIO_Init+0x304>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_GPIO_Init+0x304>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_GPIO_Init+0x304>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <HAL_GPIO_Init+0x304>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_GPIO_Init+0x304>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_GPIO_Init+0x304>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_GPIO_Init+0x304>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f67f aea2 	bls.w	80031ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e001      	b.n	80034ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034e4:	e003      	b.n	80034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	041a      	lsls	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f968 	bl	80027f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0c9      	b.n	80036da <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fdce 	bl	80020fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003578:	f002 f9ee 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 800357c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_I2C_Init+0x1b8>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_I2C_Init+0x1bc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d802      	bhi.n	80035a2 <HAL_I2C_Init+0x76>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	e009      	b.n	80035b6 <HAL_I2C_Init+0x8a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_I2C_Init+0x1c0>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	3301      	adds	r3, #1
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a49      	ldr	r2, [pc, #292]	; (80036e8 <HAL_I2C_Init+0x1bc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d813      	bhi.n	80035ee <HAL_I2C_Init+0xc2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_I2C_Init+0xbe>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	e045      	b.n	8003676 <HAL_I2C_Init+0x14a>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e043      	b.n	8003676 <HAL_I2C_Init+0x14a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_I2C_Init+0xea>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e010      	b.n	8003638 <HAL_I2C_Init+0x10c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009a      	lsls	r2, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Init+0x114>
 800363c:	2301      	movs	r3, #1
 800363e:	e01a      	b.n	8003676 <HAL_I2C_Init+0x14a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_I2C_Init+0x132>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365c:	e00b      	b.n	8003676 <HAL_I2C_Init+0x14a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009a      	lsls	r2, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69d9      	ldr	r1, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6919      	ldr	r1, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	000186a0 	.word	0x000186a0
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370e:	f7ff f963 	bl	80029d8 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80e7 	bne.w	80038f0 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2319      	movs	r3, #25
 8003728:	2201      	movs	r2, #1
 800372a:	4974      	ldr	r1, [pc, #464]	; (80038fc <HAL_I2C_Mem_Write+0x20c>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fc8f 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	e0da      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Write+0x5a>
 8003746:	2302      	movs	r3, #2
 8003748:	e0d3      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	; 0x21
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_I2C_Mem_Write+0x210>)
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b2:	88f8      	ldrh	r0, [r7, #6]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 face 	bl	8003d64 <I2C_RequestMemoryWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d05e      	beq.n	800388c <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d105      	bne.n	80037e2 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e087      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e081      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fceb 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003814:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06b      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e069      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6251      	str	r1, [r2, #36]	; 0x24
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d119      	bne.n	800388c <HAL_I2C_Mem_Write+0x19c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c59      	adds	r1, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6251      	str	r1, [r2, #36]	; 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ac      	bne.n	80037ee <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fcd5 	bl	8004248 <I2C_WaitOnBTFFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00f      	beq.n	80038c4 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d109      	bne.n	80038c0 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e018      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e016      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000

08003904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	817b      	strh	r3, [r7, #10]
 8003916:	460b      	mov	r3, r1
 8003918:	813b      	strh	r3, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003922:	f7ff f859 	bl	80029d8 <HAL_GetTick>
 8003926:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	f040 8210 	bne.w	8003d56 <HAL_I2C_Mem_Read+0x452>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2319      	movs	r3, #25
 800393c:	2201      	movs	r2, #1
 800393e:	4983      	ldr	r1, [pc, #524]	; (8003b4c <HAL_I2C_Mem_Read+0x248>)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fb85 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	e203      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_I2C_Mem_Read+0x5a>
 800395a:	2302      	movs	r3, #2
 800395c:	e1fc      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d007      	beq.n	8003984 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2222      	movs	r2, #34	; 0x22
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_I2C_Mem_Read+0x24c>)
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c6:	88f8      	ldrh	r0, [r7, #6]
 80039c8:	893a      	ldrh	r2, [r7, #8]
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	4603      	mov	r3, r0
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fa58 	bl	8003e8c <I2C_RequestMemoryRead>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <HAL_I2C_Mem_Read+0xfe>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d105      	bne.n	80039f6 <HAL_I2C_Mem_Read+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1b0      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1aa      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
      }
    }

    if(hi2c->XferSize == 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x12e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e17e      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
    }
    else if(hi2c->XferSize == 1U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d11b      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e15e      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
    }
    else if(hi2c->XferSize == 2U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d11b      	bne.n	8003ab2 <HAL_I2C_Mem_Read+0x1ae>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	e13e      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003ac8:	e132      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
    {
      if(hi2c->XferSize <= 3U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	f200 80e9 	bhi.w	8003ca6 <HAL_I2C_Mem_Read+0x3a2>
      {
        /* One byte */
        if(hi2c->XferSize== 1U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d127      	bne.n	8003b2c <HAL_I2C_Mem_Read+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fbee 	bl	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_I2C_Mem_Read+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d101      	bne.n	8003af8 <HAL_I2C_Mem_Read+0x1f4>
            {
              return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e12f      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
            }
            else
            {
              return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e12d      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6918      	ldr	r0, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6251      	str	r1, [r2, #36]	; 0x24
 8003b0c:	b2c2      	uxtb	r2, r0
 8003b0e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b2a:	e101      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
        }
        /* Two bytes */
        else if(Size == 2U)
 8003b2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d149      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4906      	ldr	r1, [pc, #24]	; (8003b54 <HAL_I2C_Mem_Read+0x250>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fa87 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x254>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e105      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
 8003b4c:	00100002 	.word	0x00100002
 8003b50:	ffff0000 	.word	0xffff0000
 8003b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6918      	ldr	r0, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	6251      	str	r1, [r2, #36]	; 0x24
 8003b78:	b2c2      	uxtb	r2, r0
 8003b7a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6918      	ldr	r0, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ba6:	b2c2      	uxtb	r2, r0
 8003ba8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bc4:	e0b4      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4964      	ldr	r1, [pc, #400]	; (8003d60 <HAL_I2C_Mem_Read+0x45c>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fa3d 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0bb      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6918      	ldr	r0, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	6251      	str	r1, [r2, #36]	; 0x24
 8003c00:	b2c2      	uxtb	r2, r0
 8003c02:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2200      	movs	r2, #0
 8003c26:	494e      	ldr	r1, [pc, #312]	; (8003d60 <HAL_I2C_Mem_Read+0x45c>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa11 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e08f      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6918      	ldr	r0, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6251      	str	r1, [r2, #36]	; 0x24
 8003c58:	b2c2      	uxtb	r2, r0
 8003c5a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6918      	ldr	r0, [r3, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c59      	adds	r1, r3, #1
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6251      	str	r1, [r2, #36]	; 0x24
 8003c86:	b2c2      	uxtb	r2, r0
 8003c88:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca4:	e044      	b.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb09 	bl	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_I2C_Mem_Read+0x3c2>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x3be>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04a      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
          }
          else
          {
            return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e048      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6918      	ldr	r0, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	6251      	str	r1, [r2, #36]	; 0x24
 8003cd6:	b2c2      	uxtb	r2, r0
 8003cd8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d116      	bne.n	8003d30 <HAL_I2C_Mem_Read+0x42c>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6918      	ldr	r0, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c59      	adds	r1, r3, #1
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	6251      	str	r1, [r2, #36]	; 0x24
 8003d12:	b2c2      	uxtb	r2, r0
 8003d14:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f aec8 	bne.w	8003aca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_I2C_Mem_Read+0x454>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	00010004 	.word	0x00010004

08003d64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	460b      	mov	r3, r1
 8003d78:	813b      	strh	r3, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f958 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e069      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	4932      	ldr	r1, [pc, #200]	; (8003e88 <I2C_RequestMemoryWrite+0x124>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f996 	bl	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d101      	bne.n	8003dd8 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e052      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e050      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f9e9 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00f      	beq.n	8003e22 <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d109      	bne.n	8003e1e <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02f      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e02d      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e28:	893b      	ldrh	r3, [r7, #8]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e023      	b.n	8003e7c <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f9c1 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d109      	bne.n	8003e6e <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e005      	b.n	8003e7e <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e72:	893b      	ldrh	r3, [r7, #8]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	00010002 	.word	0x00010002

08003e8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f8bc 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0b0      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	4955      	ldr	r1, [pc, #340]	; (800404c <I2C_RequestMemoryRead+0x1c0>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8fa 	bl	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <I2C_RequestMemoryRead+0x88>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d101      	bne.n	8003f10 <I2C_RequestMemoryRead+0x84>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e099      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e097      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f94d 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00f      	beq.n	8003f5a <I2C_RequestMemoryRead+0xce>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d109      	bne.n	8003f56 <I2C_RequestMemoryRead+0xca>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e076      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e074      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <I2C_RequestMemoryRead+0xe0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]
 8003f6a:	e023      	b.n	8003fb4 <I2C_RequestMemoryRead+0x128>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f6c:	893b      	ldrh	r3, [r7, #8]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f925 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <I2C_RequestMemoryRead+0x11e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d109      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x11a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa0:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e04e      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e04c      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f908 	bl	80041ce <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00f      	beq.n	8003fe4 <I2C_RequestMemoryRead+0x158>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d109      	bne.n	8003fe0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e031      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e02f      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  /* Generate Restart */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f825 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <I2C_RequestMemoryRead+0x184>
  {
    return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e019      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004010:	897b      	ldrh	r3, [r7, #10]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	4909      	ldr	r1, [pc, #36]	; (800404c <I2C_RequestMemoryRead+0x1c0>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f863 	bl	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <I2C_RequestMemoryRead+0x1b6>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b04      	cmp	r3, #4
 8004038:	d101      	bne.n	800403e <I2C_RequestMemoryRead+0x1b2>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e002      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
    else
    {
      return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e000      	b.n	8004044 <I2C_RequestMemoryRead+0x1b8>
    }
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	00010002 	.word	0x00010002

08004050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004060:	e01f      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004068:	d01b      	beq.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004070:	f7fe fcb2 	bl	80029d8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d210      	bcs.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e023      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10d      	bne.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x78>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	e00c      	b.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x92>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d0bc      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004100:	e040      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d11c      	bne.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800412a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2204      	movs	r2, #4
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e03c      	b.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004152:	d017      	beq.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800415a:	f7fe fc3d 	bl	80029d8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	429a      	cmp	r2, r3
 8004168:	d20c      	bcs.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e020      	b.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10c      	bne.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e00b      	b.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d19e      	bne.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041da:	e029      	b.n	8004230 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f8ba 	bl	8004356 <I2C_IsAcknowledgeFailed>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e029      	b.n	8004240 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f2:	d01d      	beq.n	8004230 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041fa:	f7fe fbed 	bl	80029d8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d212      	bcs.n	8004230 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e007      	b.n	8004240 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d1ce      	bne.n	80041dc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004254:	e029      	b.n	80042aa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f87d 	bl	8004356 <I2C_IsAcknowledgeFailed>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e029      	b.n	80042ba <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426c:	d01d      	beq.n	80042aa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004274:	f7fe fbb0 	bl	80029d8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d212      	bcs.n	80042aa <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e007      	b.n	80042ba <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d1ce      	bne.n	8004256 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ce:	e036      	b.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d114      	bne.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0210 	mvn.w	r2, #16
 80042e6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e022      	b.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800430e:	f7fe fb63 	bl	80029d8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	d20f      	bcs.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e007      	b.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d1c1      	bne.n	80042d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436c:	d114      	bne.n	8004398 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2204      	movs	r2, #4
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ba:	2300      	movs	r3, #0
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000;
 80043ce:	4b7c      	ldr	r3, [pc, #496]	; (80045c0 <HAL_PCD_IRQHandler+0x218>)
 80043d0:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fa35 	bl	8008846 <USB_GetMode>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 845c 	bne.w	8004c9c <HAL_PCD_IRQHandler+0x8f4>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 f9a1 	bl	8008730 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8452 	beq.w	8004c9a <HAL_PCD_IRQHandler+0x8f2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 f998 	bl	8008730 <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d107      	bne.n	800441a <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f002 0202 	and.w	r2, r2, #2
 8004418:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f004 f986 	bl	8008730 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800442e:	f040 80b2 	bne.w	8004596 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f98d 	bl	800875a <USB_ReadDevAllOutEpInterrupt>
 8004440:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8004442:	e0a4      	b.n	800458e <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8099 	beq.w	8004582 <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f004 f9ad 	bl	80087ba <USB_ReadDevOutEPInterrupt>
 8004460:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d06b      	beq.n	8004544 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	2301      	movs	r3, #1
 800447c:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d13c      	bne.n	8004500 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	1ad1      	subs	r1, r2, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4403      	add	r3, r0
 80044bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044c0:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4403      	add	r3, r0
 80044e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4419      	add	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4403      	add	r3, r0
 80044fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044fe:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fed8 	bl	80022bc <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d117      	bne.n	8004544 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	2b00      	cmp	r3, #0
 8004518:	d114      	bne.n	8004544 <HAL_PCD_IRQHandler+0x19c>
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800453c:	461a      	mov	r2, r3
 800453e:	2101      	movs	r1, #1
 8004540:	f004 f9c2 	bl	80088c8 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fea2 	bl	8002298 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	2308      	movs	r3, #8
 8004564:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	461a      	mov	r2, r3
 800457e:	2310      	movs	r3, #16
 8004580:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	3301      	adds	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af57 	bne.w	8004444 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 f8c8 	bl	8008730 <USB_ReadInterrupts>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045aa:	f040 80c4 	bne.w	8004736 <HAL_PCD_IRQHandler+0x38e>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 f8e9 	bl	800878a <USB_ReadDevAllInEpInterrupt>
 80045b8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 80045be:	e0b6      	b.n	800472e <HAL_PCD_IRQHandler+0x386>
 80045c0:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a9 	beq.w	8004722 <HAL_PCD_IRQHandler+0x37a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f004 f909 	bl	80087f2 <USB_ReadDevInEPInterrupt>
 80045e0:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d059      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x2f8>
          {
            fifoemptymsk = 0x1U << epnum;
 80045ec:	2201      	movs	r2, #1
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	43db      	mvns	r3, r3
 8004602:	6a39      	ldr	r1, [r7, #32]
 8004604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004608:	4013      	ands	r3, r2
 800460a:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	461a      	mov	r2, r3
 800461a:	2301      	movs	r3, #1
 800461c:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d11b      	bne.n	800465e <HAL_PCD_IRQHandler+0x2b6>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3344      	adds	r3, #68	; 0x44
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4403      	add	r3, r0
 8004646:	3340      	adds	r3, #64	; 0x40
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4419      	add	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4403      	add	r3, r0
 800465a:	3344      	adds	r3, #68	; 0x44
 800465c:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fd fe44 	bl	80022f2 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d116      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x2f8>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x2f8>
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	334c      	adds	r3, #76	; 0x4c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x2f8>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004698:	461a      	mov	r2, r3
 800469a:	2101      	movs	r1, #1
 800469c:	f004 f914 	bl	80088c8 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_PCD_IRQHandler+0x314>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	461a      	mov	r2, r3
 80046b8:	2308      	movs	r3, #8
 80046ba:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_PCD_IRQHandler+0x330>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d2:	461a      	mov	r2, r3
 80046d4:	2310      	movs	r3, #16
 80046d6:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_PCD_IRQHandler+0x34c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ee:	461a      	mov	r2, r3
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_PCD_IRQHandler+0x368>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	461a      	mov	r2, r3
 800470c:	2302      	movs	r3, #2
 800470e:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_PCD_IRQHandler+0x37a>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800471a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fca1 	bl	8005064 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f af47 	bne.w	80045c4 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f003 fff8 	bl	8008730 <USB_ReadInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474a:	d114      	bne.n	8004776 <HAL_PCD_IRQHandler+0x3ce>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fd fe3d 	bl	80023e0 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004774:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f003 ffd8 	bl	8008730 <USB_ReadInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478a:	d112      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x40a>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x3fa>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fd fdf9 	bl	8002394 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047b0:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 ffba 	bl	8008730 <USB_ReadInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	f040 808a 	bne.w	80048de <HAL_PCD_IRQHandler+0x536>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 f9ef 	bl	8007bc8 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ee:	e014      	b.n	800481a <HAL_PCD_IRQHandler+0x472>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	461a      	mov	r2, r3
 80047fe:	23ff      	movs	r3, #255	; 0xff
 8004800:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	23ff      	movs	r3, #255	; 0xff
 8004812:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	3301      	adds	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	d3e5      	bcc.n	80047f0 <HAL_PCD_IRQHandler+0x448>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	461a      	mov	r2, r3
 800482c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004830:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004844:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_PCD_IRQHandler+0x4d4>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485e:	f043 030b 	orr.w	r3, r3, #11
 8004862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004874:	f043 030b 	orr.w	r3, r3, #11
 8004878:	6453      	str	r3, [r2, #68]	; 0x44
 800487a:	e013      	b.n	80048a4 <HAL_PCD_IRQHandler+0x4fc>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488a:	f043 030b 	orr.w	r3, r3, #11
 800488e:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489e:	f043 030b 	orr.w	r3, r3, #11
 80048a2:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048b6:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	b2d9      	uxtb	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80048c8:	461a      	mov	r2, r3
 80048ca:	f003 fffd 	bl	80088c8 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048dc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f003 ff24 	bl	8008730 <USB_ReadInterrupts>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f2:	f040 80d7 	bne.w	8004aa4 <HAL_PCD_IRQHandler+0x6fc>
    {
      USB_ActivateSetup(hpcd->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 ffb1 	bl	8008862 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800490e:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f003 f97d 	bl	8007c14 <USB_GetDevSpeed>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10f      	bne.n	8004940 <HAL_PCD_IRQHandler+0x598>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492c:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e0a6      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2203      	movs	r2, #3
 8004944:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	615a      	str	r2, [r3, #20]
        /* The USBTRD is configured according to the tables below, depending on AHB frequency 
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        if((hclk >= 14200000)&&(hclk < 15000000))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4a7b      	ldr	r2, [pc, #492]	; (8004b3c <HAL_PCD_IRQHandler+0x794>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d90c      	bls.n	800496e <HAL_PCD_IRQHandler+0x5c6>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4a7a      	ldr	r2, [pc, #488]	; (8004b40 <HAL_PCD_IRQHandler+0x798>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d208      	bcs.n	800496e <HAL_PCD_IRQHandler+0x5c6>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e08f      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 15000000)&&(hclk < 16000000))
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a73      	ldr	r2, [pc, #460]	; (8004b40 <HAL_PCD_IRQHandler+0x798>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d30c      	bcc.n	8004990 <HAL_PCD_IRQHandler+0x5e8>
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4a72      	ldr	r2, [pc, #456]	; (8004b44 <HAL_PCD_IRQHandler+0x79c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d208      	bcs.n	8004990 <HAL_PCD_IRQHandler+0x5e8>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	e07e      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 16000000)&&(hclk < 17200000))
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4a6c      	ldr	r2, [pc, #432]	; (8004b44 <HAL_PCD_IRQHandler+0x79c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d30c      	bcc.n	80049b2 <HAL_PCD_IRQHandler+0x60a>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4a6b      	ldr	r2, [pc, #428]	; (8004b48 <HAL_PCD_IRQHandler+0x7a0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d208      	bcs.n	80049b2 <HAL_PCD_IRQHandler+0x60a>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e06d      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 17200000)&&(hclk < 18500000))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4a64      	ldr	r2, [pc, #400]	; (8004b48 <HAL_PCD_IRQHandler+0x7a0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d30c      	bcc.n	80049d4 <HAL_PCD_IRQHandler+0x62c>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4a63      	ldr	r2, [pc, #396]	; (8004b4c <HAL_PCD_IRQHandler+0x7a4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d808      	bhi.n	80049d4 <HAL_PCD_IRQHandler+0x62c>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e05c      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 18500000)&&(hclk < 20000000))
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4a5d      	ldr	r2, [pc, #372]	; (8004b4c <HAL_PCD_IRQHandler+0x7a4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d90c      	bls.n	80049f6 <HAL_PCD_IRQHandler+0x64e>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4a5c      	ldr	r2, [pc, #368]	; (8004b50 <HAL_PCD_IRQHandler+0x7a8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d808      	bhi.n	80049f6 <HAL_PCD_IRQHandler+0x64e>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80049f2:	60da      	str	r2, [r3, #12]
 80049f4:	e04b      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 20000000)&&(hclk < 21800000))
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4a55      	ldr	r2, [pc, #340]	; (8004b50 <HAL_PCD_IRQHandler+0x7a8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d90c      	bls.n	8004a18 <HAL_PCD_IRQHandler+0x670>
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4a54      	ldr	r2, [pc, #336]	; (8004b54 <HAL_PCD_IRQHandler+0x7ac>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d808      	bhi.n	8004a18 <HAL_PCD_IRQHandler+0x670>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	e03a      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4a4e      	ldr	r2, [pc, #312]	; (8004b54 <HAL_PCD_IRQHandler+0x7ac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d90c      	bls.n	8004a3a <HAL_PCD_IRQHandler+0x692>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4a4d      	ldr	r2, [pc, #308]	; (8004b58 <HAL_PCD_IRQHandler+0x7b0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d208      	bcs.n	8004a3a <HAL_PCD_IRQHandler+0x692>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004a36:	60da      	str	r2, [r3, #12]
 8004a38:	e029      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 24000000)&&(hclk < 27700000))
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <HAL_PCD_IRQHandler+0x7b0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d30c      	bcc.n	8004a5c <HAL_PCD_IRQHandler+0x6b4>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4a45      	ldr	r2, [pc, #276]	; (8004b5c <HAL_PCD_IRQHandler+0x7b4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d808      	bhi.n	8004a5c <HAL_PCD_IRQHandler+0x6b4>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e018      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_PCD_IRQHandler+0x7b4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d90c      	bls.n	8004a7e <HAL_PCD_IRQHandler+0x6d6>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4a3e      	ldr	r2, [pc, #248]	; (8004b60 <HAL_PCD_IRQHandler+0x7b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d208      	bcs.n	8004a7e <HAL_PCD_IRQHandler+0x6d6>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	e007      	b.n	8004a8e <HAL_PCD_IRQHandler+0x6e6>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8004a8c:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fd fc57 	bl	8002342 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f003 fe41 	bl	8008730 <USB_ReadInterrupts>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d174      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x7fa>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0210 	bic.w	r2, r2, #16
 8004ac6:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0c5b      	lsrs	r3, r3, #17
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d138      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x7bc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d049      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x7ea>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68d9      	ldr	r1, [r3, #12]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6a38      	ldr	r0, [r7, #32]
 8004b12:	f003 fcec 	bl	80084ee <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b22:	441a      	add	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]
 8004b3a:	e02a      	b.n	8004b92 <HAL_PCD_IRQHandler+0x7ea>
 8004b3c:	00d8acbf 	.word	0x00d8acbf
 8004b40:	00e4e1c0 	.word	0x00e4e1c0
 8004b44:	00f42400 	.word	0x00f42400
 8004b48:	01067380 	.word	0x01067380
 8004b4c:	011a499f 	.word	0x011a499f
 8004b50:	01312cff 	.word	0x01312cff
 8004b54:	014ca43f 	.word	0x014ca43f
 8004b58:	016e3600 	.word	0x016e3600
 8004b5c:	01a6ab1f 	.word	0x01a6ab1f
 8004b60:	01e84800 	.word	0x01e84800
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	0c5b      	lsrs	r3, r3, #17
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d110      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x7ea>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004b76:	2208      	movs	r2, #8
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6a38      	ldr	r0, [r7, #32]
 8004b7c:	f003 fcb7 	bl	80084ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8c:	441a      	add	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0210 	orr.w	r2, r2, #16
 8004ba0:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f003 fdc2 	bl	8008730 <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d10a      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x824>
    {
      HAL_PCD_SOFCallback(hpcd);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fbb5 	bl	8002326 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f002 0208 	and.w	r2, r2, #8
 8004bca:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fdad 	bl	8008730 <USB_ReadInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d10d      	bne.n	8004bfe <HAL_PCD_IRQHandler+0x856>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd fc19 	bl	8002420 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bfc:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 fd94 	bl	8008730 <USB_ReadInterrupts>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c12:	d10d      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x888>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fd fbee 	bl	80023fc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c2e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fd7b 	bl	8008730 <USB_ReadInterrupts>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d10a      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x8b4>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fbfc 	bl	8002444 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c5a:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f003 fd65 	bl	8008730 <USB_ReadInterrupts>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d115      	bne.n	8004c9c <HAL_PCD_IRQHandler+0x8f4>
    {
      temp = hpcd->Instance->GOTGINT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_PCD_IRQHandler+0x8e0>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fbec 	bl	8002460 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	e000      	b.n	8004c9c <HAL_PCD_IRQHandler+0x8f4>
      return;
 8004c9a:	bf00      	nop
    }
  }
}
 8004c9c:	3730      	adds	r7, #48	; 0x30
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_PCD_SetAddress+0x1a>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e00f      	b.n	8004cde <HAL_PCD_SetAddress+0x3a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f003 fd0a 	bl	80086e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	70fb      	strb	r3, [r7, #3]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	803b      	strh	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8004d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da0b      	bge.n	8004d24 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3338      	adds	r3, #56	; 0x38
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e00b      	b.n	8004d3c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8004d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004d58:	883a      	ldrh	r2, [r7, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	78ba      	ldrb	r2, [r7, #2]
 8004d62:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8004d76:	78bb      	ldrb	r3, [r7, #2]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d102      	bne.n	8004d82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_EP_Open+0xaa>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e00e      	b.n	8004dae <HAL_PCD_EP_Open+0xc8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 ff6d 	bl	8007c7e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004dac:	7afb      	ldrb	r3, [r7, #11]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8004df6:	7afb      	ldrb	r3, [r7, #11]
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_PCD_EP_Receive+0x68>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e020      	b.n	8004e60 <HAL_PCD_EP_Receive+0xaa>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  if ((ep_addr & 0x7FU) == 0U)
 8004e26:	7afb      	ldrb	r3, [r7, #11]
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_PCD_EP_Receive+0x8e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6979      	ldr	r1, [r7, #20]
 8004e3e:	f003 f9d1 	bl	80081e4 <USB_EP0StartXfer>
 8004e42:	e008      	b.n	8004e56 <HAL_PCD_EP_Receive+0xa0>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	f002 ff99 	bl	8007d88 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd); 
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	460b      	mov	r3, r1
 8004e76:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004e78:	7afb      	ldrb	r3, [r7, #11]
 8004e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	3338      	adds	r3, #56	; 0x38
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d102      	bne.n	8004ec0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_PCD_EP_Transmit+0x66>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e020      	b.n	8004f10 <HAL_PCD_EP_Transmit+0xa8>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  if ((ep_addr & 0x7FU) == 0U)
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_PCD_EP_Transmit+0x8c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	f003 f979 	bl	80081e4 <USB_EP0StartXfer>
 8004ef2:	e008      	b.n	8004f06 <HAL_PCD_EP_Transmit+0x9e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	f002 ff41 	bl	8007d88 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
     
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8004f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	da0b      	bge.n	8004f44 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	3338      	adds	r3, #56	; 0x38
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e009      	b.n	8004f58 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8004f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	09db      	lsrs	r3, r3, #7
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_PCD_EP_SetStall+0x70>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e01e      	b.n	8004fc6 <HAL_PCD_EP_SetStall+0xae>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 fad0 	bl	800853c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	b2d9      	uxtb	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f003 fc86 	bl	80088c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8004fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da0b      	bge.n	8004ffa <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3338      	adds	r3, #56	; 0x38
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e009      	b.n	800500e <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8005020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	09db      	lsrs	r3, r3, #7
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PCD_EP_ClrStall+0x70>
 800503a:	2302      	movs	r3, #2
 800503c:	e00e      	b.n	800505c <HAL_PCD_EP_ClrStall+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	f003 fae2 	bl	8008616 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	3338      	adds	r3, #56	; 0x38
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d202      	bcs.n	80050aa <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3303      	adds	r3, #3
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80050b2:	e02b      	b.n	800510c <PCD_WriteEmptyTxFifo+0xa8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d202      	bcs.n	80050d0 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3303      	adds	r3, #3
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68d9      	ldr	r1, [r3, #12]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	b298      	uxth	r0, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4603      	mov	r3, r0
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f003 f9c8 	bl	8008484 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	441a      	add	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	441a      	add	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	b29b      	uxth	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	429a      	cmp	r2, r3
 8005120:	d209      	bcs.n	8005136 <PCD_WriteEmptyTxFifo+0xd2>
          ep->xfer_count < ep->xfer_len &&
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800512a:	429a      	cmp	r2, r3
 800512c:	d203      	bcs.n	8005136 <PCD_WriteEmptyTxFifo+0xd2>
            ep->xfer_len != 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1be      	bne.n	80050b4 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <PCD_WriteEmptyTxFifo+0xf8>
  {
    fifoemptymsk = 0x1U << epnum;
 800513c:	2201      	movs	r2, #1
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005158:	4013      	ands	r3, r2
 800515a:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8005170:	2300      	movs	r3, #0
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d075      	beq.n	800526c <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005180:	4ba4      	ldr	r3, [pc, #656]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	2b04      	cmp	r3, #4
 800518a:	d00c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800518c:	4ba1      	ldr	r3, [pc, #644]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005194:	2b08      	cmp	r3, #8
 8005196:	d112      	bne.n	80051be <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005198:	4b9e      	ldr	r3, [pc, #632]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a4:	d10b      	bne.n	80051be <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a6:	4b9b      	ldr	r3, [pc, #620]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d05b      	beq.n	800526a <HAL_RCC_OscConfig+0x102>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d157      	bne.n	800526a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e224      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d106      	bne.n	80051d6 <HAL_RCC_OscConfig+0x6e>
 80051c8:	4b92      	ldr	r3, [pc, #584]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a91      	ldr	r2, [pc, #580]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e01d      	b.n	8005212 <HAL_RCC_OscConfig+0xaa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051de:	d10c      	bne.n	80051fa <HAL_RCC_OscConfig+0x92>
 80051e0:	4b8c      	ldr	r3, [pc, #560]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a8b      	ldr	r2, [pc, #556]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b89      	ldr	r3, [pc, #548]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a88      	ldr	r2, [pc, #544]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e00b      	b.n	8005212 <HAL_RCC_OscConfig+0xaa>
 80051fa:	4b86      	ldr	r3, [pc, #536]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a85      	ldr	r2, [pc, #532]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4b83      	ldr	r3, [pc, #524]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a82      	ldr	r2, [pc, #520]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005210:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521a:	f7fd fbdd 	bl	80029d8 <HAL_GetTick>
 800521e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005222:	f7fd fbd9 	bl	80029d8 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b64      	cmp	r3, #100	; 0x64
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e1e9      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005234:	4b77      	ldr	r3, [pc, #476]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0xba>
 8005240:	e014      	b.n	800526c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fd fbc9 	bl	80029d8 <HAL_GetTick>
 8005246:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800524a:	f7fd fbc5 	bl	80029d8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1d5      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800525c:	4b6d      	ldr	r3, [pc, #436]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0xe2>
 8005268:	e000      	b.n	800526c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d077      	beq.n	8005368 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005278:	4b66      	ldr	r3, [pc, #408]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005284:	4b63      	ldr	r3, [pc, #396]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800528c:	2b08      	cmp	r3, #8
 800528e:	d126      	bne.n	80052de <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005290:	4b60      	ldr	r3, [pc, #384]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d120      	bne.n	80052de <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529c:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_OscConfig+0x14c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e1a9      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b4:	4b57      	ldr	r3, [pc, #348]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6919      	ldr	r1, [r3, #16]
 80052c0:	23f8      	movs	r3, #248	; 0xf8
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	fab3 f383 	clz	r3, r3
 80052d2:	fa01 f303 	lsl.w	r3, r1, r3
 80052d6:	494f      	ldr	r1, [pc, #316]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052dc:	e044      	b.n	8005368 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02a      	beq.n	800533c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e6:	4b4c      	ldr	r3, [pc, #304]	; (8005418 <HAL_RCC_OscConfig+0x2b0>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd fb74 	bl	80029d8 <HAL_GetTick>
 80052f0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f4:	f7fd fb70 	bl	80029d8 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e180      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005306:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6919      	ldr	r1, [r3, #16]
 800531e:	23f8      	movs	r3, #248	; 0xf8
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	fa93 f3a3 	rbit	r3, r3
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	fab3 f383 	clz	r3, r3
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	4937      	ldr	r1, [pc, #220]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]
 800533a:	e015      	b.n	8005368 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533c:	4b36      	ldr	r3, [pc, #216]	; (8005418 <HAL_RCC_OscConfig+0x2b0>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fd fb49 	bl	80029d8 <HAL_GetTick>
 8005346:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800534a:	f7fd fb45 	bl	80029d8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e155      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d030      	beq.n	80053d6 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d016      	beq.n	80053aa <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <HAL_RCC_OscConfig+0x2b4>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd fb29 	bl	80029d8 <HAL_GetTick>
 8005386:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800538a:	f7fd fb25 	bl	80029d8 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e135      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x222>
 80053a8:	e015      	b.n	80053d6 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053aa:	4b1c      	ldr	r3, [pc, #112]	; (800541c <HAL_RCC_OscConfig+0x2b4>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fd fb12 	bl	80029d8 <HAL_GetTick>
 80053b4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b8:	f7fd fb0e 	bl	80029d8 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e11e      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8086 	beq.w	80054f0 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	6413      	str	r3, [r2, #64]	; 0x40
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <HAL_RCC_OscConfig+0x2ac>)
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HAL_RCC_OscConfig+0x2b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a06      	ldr	r2, [pc, #24]	; (8005420 <HAL_RCC_OscConfig+0x2b8>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800540c:	f7fd fae4 	bl	80029d8 <HAL_GetTick>
 8005410:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005412:	e010      	b.n	8005436 <HAL_RCC_OscConfig+0x2ce>
 8005414:	40023800 	.word	0x40023800
 8005418:	42470000 	.word	0x42470000
 800541c:	42470e80 	.word	0x42470e80
 8005420:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fd fad8 	bl	80029d8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0e8      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005436:	4b76      	ldr	r3, [pc, #472]	; (8005610 <HAL_RCC_OscConfig+0x4a8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x2f0>
 800544a:	4b72      	ldr	r3, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a71      	ldr	r2, [pc, #452]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
 8005456:	e01c      	b.n	8005492 <HAL_RCC_OscConfig+0x32a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b05      	cmp	r3, #5
 800545e:	d10c      	bne.n	800547a <HAL_RCC_OscConfig+0x312>
 8005460:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	4a6b      	ldr	r2, [pc, #428]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005466:	f043 0304 	orr.w	r3, r3, #4
 800546a:	6713      	str	r3, [r2, #112]	; 0x70
 800546c:	4b69      	ldr	r3, [pc, #420]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	4a68      	ldr	r2, [pc, #416]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	; 0x70
 8005478:	e00b      	b.n	8005492 <HAL_RCC_OscConfig+0x32a>
 800547a:	4b66      	ldr	r3, [pc, #408]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	4a65      	ldr	r2, [pc, #404]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	6713      	str	r3, [r2, #112]	; 0x70
 8005486:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	4a62      	ldr	r2, [pc, #392]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 800548c:	f023 0304 	bic.w	r3, r3, #4
 8005490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d015      	beq.n	80054c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fd fa9d 	bl	80029d8 <HAL_GetTick>
 800549e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fd fa99 	bl	80029d8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e0a7      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ee      	beq.n	80054a2 <HAL_RCC_OscConfig+0x33a>
 80054c4:	e014      	b.n	80054f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fd fa87 	bl	80029d8 <HAL_GetTick>
 80054ca:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ce:	f7fd fa83 	bl	80029d8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e091      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e4:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ee      	bne.n	80054ce <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8086 	beq.w	8005606 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b08      	cmp	r3, #8
 8005504:	d07d      	beq.n	8005602 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d162      	bne.n	80055d4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCC_OscConfig+0x4b0>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fd fa60 	bl	80029d8 <HAL_GetTick>
 8005518:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800551c:	f7fd fa5c 	bl	80029d8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e06c      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	4b39      	ldr	r3, [pc, #228]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800554c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	60fb      	str	r3, [r7, #12]
  return(result);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	1e59      	subs	r1, r3, #1
 800556a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800556e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	617b      	str	r3, [r7, #20]
  return(result);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005588:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800558c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	61fb      	str	r3, [r7, #28]
  return(result);
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	491c      	ldr	r1, [pc, #112]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a6:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <HAL_RCC_OscConfig+0x4b0>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fa14 	bl	80029d8 <HAL_GetTick>
 80055b0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fd fa10 	bl	80029d8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e020      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x44c>
 80055d2:	e018      	b.n	8005606 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <HAL_RCC_OscConfig+0x4b0>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fd f9fd 	bl	80029d8 <HAL_GetTick>
 80055de:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fd f9f9 	bl	80029d8 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e009      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <HAL_RCC_OscConfig+0x4ac>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x47a>
 8005600:	e001      	b.n	8005606 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	; 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40007000 	.word	0x40007000
 8005614:	40023800 	.word	0x40023800
 8005618:	42470060 	.word	0x42470060

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800562a:	4b81      	ldr	r3, [pc, #516]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d90c      	bls.n	8005652 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005638:	4b7d      	ldr	r3, [pc, #500]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005640:	4b7b      	ldr	r3, [pc, #492]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0ea      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800565e:	4b75      	ldr	r3, [pc, #468]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4972      	ldr	r1, [pc, #456]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8086 	beq.w	800578a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b6b      	ldr	r3, [pc, #428]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d119      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0c8      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	4b63      	ldr	r3, [pc, #396]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0b8      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b6:	4b5f      	ldr	r3, [pc, #380]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0b0      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c6:	4b5b      	ldr	r3, [pc, #364]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 0203 	bic.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4958      	ldr	r1, [pc, #352]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fd f97e 	bl	80029d8 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d112      	bne.n	800570c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e8:	f7fd f976 	bl	80029d8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e094      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056fe:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d1ee      	bne.n	80056e8 <HAL_RCC_ClockConfig+0xcc>
 800570a:	e03e      	b.n	800578a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d112      	bne.n	800573a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005714:	e00a      	b.n	800572c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005716:	f7fd f95f 	bl	80029d8 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	; 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e07d      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800572c:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b08      	cmp	r3, #8
 8005736:	d1ee      	bne.n	8005716 <HAL_RCC_ClockConfig+0xfa>
 8005738:	e027      	b.n	800578a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d11d      	bne.n	800577e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005742:	e00a      	b.n	800575a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fd f948 	bl	80029d8 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e066      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800575a:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d1ee      	bne.n	8005744 <HAL_RCC_ClockConfig+0x128>
 8005766:	e010      	b.n	800578a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fd f936 	bl	80029d8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e054      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800577e:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1ee      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d20c      	bcs.n	80057b2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057a0:	4b23      	ldr	r3, [pc, #140]	; (8005830 <HAL_RCC_ClockConfig+0x214>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e03a      	b.n	8005828 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	491a      	ldr	r1, [pc, #104]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4912      	ldr	r1, [pc, #72]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80057f0:	f000 f826 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057f4:	4601      	mov	r1, r0
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_RCC_ClockConfig+0x218>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057fe:	23f0      	movs	r3, #240	; 0xf0
 8005800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	fa93 f3a3 	rbit	r3, r3
 8005808:	60fb      	str	r3, [r7, #12]
  return(result);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	4a08      	ldr	r2, [pc, #32]	; (8005838 <HAL_RCC_ClockConfig+0x21c>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	fa21 f303 	lsr.w	r3, r1, r3
 800581c:	4a07      	ldr	r2, [pc, #28]	; (800583c <HAL_RCC_ClockConfig+0x220>)
 800581e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005820:	200f      	movs	r0, #15
 8005822:	f7fd f8af 	bl	8002984 <HAL_InitTick>
  
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40023c00 	.word	0x40023c00
 8005834:	40023800 	.word	0x40023800
 8005838:	0800a5c4 	.word	0x0800a5c4
 800583c:	20000014 	.word	0x20000014

08005840 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	b08b      	sub	sp, #44	; 0x2c
 8005844:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005856:	4b38      	ldr	r3, [pc, #224]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b08      	cmp	r3, #8
 8005860:	d00c      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x3c>
 8005862:	2b08      	cmp	r3, #8
 8005864:	d85d      	bhi.n	8005922 <HAL_RCC_GetSysClockFreq+0xe2>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x30>
 800586a:	2b04      	cmp	r3, #4
 800586c:	d003      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x36>
 800586e:	e058      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b32      	ldr	r3, [pc, #200]	; (800593c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005872:	623b      	str	r3, [r7, #32]
       break;
 8005874:	e058      	b.n	8005928 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005876:	4b31      	ldr	r3, [pc, #196]	; (800593c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005878:	623b      	str	r3, [r7, #32]
      break;
 800587a:	e055      	b.n	8005928 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800587c:	4b2e      	ldr	r3, [pc, #184]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005884:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005892:	4a2a      	ldr	r2, [pc, #168]	; (800593c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	fbb2 f2f3 	udiv	r2, r2, r3
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058a2:	400b      	ands	r3, r1
 80058a4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80058a8:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	6979      	ldr	r1, [r7, #20]
 80058ac:	fa91 f1a1 	rbit	r1, r1
 80058b0:	6139      	str	r1, [r7, #16]
  return(result);
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	fab1 f181 	clz	r1, r1
 80058b8:	40cb      	lsrs	r3, r1
 80058ba:	fb03 f302 	mul.w	r3, r3, r2
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	e016      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <HAL_RCC_GetSysClockFreq+0xfc>)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ca:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058d2:	400b      	ands	r3, r1
 80058d4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80058d8:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	fa91 f1a1 	rbit	r1, r1
 80058e0:	60b9      	str	r1, [r7, #8]
  return(result);
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	fab1 f181 	clz	r1, r1
 80058e8:	40cb      	lsrs	r3, r1
 80058ea:	fb03 f302 	mul.w	r3, r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80058fc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	603b      	str	r3, [r7, #0]
  return(result);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	3301      	adds	r3, #1
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8005916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	623b      	str	r3, [r7, #32]
      break;
 8005920:	e002      	b.n	8005928 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005924:	623b      	str	r3, [r7, #32]
      break;
 8005926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005928:	6a3b      	ldr	r3, [r7, #32]
}
 800592a:	4618      	mov	r0, r3
 800592c:	372c      	adds	r7, #44	; 0x2c
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800
 800593c:	00f42400 	.word	0x00f42400

08005940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <HAL_RCC_GetHCLKFreq+0x14>)
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	4618      	mov	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000014 	.word	0x20000014

08005958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800595e:	f7ff ffef 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 8005962:	4601      	mov	r1, r0
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800596c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005970:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	603b      	str	r3, [r7, #0]
  return(result);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	4a04      	ldr	r2, [pc, #16]	; (8005998 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005986:	5cd3      	ldrb	r3, [r2, r3]
 8005988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800a5c4 	.word	0x0800a5c4

0800599c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80059a2:	f7ff ffcd 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 80059a6:	4601      	mov	r1, r0
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80059b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80059b4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	fa93 f3a3 	rbit	r3, r3
 80059bc:	603b      	str	r3, [r7, #0]
  return(result);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	fab3 f383 	clz	r3, r3
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	4a04      	ldr	r2, [pc, #16]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80059ca:	5cd3      	ldrb	r3, [r2, r3]
 80059cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	0800a5c4 	.word	0x0800a5c4

080059e0 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80059fa:	2301      	movs	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x32>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e182      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x338>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1a:	f7fc ffdd 	bl	80029d8 <HAL_GetTick>
 8005a1e:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d00e      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x74>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3c:	d106      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x6c>
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d003      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a52:	e157      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x86>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x86>
 8005a60:	887b      	ldrh	r3, [r7, #2]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a6c:	e14a      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d103      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	887a      	ldrh	r2, [r7, #2]
 8005aaa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d007      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ade:	d171      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x112>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d15d      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3302      	adds	r3, #2
 8005b00:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b10:	e04d      	b.n	8005bae <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x172>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x172>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d110      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d018      	beq.n	8005b8e <HAL_SPI_TransmitReceive+0x1ae>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d111      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b94:	d00b      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x1ce>
 8005b96:	f7fc ff1f 	bl	80029d8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d803      	bhi.n	8005bae <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bac:	e0aa      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ac      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x132>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1a7      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x132>
 8005bc2:	e070      	b.n	8005ca6 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x1f6>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d15d      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	7812      	ldrb	r2, [r2, #0]
 8005be0:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf6:	e04c      	b.n	8005c92 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01c      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x258>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d017      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x258>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d110      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	60ba      	str	r2, [r7, #8]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	320c      	adds	r2, #12
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d017      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x292>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d110      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	b2ca      	uxtb	r2, r1
 8005c5e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c78:	d00b      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x2b2>
 8005c7a:	f7fc fead 	bl	80029d8 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d803      	bhi.n	8005c92 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c90:	e038      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ad      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x218>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1a8      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2201      	movs	r2, #1
 8005cae:	2102      	movs	r1, #2
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f92b 	bl	8005f0c <SPI_WaitFlagStateUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005cc2:	e01f      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f988 	bl	8005fde <SPI_CheckFlag_BSY>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ce0:	e010      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	e000      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 8005d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
    return;
 8005d5e:	e0b1      	b.n	8005ec4 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_SPI_IRQHandler+0x5e>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
    return;
 8005d7c:	e0a2      	b.n	8005ec4 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 809d 	beq.w	8005ec4 <HAL_SPI_IRQHandler+0x1a4>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8097 	beq.w	8005ec4 <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d023      	beq.n	8005de8 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d011      	beq.n	8005dd0 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f043 0204 	orr.w	r2, r3, #4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	e00b      	b.n	8005de8 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
        return;
 8005de6:	e06d      	b.n	8005ec4 <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d014      	beq.n	8005e1c <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d03c      	beq.n	8005ec2 <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_SPI_IRQHandler+0x154>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d022      	beq.n	8005eba <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0203 	bic.w	r2, r2, #3
 8005e82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e90:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <HAL_SPI_IRQHandler+0x1ac>)
 8005e92:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fd f957 	bl	800314c <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_SPI_IRQHandler+0x1a2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eaa:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <HAL_SPI_IRQHandler+0x1ac>)
 8005eac:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd f94a 	bl	800314c <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8005eb8:	e003      	b.n	8005ec2 <HAL_SPI_IRQHandler+0x1a2>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f808 	bl	8005ed0 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8005ec0:	e7ff      	b.n	8005ec2 <HAL_SPI_IRQHandler+0x1a2>
 8005ec2:	bf00      	nop
  }
}
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08005ee5 	.word	0x08005ee5

08005ed0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff ffe6 	bl	8005ed0 <HAL_SPI_ErrorCallback>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005f1a:	e04d      	b.n	8005fb8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f22:	d049      	beq.n	8005fb8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005f2a:	f7fc fd55 	bl	80029d8 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d83e      	bhi.n	8005fb8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f48:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d111      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d004      	beq.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d107      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f80:	d110      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005f90:	400b      	ands	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e00e      	b.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d101      	bne.n	8005fcc <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	e000      	b.n	8005fce <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1a3      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff ff89 	bl	8005f0c <SPI_WaitFlagStateUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	f043 0220 	orr.w	r2, r3, #32
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e000      	b.n	8006012 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e01d      	b.n	8006068 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fb ffa3 	bl	8001f8c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 fbe7 	bl	800682c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e01d      	b.n	80060be <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f815 	bl	80060c6 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f000 fbbc 	bl	800682c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}  
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e01d      	b.n	8006128 <HAL_TIM_IC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_IC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f815 	bl	8006130 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fb87 	bl	800682c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIM_IC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d122      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d11b      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0202 	mvn.w	r2, #2
 8006170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb fdec 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 800618c:	e005      	b.n	800619a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fb2d 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb34 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d122      	bne.n	80061f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d11b      	bne.n	80061f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0204 	mvn.w	r2, #4
 80061c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fb fdc2 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 80061e0:	e005      	b.n	80061ee <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb03 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb0a 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d122      	bne.n	8006248 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b08      	cmp	r3, #8
 800620e:	d11b      	bne.n	8006248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0208 	mvn.w	r2, #8
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb fd98 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fad9 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fae0 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0310 	and.w	r3, r3, #16
 8006252:	2b10      	cmp	r3, #16
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b10      	cmp	r3, #16
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0210 	mvn.w	r2, #16
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2208      	movs	r2, #8
 8006272:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fb fd6e 	bl	8001d64 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 faaf 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fab6 	bl	8006802 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10e      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d107      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0201 	mvn.w	r2, #1
 80062c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fa ff6a 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b80      	cmp	r3, #128	; 0x80
 80062d4:	d10e      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b80      	cmp	r3, #128	; 0x80
 80062e2:	d107      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fee2 	bl	80070b8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d10e      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d107      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006318:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa7b 	bl	8006816 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b20      	cmp	r3, #32
 800632c:	d10e      	bne.n	800634c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b20      	cmp	r3, #32
 800633a:	d107      	bne.n	800634c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0220 	mvn.w	r2, #32
 8006344:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 feac 	bl	80070a4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_TIM_IC_ConfigChannel+0x1a>
 800636a:	2302      	movs	r3, #2
 800636c:	e08a      	b.n	8006484 <HAL_TIM_IC_ConfigChannel+0x130>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d11b      	bne.n	80063bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6819      	ldr	r1, [r3, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f000 face 	bl	8006934 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 020c 	bic.w	r2, r2, #12
 80063a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	619a      	str	r2, [r3, #24]
 80063ba:	e05a      	b.n	8006472 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d11c      	bne.n	80063fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f000 fcea 	bl	8006daa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6999      	ldr	r1, [r3, #24]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	021a      	lsls	r2, r3, #8
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
 80063fa:	e03a      	b.n	8006472 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d11b      	bne.n	800643a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f000 fd3f 	bl	8006e94 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 020c 	bic.w	r2, r2, #12
 8006424:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	61da      	str	r2, [r3, #28]
 8006438:	e01b      	b.n	8006472 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f000 fd63 	bl	8006f14 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800645c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	021a      	lsls	r2, r3, #8
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e0b4      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x184>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	f200 809f 	bhi.w	80065fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	080065fd 	.word	0x080065fd
 80064cc:	080065fd 	.word	0x080065fd
 80064d0:	080065fd 	.word	0x080065fd
 80064d4:	08006539 	.word	0x08006539
 80064d8:	080065fd 	.word	0x080065fd
 80064dc:	080065fd 	.word	0x080065fd
 80064e0:	080065fd 	.word	0x080065fd
 80064e4:	0800657b 	.word	0x0800657b
 80064e8:	080065fd 	.word	0x080065fd
 80064ec:	080065fd 	.word	0x080065fd
 80064f0:	080065fd 	.word	0x080065fd
 80064f4:	080065bb 	.word	0x080065bb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 faf6 	bl	8006af0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0208 	orr.w	r2, r2, #8
 8006512:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0204 	bic.w	r2, r2, #4
 8006522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6999      	ldr	r1, [r3, #24]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	619a      	str	r2, [r3, #24]
    }
    break;
 8006536:	e062      	b.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fa68 	bl	8006a14 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006552:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6999      	ldr	r1, [r3, #24]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	021a      	lsls	r2, r3, #8
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	619a      	str	r2, [r3, #24]
    }
    break;
 8006578:	e041      	b.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fb1d 	bl	8006bc0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0208 	orr.w	r2, r2, #8
 8006594:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0204 	bic.w	r2, r2, #4
 80065a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69d9      	ldr	r1, [r3, #28]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	61da      	str	r2, [r3, #28]
    }
    break;
 80065b8:	e021      	b.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fb69 	bl	8006c98 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	021a      	lsls	r2, r3, #8
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	61da      	str	r2, [r3, #28]
    }
    break;
 80065fa:	e000      	b.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80065fc:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e0d8      	b.n	80067e6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d052      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0xfc>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	f200 80ae 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d027      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0xb4>
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006680:	f200 80a7 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d02a      	beq.n	80066de <HAL_TIM_ConfigClockSource+0xc6>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	f200 80a2 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 800668e:	2b60      	cmp	r3, #96	; 0x60
 8006690:	d063      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x142>
 8006692:	2b60      	cmp	r3, #96	; 0x60
 8006694:	f200 809d 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d04e      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x122>
 800669c:	2b50      	cmp	r3, #80	; 0x50
 800669e:	f200 8098 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d069      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x162>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	f200 8093 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	f000 8089 	beq.w	80067c4 <HAL_TIM_ConfigClockSource+0x1ac>
 80066b2:	2b30      	cmp	r3, #48	; 0x30
 80066b4:	f200 808d 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d07c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x19e>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	f200 8088 	bhi.w	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d069      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x182>
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d06e      	beq.n	80067a8 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 80066ca:	e082      	b.n	80067d2 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0207 	bic.w	r2, r2, #7
 80066da:	609a      	str	r2, [r3, #8]
    break;
 80066dc:	e07a      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6899      	ldr	r1, [r3, #8]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f000 fc72 	bl	8006fd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	609a      	str	r2, [r3, #8]
    break;
 8006712:	e05f      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f000 fc57 	bl	8006fd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006736:	609a      	str	r2, [r3, #8]
    break;
 8006738:	e04c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 fafc 	bl	8006d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2150      	movs	r1, #80	; 0x50
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fc1f 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 8006758:	e03c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fb60 	bl	8006e2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2160      	movs	r1, #96	; 0x60
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fc0f 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 8006778:	e02c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	461a      	mov	r2, r3
 8006788:	f000 fadc 	bl	8006d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2140      	movs	r1, #64	; 0x40
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fbff 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 8006798:	e01c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbf8 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 80067a6:	e015      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2110      	movs	r1, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fbf1 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 80067b4:	e00e      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2120      	movs	r1, #32
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fbea 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 80067c2:	e007      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2130      	movs	r1, #48	; 0x30
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fbe3 	bl	8006f96 <TIM_ITRx_SetConfig>
    break;
 80067d0:	e000      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 80067d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a35      	ldr	r2, [pc, #212]	; (8006918 <TIM_Base_SetConfig+0xec>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0x3c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0x3c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a32      	ldr	r2, [pc, #200]	; (800691c <TIM_Base_SetConfig+0xf0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0x3c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a31      	ldr	r2, [pc, #196]	; (8006920 <TIM_Base_SetConfig+0xf4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0x3c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a30      	ldr	r2, [pc, #192]	; (8006924 <TIM_Base_SetConfig+0xf8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d101      	bne.n	800686c <TIM_Base_SetConfig+0x40>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <TIM_Base_SetConfig+0x42>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d008      	beq.n	8006884 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_Base_SetConfig+0xec>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01b      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d017      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <TIM_Base_SetConfig+0xf0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <TIM_Base_SetConfig+0xf4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <TIM_Base_SetConfig+0xf8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <TIM_Base_SetConfig+0xfc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <TIM_Base_SetConfig+0x100>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x98>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <TIM_Base_SetConfig+0x104>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d101      	bne.n	80068c8 <TIM_Base_SetConfig+0x9c>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <TIM_Base_SetConfig+0x9e>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a07      	ldr	r2, [pc, #28]	; (8006918 <TIM_Base_SetConfig+0xec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d103      	bne.n	8006906 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	615a      	str	r2, [r3, #20]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40010000 	.word	0x40010000
 800691c:	40000400 	.word	0x40000400
 8006920:	40000800 	.word	0x40000800
 8006924:	40000c00 	.word	0x40000c00
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400
 8006930:	40014800 	.word	0x40014800

08006934 <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <TIM_TI1_SetConfig+0xcc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <TIM_TI1_SetConfig+0x5e>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d00f      	beq.n	8006992 <TIM_TI1_SetConfig+0x5e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <TIM_TI1_SetConfig+0xd0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_TI1_SetConfig+0x5e>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <TIM_TI1_SetConfig+0xd4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_TI1_SetConfig+0x5e>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <TIM_TI1_SetConfig+0xd8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_TI1_SetConfig+0x5e>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <TIM_TI1_SetConfig+0xdc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d101      	bne.n	8006996 <TIM_TI1_SetConfig+0x62>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <TIM_TI1_SetConfig+0x64>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0303 	bic.w	r3, r3, #3
 80069a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e007      	b.n	80069be <TIM_TI1_SetConfig+0x8a>
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 0303 	bic.w	r3, r3, #3
 80069b4:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f023 030a 	bic.w	r3, r3, #10
 80069d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f003 030a 	and.w	r3, r3, #10
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40014000 	.word	0x40014000

08006a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0210 	bic.w	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0320 	bic.w	r3, r3, #32
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <TIM_OC2_SetConfig+0xd8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d121      	bne.n	8006ac4 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a9a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000

08006af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8006b02:	2300      	movs	r3, #0
 8006b04:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <TIM_OC1_SetConfig+0xcc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d11e      	bne.n	8006b96 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0308 	bic.w	r3, r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 0304 	bic.w	r3, r3, #4
 8006b70:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	621a      	str	r2, [r3, #32]
} 
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40010000 	.word	0x40010000

08006bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <TIM_OC3_SetConfig+0xd4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d121      	bne.n	8006c6e <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c44:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40010000 	.word	0x40010000

08006c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cda:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <TIM_OC4_SetConfig+0xa8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d109      	bne.n	8006d18 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	019b      	lsls	r3, r3, #6
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40010000 	.word	0x40010000

08006d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f023 030a 	bic.w	r3, r3, #10
 8006d88:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f023 0210 	bic.w	r2, r3, #16
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	621a      	str	r2, [r3, #32]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f023 0210 	bic.w	r2, r3, #16
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 0303 	bic.w	r3, r3, #3
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006eec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	031b      	lsls	r3, r3, #12
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	031b      	lsls	r3, r3, #12
 8006f74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	621a      	str	r2, [r3, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006fb4:	887b      	ldrh	r3, [r7, #2]
 8006fb6:	f043 0307 	orr.w	r3, r3, #7
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	021a      	lsls	r2, r3, #8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4313      	orrs	r3, r2
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	609a      	str	r2, [r3, #8]
} 
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800702e:	2302      	movs	r3, #2
 8007030:	e032      	b.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007050:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6859      	ldr	r1, [r3, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007072:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6899      	ldr	r1, [r3, #8]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
} 
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e03f      	b.n	800715e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa ffc8 	bl	8002088 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2224      	movs	r2, #36	; 0x24
 80070fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800710e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fb3d 	bl	8007790 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007134:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007144:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af02      	add	r7, sp, #8
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b20      	cmp	r3, #32
 8007184:	f040 8083 	bne.w	800728e <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_UART_Transmit+0x2e>
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e07b      	b.n	8007290 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Transmit+0x40>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e074      	b.n	8007290 <HAL_UART_Transmit+0x12a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2221      	movs	r2, #33	; 0x21
 80071b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80071bc:	f7fb fc0c 	bl	80029d8 <HAL_GetTick>
 80071c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80071ce:	e042      	b.n	8007256 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	d122      	bne.n	800722e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2200      	movs	r2, #0
 80071f0:	2180      	movs	r1, #128	; 0x80
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f968 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e046      	b.n	8007290 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007214:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3302      	adds	r3, #2
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	e017      	b.n	8007256 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	3301      	adds	r3, #1
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	e013      	b.n	8007256 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	2180      	movs	r1, #128	; 0x80
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f945 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e023      	b.n	8007290 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	60ba      	str	r2, [r7, #8]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1b7      	bne.n	80071d0 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f92c 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e00a      	b.n	8007290 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	e000      	b.n	8007290 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800728e:	2302      	movs	r3, #2
  }
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <HAL_UART_IRQHandler+0x52>
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9da 	bl	800769c <UART_Receive_IT>
      return;
 80072e8:	e0cb      	b.n	8007482 <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80ab 	beq.w	8007448 <HAL_UART_IRQHandler+0x1b0>
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d105      	bne.n	8007308 <HAL_UART_IRQHandler+0x70>
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80a0 	beq.w	8007448 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_UART_IRQHandler+0x90>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007320:	f043 0201 	orr.w	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_UART_IRQHandler+0xb0>
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007340:	f043 0202 	orr.w	r2, r3, #2
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <HAL_UART_IRQHandler+0xd0>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	f043 0204 	orr.w	r2, r3, #4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <HAL_UART_IRQHandler+0xf0>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007380:	f043 0208 	orr.w	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d077      	beq.n	8007480 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <HAL_UART_IRQHandler+0x112>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f979 	bl	800769c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <HAL_UART_IRQHandler+0x13a>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d031      	beq.n	8007436 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8c2 	bl	800755c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d023      	beq.n	800742e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d013      	beq.n	8007426 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	4a21      	ldr	r2, [pc, #132]	; (8007488 <HAL_UART_IRQHandler+0x1f0>)
 8007404:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	4618      	mov	r0, r3
 800740c:	f7fb fe9e 	bl	800314c <HAL_DMA_Abort_IT>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d016      	beq.n	8007444 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e00e      	b.n	8007444 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f844 	bl	80074b4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	e00a      	b.n	8007444 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f840 	bl	80074b4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	e006      	b.n	8007444 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f83c 	bl	80074b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007442:	e01d      	b.n	8007480 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	bf00      	nop
    return;
 8007446:	e01b      	b.n	8007480 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_UART_IRQHandler+0x1cc>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8af 	bl	80075c0 <UART_Transmit_IT>
    return;
 8007462:	e00e      	b.n	8007482 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ea>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8f7 	bl	800766c <UART_EndTransmit_IT>
    return;
 800747e:	e000      	b.n	8007482 <HAL_UART_IRQHandler+0x1ea>
    return;
 8007480:	bf00      	nop
  }
}
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	08007599 	.word	0x08007599

0800748c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80074d8:	e02c      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e0:	d028      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074e8:	f7fb fa76 	bl	80029d8 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d21d      	bcs.n	8007534 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007506:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e00f      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	d0c3      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007572:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695a      	ldr	r2, [r3, #20]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff ff7e 	bl	80074b4 <HAL_UART_ErrorCallback>
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b21      	cmp	r3, #33	; 0x21
 80075d2:	d144      	bne.n	800765e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075dc:	d11a      	bne.n	8007614 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d105      	bne.n	8007608 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	621a      	str	r2, [r3, #32]
 8007606:	e00e      	b.n	8007626 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]
 8007612:	e008      	b.n	8007626 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6211      	str	r1, [r2, #32]
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29b      	uxth	r3, r3
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4619      	mov	r1, r3
 8007634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e000      	b.n	8007660 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800765e:	2302      	movs	r3, #2
  }
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007682:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fefd 	bl	800748c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b22      	cmp	r3, #34	; 0x22
 80076ae:	d169      	bne.n	8007784 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d123      	bne.n	8007702 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10e      	bne.n	80076e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	1c9a      	adds	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
 80076e4:	e029      	b.n	800773a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007700:	e01b      	b.n	800773a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6858      	ldr	r0, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	1c59      	adds	r1, r3, #1
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6291      	str	r1, [r2, #40]	; 0x28
 800771a:	b2c2      	uxtb	r2, r0
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e00c      	b.n	800773a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	1c58      	adds	r0, r3, #1
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	6288      	str	r0, [r1, #40]	; 0x28
 8007732:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4619      	mov	r1, r3
 8007748:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800774a:	2b00      	cmp	r3, #0
 800774c:	d118      	bne.n	8007780 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800775c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fe92 	bl	80074a0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e002      	b.n	8007786 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007790:	b5b0      	push	{r4, r5, r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80077cc:	f023 030c 	bic.w	r3, r3, #12
 80077d0:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007804:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007820:	f040 80e4 	bne.w	80079ec <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4aab      	ldr	r2, [pc, #684]	; (8007ad8 <UART_SetConfig+0x348>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <UART_SetConfig+0xa8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4aaa      	ldr	r2, [pc, #680]	; (8007adc <UART_SetConfig+0x34c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d16c      	bne.n	8007912 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007838:	f7fe f8b0 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 800783c:	4602      	mov	r2, r0
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009a      	lsls	r2, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	4aa3      	ldr	r2, [pc, #652]	; (8007ae0 <UART_SetConfig+0x350>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	011c      	lsls	r4, r3, #4
 800785c:	f7fe f89e 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007860:	4602      	mov	r2, r0
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009a      	lsls	r2, r3, #2
 800786a:	441a      	add	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	fbb2 f5f3 	udiv	r5, r2, r3
 8007876:	f7fe f891 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 800787a:	4602      	mov	r2, r0
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	4a93      	ldr	r2, [pc, #588]	; (8007ae0 <UART_SetConfig+0x350>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	2264      	movs	r2, #100	; 0x64
 800789a:	fb02 f303 	mul.w	r3, r2, r3
 800789e:	1aeb      	subs	r3, r5, r3
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	3332      	adds	r3, #50	; 0x32
 80078a4:	4a8e      	ldr	r2, [pc, #568]	; (8007ae0 <UART_SetConfig+0x350>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078b2:	441c      	add	r4, r3
 80078b4:	f7fe f872 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 80078b8:	4602      	mov	r2, r0
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009a      	lsls	r2, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80078ce:	f7fe f865 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 80078d2:	4602      	mov	r2, r0
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009a      	lsls	r2, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	4a7d      	ldr	r2, [pc, #500]	; (8007ae0 <UART_SetConfig+0x350>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	2264      	movs	r2, #100	; 0x64
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	1aeb      	subs	r3, r5, r3
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	3332      	adds	r3, #50	; 0x32
 80078fc:	4a78      	ldr	r2, [pc, #480]	; (8007ae0 <UART_SetConfig+0x350>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	f003 0207 	and.w	r2, r3, #7
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4422      	add	r2, r4
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	e154      	b.n	8007bbc <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007912:	f7fe f821 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007916:	4602      	mov	r2, r0
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009a      	lsls	r2, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	4a6c      	ldr	r2, [pc, #432]	; (8007ae0 <UART_SetConfig+0x350>)
 800792e:	fba2 2303 	umull	r2, r3, r2, r3
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	011c      	lsls	r4, r3, #4
 8007936:	f7fe f80f 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 800793a:	4602      	mov	r2, r0
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009a      	lsls	r2, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007950:	f7fe f802 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007954:	4602      	mov	r2, r0
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009a      	lsls	r2, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	fbb2 f3f3 	udiv	r3, r2, r3
 800796a:	4a5d      	ldr	r2, [pc, #372]	; (8007ae0 <UART_SetConfig+0x350>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	2264      	movs	r2, #100	; 0x64
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	1aeb      	subs	r3, r5, r3
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	3332      	adds	r3, #50	; 0x32
 800797e:	4a58      	ldr	r2, [pc, #352]	; (8007ae0 <UART_SetConfig+0x350>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800798c:	441c      	add	r4, r3
 800798e:	f7fd ffe3 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007992:	4602      	mov	r2, r0
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009a      	lsls	r2, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80079a8:	f7fd ffd6 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009a      	lsls	r2, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c2:	4a47      	ldr	r2, [pc, #284]	; (8007ae0 <UART_SetConfig+0x350>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	2264      	movs	r2, #100	; 0x64
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	1aeb      	subs	r3, r5, r3
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	3332      	adds	r3, #50	; 0x32
 80079d6:	4a42      	ldr	r2, [pc, #264]	; (8007ae0 <UART_SetConfig+0x350>)
 80079d8:	fba2 2303 	umull	r2, r3, r2, r3
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f003 0207 	and.w	r2, r3, #7
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4422      	add	r2, r4
 80079e8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80079ea:	e0e7      	b.n	8007bbc <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a39      	ldr	r2, [pc, #228]	; (8007ad8 <UART_SetConfig+0x348>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <UART_SetConfig+0x270>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a38      	ldr	r2, [pc, #224]	; (8007adc <UART_SetConfig+0x34c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d171      	bne.n	8007ae4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007a00:	f7fd ffcc 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009a      	lsls	r2, r3, #2
 8007a0e:	441a      	add	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1a:	4a31      	ldr	r2, [pc, #196]	; (8007ae0 <UART_SetConfig+0x350>)
 8007a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	011c      	lsls	r4, r3, #4
 8007a24:	f7fd ffba 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009a      	lsls	r2, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a3e:	f7fd ffad 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007a42:	4602      	mov	r2, r0
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009a      	lsls	r2, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <UART_SetConfig+0x350>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	2264      	movs	r2, #100	; 0x64
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	1aeb      	subs	r3, r5, r3
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	3332      	adds	r3, #50	; 0x32
 8007a6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <UART_SetConfig+0x350>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a78:	441c      	add	r4, r3
 8007a7a:	f7fd ff8f 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009a      	lsls	r2, r3, #2
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a94:	f7fd ff82 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009a      	lsls	r2, r3, #2
 8007aa2:	441a      	add	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aae:	4a0c      	ldr	r2, [pc, #48]	; (8007ae0 <UART_SetConfig+0x350>)
 8007ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	2264      	movs	r2, #100	; 0x64
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	1aeb      	subs	r3, r5, r3
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	3332      	adds	r3, #50	; 0x32
 8007ac2:	4a07      	ldr	r2, [pc, #28]	; (8007ae0 <UART_SetConfig+0x350>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	f003 020f 	and.w	r2, r3, #15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4422      	add	r2, r4
 8007ad4:	609a      	str	r2, [r3, #8]
 8007ad6:	e071      	b.n	8007bbc <UART_SetConfig+0x42c>
 8007ad8:	40011000 	.word	0x40011000
 8007adc:	40011400 	.word	0x40011400
 8007ae0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007ae4:	f7fd ff38 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009a      	lsls	r2, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <UART_SetConfig+0x434>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	011c      	lsls	r4, r3, #4
 8007b08:	f7fd ff26 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009a      	lsls	r2, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b22:	f7fd ff19 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007b26:	4602      	mov	r2, r0
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009a      	lsls	r2, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	4a21      	ldr	r2, [pc, #132]	; (8007bc4 <UART_SetConfig+0x434>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	2264      	movs	r2, #100	; 0x64
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	1aeb      	subs	r3, r5, r3
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	3332      	adds	r3, #50	; 0x32
 8007b50:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <UART_SetConfig+0x434>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b5c:	441c      	add	r4, r3
 8007b5e:	f7fd fefb 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007b62:	4602      	mov	r2, r0
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009a      	lsls	r2, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b78:	f7fd feee 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009a      	lsls	r2, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b92:	4a0c      	ldr	r2, [pc, #48]	; (8007bc4 <UART_SetConfig+0x434>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2264      	movs	r2, #100	; 0x64
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ba0:	1aeb      	subs	r3, r5, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	; 0x32
 8007ba6:	4a07      	ldr	r2, [pc, #28]	; (8007bc4 <UART_SetConfig+0x434>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4422      	add	r2, r4
 8007bb8:	609a      	str	r2, [r3, #8]
}
 8007bba:	e7ff      	b.n	8007bbc <UART_SetConfig+0x42c>
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8007bc4:	51eb851f 	.word	0x51eb851f

08007bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	019b      	lsls	r3, r3, #6
 8007bda:	f043 0220 	orr.w	r2, r3, #32
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <USB_FlushTxFifo+0x48>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d901      	bls.n	8007bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e006      	b.n	8007c02 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d0f0      	beq.n	8007be2 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	00030d40 	.word	0x00030d40

08007c14 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0306 	and.w	r3, r3, #6
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e01c      	b.n	8007c70 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0306 	and.w	r3, r3, #6
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d007      	beq.n	8007c56 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d102      	bne.n	8007c5c <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8007c56:	2303      	movs	r3, #3
 8007c58:	73fb      	strb	r3, [r7, #15]
 8007c5a:	e009      	b.n	8007c70 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 0306 	and.w	r3, r3, #6
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d101      	bne.n	8007c70 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d13c      	bne.n	8007d0a <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	408b      	lsls	r3, r1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d159      	bne.n	8007d7a <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	78c9      	ldrb	r1, [r1, #3]
 8007ce2:	0489      	lsls	r1, r1, #18
 8007ce4:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	7809      	ldrb	r1, [r1, #0]
 8007cea:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8007cec:	430b      	orrs	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e037      	b.n	8007d7a <USB_ActivateEndpoint+0xfc>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4619      	mov	r1, r3
 8007d18:	2301      	movs	r3, #1
 8007d1a:	408b      	lsls	r3, r1
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11c      	bne.n	8007d7a <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	78c9      	ldrb	r1, [r1, #3]
 8007d5c:	0489      	lsls	r1, r1, #18
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d78:	6013      	str	r3, [r2, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f040 8139 	bne.w	8008016 <USB_EPStartXfer+0x28e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d138      	bne.n	8007e1e <USB_EPStartXfer+0x96>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	0151      	lsls	r1, r2, #5
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	440a      	add	r2, r1
 8007e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e16:	0cdb      	lsrs	r3, r3, #19
 8007e18:	04db      	lsls	r3, r3, #19
 8007e1a:	6113      	str	r3, [r2, #16]
 8007e1c:	e080      	b.n	8007f20 <USB_EPStartXfer+0x198>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3c:	0cdb      	lsrs	r3, r3, #19
 8007e3e:	04db      	lsls	r3, r3, #19
 8007e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6959      	ldr	r1, [r3, #20]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	440b      	add	r3, r1
 8007e84:	1e59      	subs	r1, r3, #1
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e8e:	04d9      	lsls	r1, r3, #19
 8007e90:	4b8a      	ldr	r3, [pc, #552]	; (80080bc <USB_EPStartXfer+0x334>)
 8007e92:	400b      	ands	r3, r1
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	7809      	ldrb	r1, [r1, #0]
 8007e98:	0148      	lsls	r0, r1, #5
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	4401      	add	r1, r0
 8007e9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	7809      	ldrb	r1, [r1, #0]
 8007ec2:	0148      	lsls	r0, r1, #5
 8007ec4:	68f9      	ldr	r1, [r7, #12]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	78db      	ldrb	r3, [r3, #3]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d123      	bne.n	8007f20 <USB_EPStartXfer+0x198>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007efa:	6113      	str	r3, [r2, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	7812      	ldrb	r2, [r2, #0]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f1e:	6113      	str	r3, [r2, #16]
      }       
    }

    if (dma == 1U)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10b      	bne.n	8007f3e <USB_EPStartXfer+0x1b6>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	461a      	mov	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	6153      	str	r3, [r2, #20]
 8007f3c:	e015      	b.n	8007f6a <USB_EPStartXfer+0x1e2>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	78db      	ldrb	r3, [r3, #3]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d011      	beq.n	8007f6a <USB_EPStartXfer+0x1e2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <USB_EPStartXfer+0x1e2>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	408b      	lsls	r3, r1
 8007f60:	68f9      	ldr	r1, [r7, #12]
 8007f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f66:	4313      	orrs	r3, r2
 8007f68:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	78db      	ldrb	r3, [r3, #3]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d12c      	bne.n	8007fcc <USB_EPStartXfer+0x244>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d112      	bne.n	8007fa8 <USB_EPStartXfer+0x220>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	7812      	ldrb	r2, [r2, #0]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e011      	b.n	8007fcc <USB_EPStartXfer+0x244>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fca:	6013      	str	r3, [r2, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	7812      	ldrb	r2, [r2, #0]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fee:	6013      	str	r3, [r2, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	78db      	ldrb	r3, [r3, #3]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	f040 80ed 	bne.w	80081d4 <USB_EPStartXfer+0x44c>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	68d9      	ldr	r1, [r3, #12]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	781a      	ldrb	r2, [r3, #0]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	b298      	uxth	r0, r3
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4603      	mov	r3, r0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa38 	bl	8008484 <USB_WritePacket>
 8008014:	e0de      	b.n	80081d4 <USB_EPStartXfer+0x44c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008034:	0cdb      	lsrs	r3, r3, #19
 8008036:	04db      	lsls	r3, r3, #19
 8008038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800805c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008060:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d12a      	bne.n	80080c0 <USB_EPStartXfer+0x338>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	7809      	ldrb	r1, [r1, #0]
 8008086:	0148      	lsls	r0, r1, #5
 8008088:	68f9      	ldr	r1, [r7, #12]
 800808a:	4401      	add	r1, r0
 800808c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008090:	4313      	orrs	r3, r2
 8008092:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b6:	6113      	str	r3, [r2, #16]
 80080b8:	e03b      	b.n	8008132 <USB_EPStartXfer+0x3aa>
 80080ba:	bf00      	nop
 80080bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4413      	add	r3, r2
 80080ca:	1e5a      	subs	r2, r3, #1
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	8afb      	ldrh	r3, [r7, #22]
 80080e8:	04db      	lsls	r3, r3, #19
 80080ea:	4619      	mov	r1, r3
 80080ec:	4b3c      	ldr	r3, [pc, #240]	; (80081e0 <USB_EPStartXfer+0x458>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	7809      	ldrb	r1, [r1, #0]
 80080f4:	0148      	lsls	r0, r1, #5
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	4401      	add	r1, r0
 80080fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080fe:	4313      	orrs	r3, r2
 8008100:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	8af9      	ldrh	r1, [r7, #22]
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	7809      	ldrb	r1, [r1, #0]
 8008124:	0148      	lsls	r0, r1, #5
 8008126:	68f9      	ldr	r1, [r7, #12]
 8008128:	4401      	add	r1, r0
 800812a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800812e:	4313      	orrs	r3, r2
 8008130:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d10a      	bne.n	800814e <USB_EPStartXfer+0x3c6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	68d9      	ldr	r1, [r3, #12]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	460a      	mov	r2, r1
 800814c:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d12c      	bne.n	80081b0 <USB_EPStartXfer+0x428>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d112      	bne.n	800818c <USB_EPStartXfer+0x404>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e011      	b.n	80081b0 <USB_EPStartXfer+0x428>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	7812      	ldrb	r2, [r2, #0]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	7812      	ldrb	r2, [r2, #0]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	1ff80000 	.word	0x1ff80000

080081e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	f040 80c8 	bne.w	800838c <USB_EP0StartXfer+0x1a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d138      	bne.n	8008276 <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800822a:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800824e:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	440a      	add	r2, r1
 800826a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826e:	0cdb      	lsrs	r3, r3, #19
 8008270:	04db      	lsls	r3, r3, #19
 8008272:	6113      	str	r3, [r2, #16]
 8008274:	e056      	b.n	8008324 <USB_EP0StartXfer+0x140>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008294:	0cdb      	lsrs	r3, r3, #19
 8008296:	04db      	lsls	r3, r3, #19
 8008298:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082c0:	6113      	str	r3, [r2, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	695a      	ldr	r2, [r3, #20]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d903      	bls.n	80082d6 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	691a      	ldr	r2, [r3, #16]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	7809      	ldrb	r1, [r1, #0]
 8008316:	0148      	lsls	r0, r1, #5
 8008318:	68f9      	ldr	r1, [r7, #12]
 800831a:	4401      	add	r1, r0
 800831c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008320:	4313      	orrs	r3, r2
 8008322:	610b      	str	r3, [r1, #16]
    
    }
    
    if (dma == 1)
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d10b      	bne.n	8008342 <USB_EP0StartXfer+0x15e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008338:	461a      	mov	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	6153      	str	r3, [r2, #20]
 8008340:	e011      	b.n	8008366 <USB_EP0StartXfer+0x182>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00d      	beq.n	8008366 <USB_EP0StartXfer+0x182>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	4619      	mov	r1, r3
 8008358:	2301      	movs	r3, #1
 800835a:	408b      	lsls	r3, r1
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008362:	4313      	orrs	r3, r2
 8008364:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	7812      	ldrb	r2, [r2, #0]
 800837a:	0151      	lsls	r1, r2, #5
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	440a      	add	r2, r1
 8008380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	e074      	b.n	8008476 <USB_EP0StartXfer+0x292>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083aa:	0cdb      	lsrs	r3, r3, #19
 80083ac:	04db      	lsls	r3, r3, #19
 80083ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	7812      	ldrb	r2, [r2, #0]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d6:	6113      	str	r3, [r2, #16]
      
    if (ep->xfer_len > 0U)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <USB_EP0StartXfer+0x204>
    {
      ep->xfer_len = ep->maxpacket;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800840a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	7809      	ldrb	r1, [r1, #0]
 8008428:	0148      	lsls	r0, r1, #5
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	4401      	add	r1, r0
 800842e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008432:	4313      	orrs	r3, r2
 8008434:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10a      	bne.n	8008452 <USB_EP0StartXfer+0x26e>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	68d9      	ldr	r1, [r3, #12]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	460a      	mov	r2, r1
 8008450:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	440a      	add	r2, r1
 800846c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008474:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	71fb      	strb	r3, [r7, #7]
 8008496:	4613      	mov	r3, r2
 8008498:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 80084a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d11a      	bne.n	80084e0 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 80084aa:	88bb      	ldrh	r3, [r7, #4]
 80084ac:	3303      	adds	r3, #3
 80084ae:	089b      	lsrs	r3, r3, #2
 80084b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	e00f      	b.n	80084d8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	031a      	lsls	r2, r3, #12
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c4:	461a      	mov	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3301      	adds	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	3304      	adds	r3, #4
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d3eb      	bcc.n	80084b8 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b087      	sub	sp, #28
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	4613      	mov	r3, r2
 80084fa:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	3303      	adds	r3, #3
 8008504:	089b      	lsrs	r3, r3, #2
 8008506:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e00b      	b.n	8008526 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	3301      	adds	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	3304      	adds	r3, #4
 8008524:	60bb      	str	r3, [r7, #8]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	429a      	cmp	r2, r3
 800852c:	d3ef      	bcc.n	800850e <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 800852e:	68bb      	ldr	r3, [r7, #8]
}
 8008530:	4618      	mov	r0, r3
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d12e      	bne.n	80085ac <USB_EPSetStall+0x70>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	db11      	blt.n	8008586 <USB_EPSetStall+0x4a>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	7812      	ldrb	r2, [r2, #0]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	440a      	add	r2, r1
 800857c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008584:	6013      	str	r3, [r2, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e02d      	b.n	8008608 <USB_EPSetStall+0xcc>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	db11      	blt.n	80085e4 <USB_EPSetStall+0xa8>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085e2:	6013      	str	r3, [r2, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	7812      	ldrb	r2, [r2, #0]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008606:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d12c      	bne.n	8008682 <USB_EPClearStall+0x6c>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800864a:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	78db      	ldrb	r3, [r3, #3]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d003      	beq.n	800865c <USB_EPClearStall+0x46>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	78db      	ldrb	r3, [r3, #3]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d13e      	bne.n	80086da <USB_EPClearStall+0xc4>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	7812      	ldrb	r2, [r2, #0]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e02b      	b.n	80086da <USB_EPClearStall+0xc4>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	7812      	ldrb	r2, [r2, #0]
 8008696:	0151      	lsls	r1, r2, #5
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	440a      	add	r2, r1
 800869c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086a4:	6013      	str	r3, [r2, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	78db      	ldrb	r3, [r3, #3]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d003      	beq.n	80086b6 <USB_EPClearStall+0xa0>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d111      	bne.n	80086da <USB_EPClearStall+0xc4>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	7812      	ldrb	r2, [r2, #0]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6013      	str	r3, [r2, #0]
    }    
  }
  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008702:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008706:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800871e:	4313      	orrs	r3, r2
 8008720:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4013      	ands	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  return v;  
 800874c:	68fb      	ldr	r3, [r7, #12]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4013      	ands	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	0c1b      	lsrs	r3, r3, #16
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4013      	ands	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	b29b      	uxth	r3, r3
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	460b      	mov	r3, r1
 80087c4:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4013      	ands	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  return v;
 80087e4:	68fb      	ldr	r3, [r7, #12]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b087      	sub	sp, #28
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008810:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	fa22 f303 	lsr.w	r3, r2, r3
 800881a:	01db      	lsls	r3, r3, #7
 800881c:	b2db      	uxtb	r3, r3
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  return v;
 8008838:	68fb      	ldr	r3, [r7, #12]
}
 800883a:	4618      	mov	r0, r3
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0301 	and.w	r3, r3, #1
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008878:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0306 	and.w	r3, r3, #6
 800888e:	2b04      	cmp	r3, #4
 8008890:	d109      	bne.n	80088a6 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a0:	f043 0303 	orr.w	r3, r3, #3
 80088a4:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	460b      	mov	r3, r1
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	461a      	mov	r2, r3
 80088de:	2300      	movs	r3, #0
 80088e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008904:	f043 0318 	orr.w	r3, r3, #24
 8008908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008918:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800891c:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 800891e:	7afb      	ldrb	r3, [r7, #11]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d10c      	bne.n	800893e <USB_EP0_OutStart+0x76>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008936:	461a      	mov	r2, r3
 8008938:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800893c:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3308      	adds	r3, #8
 8008958:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d001      	beq.n	8008966 <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 8008962:	2301      	movs	r3, #1
 8008964:	e00c      	b.n	8008980 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3302      	adds	r3, #2
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008974:	3b03      	subs	r3, #3
 8008976:	429a      	cmp	r2, r3
 8008978:	d001      	beq.n	800897e <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 800897a:	2302      	movs	r3, #2
 800897c:	e000      	b.n	8008980 <HCI_verify+0x34>
  
  return 0;      
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HCI_Isr>:
{
  return list_is_empty(&hciReadPktRxQueue);
}

void HCI_Isr(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 8008996:	f7f9 ffc7 	bl	8002928 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800899a:	e038      	b.n	8008a0e <HCI_Isr+0x82>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 800899c:	4820      	ldr	r0, [pc, #128]	; (8008a20 <HCI_Isr+0x94>)
 800899e:	f000 f845 	bl	8008a2c <list_is_empty>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d12d      	bne.n	8008a04 <HCI_Isr+0x78>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80089a8:	463b      	mov	r3, r7
 80089aa:	4619      	mov	r1, r3
 80089ac:	481c      	ldr	r0, [pc, #112]	; (8008a20 <HCI_Isr+0x94>)
 80089ae:	f000 f8cc 	bl	8008b4a <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(&SpiHandle, hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	2280      	movs	r2, #128	; 0x80
 80089b8:	4619      	mov	r1, r3
 80089ba:	481a      	ldr	r0, [pc, #104]	; (8008a24 <HCI_Isr+0x98>)
 80089bc:	f7f9 ff3c 	bl	8002838 <BlueNRG_SPI_Read_All>
 80089c0:	4603      	mov	r3, r0
 80089c2:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d016      	beq.n	80089f8 <HCI_Isr+0x6c>
        hciReadPacket->data_len = data_len;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	79fa      	ldrb	r2, [r7, #7]
 80089ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff ffb9 	bl	800894c <HCI_verify>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <HCI_Isr+0x60>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	4810      	ldr	r0, [pc, #64]	; (8008a28 <HCI_Isr+0x9c>)
 80089e6:	f000 f869 	bl	8008abc <list_insert_tail>
 80089ea:	e00e      	b.n	8008a0a <HCI_Isr+0x7e>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	480b      	ldr	r0, [pc, #44]	; (8008a20 <HCI_Isr+0x94>)
 80089f2:	f000 f83d 	bl	8008a70 <list_insert_head>
 80089f6:	e008      	b.n	8008a0a <HCI_Isr+0x7e>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	4808      	ldr	r0, [pc, #32]	; (8008a20 <HCI_Isr+0x94>)
 80089fe:	f000 f837 	bl	8008a70 <list_insert_head>
 8008a02:	e002      	b.n	8008a0a <HCI_Isr+0x7e>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 8008a04:	f7f9 ff90 	bl	8002928 <Clear_SPI_EXTI_Flag>
 8008a08:	e006      	b.n	8008a18 <HCI_Isr+0x8c>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 8008a0a:	f7f9 ff8d 	bl	8002928 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 8008a0e:	f7f9 ff03 	bl	8002818 <BlueNRG_DataPresent>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1c1      	bne.n	800899c <HCI_Isr+0x10>
  }
}
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000d44 	.word	0x20000d44
 8008a24:	20000ce8 	.word	0x20000ce8
 8008a28:	20000d4c 	.word	0x20000d4c

08008a2c <list_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;	
}

uint8_t list_is_empty (tListNode * listHead)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a34:	f3ef 8310 	mrs	r3, PRIMASK
 8008a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a3e:	b672      	cpsid	i
}
 8008a40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d102      	bne.n	8008a52 <list_is_empty+0x26>
  {
    return_value = TRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	75fb      	strb	r3, [r7, #23]
 8008a50:	e001      	b.n	8008a56 <list_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f383 8810 	msr	PRIMASK, r3
}
 8008a60:	bf00      	nop
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a80:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a84:	b672      	cpsid	i
}
 8008a86:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f383 8810 	msr	PRIMASK, r3
}
 8008aae:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8008acc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ad0:	b672      	cpsid	i
}
 8008ad2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f383 8810 	msr	PRIMASK, r3
}
 8008afa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008afc:	bf00      	nop
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b10:	f3ef 8310 	mrs	r3, PRIMASK
 8008b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b16:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b1a:	b672      	cpsid	i
}
 8008b1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6852      	ldr	r2, [r2, #4]
 8008b30:	605a      	str	r2, [r3, #4]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f383 8810 	msr	PRIMASK, r3
}
 8008b3c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b54:	f3ef 8310 	mrs	r3, PRIMASK
 8008b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b5e:	b672      	cpsid	i
}
 8008b60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff ffca 	bl	8008b08 <list_remove_node>
  (*node)->next = NULL;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f383 8810 	msr	PRIMASK, r3
}
 8008b8e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008b90:	bf00      	nop
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00c      	beq.n	8008be2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	78fa      	ldrb	r2, [r7, #3]
 8008c02:	4611      	mov	r1, r2
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4798      	blx	r3
  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fda2 	bl	800976e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c38:	461a      	mov	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008c46:	f003 031f 	and.w	r3, r3, #31
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d016      	beq.n	8008c7c <USBD_LL_SetupStage+0x6a>
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	dc1c      	bgt.n	8008c8c <USBD_LL_SetupStage+0x7a>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <USBD_LL_SetupStage+0x4a>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d008      	beq.n	8008c6c <USBD_LL_SetupStage+0x5a>
 8008c5a:	e017      	b.n	8008c8c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9c7 	bl	8008ff8 <USBD_StdDevReq>
    break;
 8008c6a:	e01a      	b.n	8008ca2 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa0f 	bl	8009098 <USBD_StdItfReq>
    break;
 8008c7a:	e012      	b.n	8008ca2 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa3a 	bl	80090fe <USBD_StdEPReq>
    break;
 8008c8a:	e00a      	b.n	8008ca2 <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7f9 fc08 	bl	80024b0 <USBD_LL_StallEP>
    break;
 8008ca0:	bf00      	nop
  }  
  return USBD_OK;  
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d138      	bne.n	8008d32 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008cc6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d142      	bne.n	8008d58 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d914      	bls.n	8008d08 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	bf28      	it	cs
 8008cf8:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fdb0 	bl	8009866 <USBD_CtlContinueRx>
 8008d06:	e027      	b.n	8008d58 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d105      	bne.n	8008d2a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fdad 	bl	800988a <USBD_CtlSendStatus>
 8008d30:	e012      	b.n	8008d58 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d107      	bne.n	8008d58 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	7afa      	ldrb	r2, [r7, #11]
 8008d52:	4611      	mov	r1, r2
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	4798      	blx	r3
  }  
  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d16c      	bne.n	8008e50 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3314      	adds	r3, #20
 8008d7a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d157      	bne.n	8008e36 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d915      	bls.n	8008dbe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	461a      	mov	r2, r3
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fd49 	bl	8009842 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008db0:	2300      	movs	r3, #0
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7f9 fbf6 	bl	80025a8 <USBD_LL_PrepareReceive>
 8008dbc:	e03b      	b.n	8008e36 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	68d2      	ldr	r2, [r2, #12]
 8008dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dca:	fb02 f201 	mul.w	r2, r2, r1
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11c      	bne.n	8008e0e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d316      	bcc.n	8008e0e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d20f      	bcs.n	8008e0e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008dee:	2200      	movs	r2, #0
 8008df0:	2100      	movs	r1, #0
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fd25 	bl	8009842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7f9 fbce 	bl	80025a8 <USBD_LL_PrepareReceive>
 8008e0c:	e013      	b.n	8008e36 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d105      	bne.n	8008e30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fd3d 	bl	80098b0 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d11a      	bne.n	8008e76 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff fea9 	bl	8008b98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8008e4e:	e012      	b.n	8008e76 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00c      	beq.n	8008e76 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d107      	bne.n	8008e76 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	7afa      	ldrb	r2, [r7, #11]
 8008e70:	4611      	mov	r1, r2
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	4798      	blx	r3
  }  
  return USBD_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7f9 faf4 	bl	800247c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2240      	movs	r2, #64	; 0x40
 8008e98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7f9 faea 	bl	800247c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2240      	movs	r2, #64	; 0x40
 8008eac:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6852      	ldr	r2, [r2, #4]
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	4611      	mov	r1, r2
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 
  
  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2204      	movs	r2, #4
 8008f16:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d10b      	bne.n	8008f74 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6852      	ldr	r2, [r2, #4]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
   
  return USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b09      	cmp	r3, #9
 800900c:	d839      	bhi.n	8009082 <USBD_StdDevReq+0x8a>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_StdDevReq+0x1c>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009065 	.word	0x08009065
 8009018:	08009079 	.word	0x08009079
 800901c:	08009083 	.word	0x08009083
 8009020:	0800906f 	.word	0x0800906f
 8009024:	08009083 	.word	0x08009083
 8009028:	08009047 	.word	0x08009047
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009083 	.word	0x08009083
 8009034:	0800905b 	.word	0x0800905b
 8009038:	08009051 	.word	0x08009051
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f93a 	bl	80092b8 <USBD_GetDescriptor>
    break;
 8009044:	e022      	b.n	800908c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fa29 	bl	80094a0 <USBD_SetAddress>
    break;
 800904e:	e01d      	b.n	800908c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa64 	bl	8009520 <USBD_SetConfig>
    break;
 8009058:	e018      	b.n	800908c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fae7 	bl	8009630 <USBD_GetConfig>
    break;
 8009062:	e013      	b.n	800908c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb14 	bl	8009694 <USBD_GetStatus>
    break;
 800906c:	e00e      	b.n	800908c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fb39 	bl	80096e8 <USBD_SetFeature>
    break;
 8009076:	e009      	b.n	800908c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fb4f 	bl	800971e <USBD_ClrFeature>
    break;
 8009080:	e004      	b.n	800908c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fbaf 	bl	80097e8 <USBD_CtlError>
    break;
 800908a:	bf00      	nop
  }
  
  return ret;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop

08009098 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d11b      	bne.n	80090e8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	889b      	ldrh	r3, [r3, #4]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d811      	bhi.n	80090de <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	88db      	ldrh	r3, [r3, #6]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d110      	bne.n	80090f2 <USBD_StdItfReq+0x5a>
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10d      	bne.n	80090f2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fbd7 	bl	800988a <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80090dc:	e009      	b.n	80090f2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fb81 	bl	80097e8 <USBD_CtlError>
    break;
 80090e6:	e004      	b.n	80090f2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fb7c 	bl	80097e8 <USBD_CtlError>
    break;
 80090f0:	e000      	b.n	80090f4 <USBD_StdItfReq+0x5c>
    break;
 80090f2:	bf00      	nop
  }
  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	889b      	ldrh	r3, [r3, #4]
 8009110:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800911a:	2b20      	cmp	r3, #32
 800911c:	d108      	bne.n	8009130 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
    
    return USBD_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	e0be      	b.n	80092ae <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b03      	cmp	r3, #3
 8009136:	d007      	beq.n	8009148 <USBD_StdEPReq+0x4a>
 8009138:	2b03      	cmp	r3, #3
 800913a:	f300 80b6 	bgt.w	80092aa <USBD_StdEPReq+0x1ac>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d06d      	beq.n	800921e <USBD_StdEPReq+0x120>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d035      	beq.n	80091b2 <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 8009146:	e0b0      	b.n	80092aa <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800914e:	2b02      	cmp	r3, #2
 8009150:	d002      	beq.n	8009158 <USBD_StdEPReq+0x5a>
 8009152:	2b03      	cmp	r3, #3
 8009154:	d00c      	beq.n	8009170 <USBD_StdEPReq+0x72>
 8009156:	e025      	b.n	80091a4 <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d027      	beq.n	80091ae <USBD_StdEPReq+0xb0>
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d024      	beq.n	80091ae <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7f9 f9a1 	bl	80024b0 <USBD_LL_StallEP>
      break;	
 800916e:	e01e      	b.n	80091ae <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <USBD_StdEPReq+0x90>
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	d004      	beq.n	800918e <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f9 f991 	bl	80024b0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fb74 	bl	800988a <USBD_CtlSendStatus>
      break;
 80091a2:	e005      	b.n	80091b0 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb1e 	bl	80097e8 <USBD_CtlError>
      break;    
 80091ac:	e000      	b.n	80091b0 <USBD_StdEPReq+0xb2>
      break;	
 80091ae:	bf00      	nop
    break;
 80091b0:	e07c      	b.n	80092ac <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d002      	beq.n	80091c2 <USBD_StdEPReq+0xc4>
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d00c      	beq.n	80091da <USBD_StdEPReq+0xdc>
 80091c0:	e024      	b.n	800920c <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d026      	beq.n	8009216 <USBD_StdEPReq+0x118>
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b80      	cmp	r3, #128	; 0x80
 80091cc:	d023      	beq.n	8009216 <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7f9 f96c 	bl	80024b0 <USBD_LL_StallEP>
      break;	
 80091d8:	e01d      	b.n	8009216 <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d11b      	bne.n	800921a <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00b      	beq.n	8009204 <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f9 f970 	bl	80024d6 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb40 	bl	800988a <USBD_CtlSendStatus>
      break;
 800920a:	e006      	b.n	800921a <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 faea 	bl	80097e8 <USBD_CtlError>
      break;    
 8009214:	e002      	b.n	800921c <USBD_StdEPReq+0x11e>
      break;	
 8009216:	bf00      	nop
 8009218:	e048      	b.n	80092ac <USBD_StdEPReq+0x1ae>
      break;
 800921a:	bf00      	nop
    break;
 800921c:	e046      	b.n	80092ac <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009224:	2b02      	cmp	r3, #2
 8009226:	d002      	beq.n	800922e <USBD_StdEPReq+0x130>
 8009228:	2b03      	cmp	r3, #3
 800922a:	d00b      	beq.n	8009244 <USBD_StdEPReq+0x146>
 800922c:	e036      	b.n	800929c <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009234:	2b00      	cmp	r3, #0
 8009236:	d036      	beq.n	80092a6 <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7f9 f937 	bl	80024b0 <USBD_LL_StallEP>
      break;	
 8009242:	e030      	b.n	80092a6 <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	da08      	bge.n	800925e <USBD_StdEPReq+0x160>
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009252:	3301      	adds	r3, #1
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	3304      	adds	r3, #4
 800925c:	e007      	b.n	800926e <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009264:	3310      	adds	r3, #16
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	3304      	adds	r3, #4
 800926e:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7f9 f941 	bl	80024fc <USBD_LL_IsStallEP>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2201      	movs	r2, #1
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e002      	b.n	800928e <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800928e:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8009290:	2202      	movs	r2, #2
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fab8 	bl	800980a <USBD_CtlSendData>
      break;
 800929a:	e005      	b.n	80092a8 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 faa2 	bl	80097e8 <USBD_CtlError>
      break;
 80092a4:	e000      	b.n	80092a8 <USBD_StdEPReq+0x1aa>
      break;	
 80092a6:	bf00      	nop
    break;
 80092a8:	e000      	b.n	80092ac <USBD_StdEPReq+0x1ae>
    break;
 80092aa:	bf00      	nop
  }
  return ret;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	885b      	ldrh	r3, [r3, #2]
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b06      	cmp	r3, #6
 80092ce:	f200 80c9 	bhi.w	8009464 <USBD_GetDescriptor+0x1ac>
 80092d2:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <USBD_GetDescriptor+0x20>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	0800930d 	.word	0x0800930d
 80092e0:	0800934d 	.word	0x0800934d
 80092e4:	08009465 	.word	0x08009465
 80092e8:	08009465 	.word	0x08009465
 80092ec:	08009411 	.word	0x08009411
 80092f0:	08009437 	.word	0x08009437
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7c12      	ldrb	r2, [r2, #16]
 8009300:	f107 010a 	add.w	r1, r7, #10
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
    break;
 800930a:	e0b0      	b.n	800946e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7c1b      	ldrb	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10d      	bne.n	8009330 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	f107 020a 	add.w	r2, r7, #10
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	2202      	movs	r2, #2
 800932c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800932e:	e09e      	b.n	800946e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f107 020a 	add.w	r2, r7, #10
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	2202      	movs	r2, #2
 8009348:	701a      	strb	r2, [r3, #0]
    break;
 800934a:	e090      	b.n	800946e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	885b      	ldrh	r3, [r3, #2]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b05      	cmp	r3, #5
 8009354:	d856      	bhi.n	8009404 <USBD_GetDescriptor+0x14c>
 8009356:	a201      	add	r2, pc, #4	; (adr r2, 800935c <USBD_GetDescriptor+0xa4>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009375 	.word	0x08009375
 8009360:	0800938d 	.word	0x0800938d
 8009364:	080093a5 	.word	0x080093a5
 8009368:	080093bd 	.word	0x080093bd
 800936c:	080093d5 	.word	0x080093d5
 8009370:	080093ed 	.word	0x080093ed
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 010a 	add.w	r1, r7, #10
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
      break;
 800938a:	e040      	b.n	800940e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 010a 	add.w	r1, r7, #10
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
      break;
 80093a2:	e034      	b.n	800940e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	7c12      	ldrb	r2, [r2, #16]
 80093b0:	f107 010a 	add.w	r1, r7, #10
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
      break;
 80093ba:	e028      	b.n	800940e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 010a 	add.w	r1, r7, #10
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
      break;
 80093d2:	e01c      	b.n	800940e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 010a 	add.w	r1, r7, #10
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
      break;
 80093ea:	e010      	b.n	800940e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	f107 010a 	add.w	r1, r7, #10
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	60f8      	str	r0, [r7, #12]
      break;
 8009402:	e004      	b.n	800940e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f9ee 	bl	80097e8 <USBD_CtlError>
      return;
 800940c:	e044      	b.n	8009498 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800940e:	e02e      	b.n	800946e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7c1b      	ldrb	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d109      	bne.n	800942c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800941e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009420:	f107 020a 	add.w	r2, r7, #10
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	60f8      	str	r0, [r7, #12]
      break;
 800942a:	e020      	b.n	800946e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9da 	bl	80097e8 <USBD_CtlError>
      return;
 8009434:	e030      	b.n	8009498 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7c1b      	ldrb	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10d      	bne.n	800945a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009446:	f107 020a 	add.w	r2, r7, #10
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
 800944e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	2207      	movs	r2, #7
 8009456:	701a      	strb	r2, [r3, #0]
      break; 
 8009458:	e009      	b.n	800946e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9c3 	bl	80097e8 <USBD_CtlError>
      return;
 8009462:	e019      	b.n	8009498 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f9be 	bl	80097e8 <USBD_CtlError>
    return;
 800946c:	e014      	b.n	8009498 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800946e:	897b      	ldrh	r3, [r7, #10]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d011      	beq.n	8009498 <USBD_GetDescriptor+0x1e0>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	88db      	ldrh	r3, [r3, #6]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00d      	beq.n	8009498 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	88da      	ldrh	r2, [r3, #6]
 8009480:	897b      	ldrh	r3, [r7, #10]
 8009482:	4293      	cmp	r3, r2
 8009484:	bf28      	it	cs
 8009486:	4613      	movcs	r3, r2
 8009488:	b29b      	uxth	r3, r3
 800948a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800948c:	897b      	ldrh	r3, [r7, #10]
 800948e:	461a      	mov	r2, r3
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f9b9 	bl	800980a <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop

080094a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	889b      	ldrh	r3, [r3, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d12c      	bne.n	800950c <USBD_SetAddress+0x6c>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d128      	bne.n	800950c <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	885b      	ldrh	r3, [r3, #2]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d104      	bne.n	80094da <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f988 	bl	80097e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80094d8:	e01d      	b.n	8009516 <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7f9 f834 	bl	8002554 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f9cc 	bl	800988a <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009500:	e009      	b.n	8009516 <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800950a:	e004      	b.n	8009516 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f96a 	bl	80097e8 <USBD_CtlError>
  } 
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	b2da      	uxtb	r2, r3
 8009530:	4b3e      	ldr	r3, [pc, #248]	; (800962c <USBD_SetConfig+0x10c>)
 8009532:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8009534:	4b3d      	ldr	r3, [pc, #244]	; (800962c <USBD_SetConfig+0x10c>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d904      	bls.n	8009546 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f952 	bl	80097e8 <USBD_CtlError>
 8009544:	e06f      	b.n	8009626 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800954c:	2b02      	cmp	r3, #2
 800954e:	d002      	beq.n	8009556 <USBD_SetConfig+0x36>
 8009550:	2b03      	cmp	r3, #3
 8009552:	d023      	beq.n	800959c <USBD_SetConfig+0x7c>
 8009554:	e062      	b.n	800961c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8009556:	4b35      	ldr	r3, [pc, #212]	; (800962c <USBD_SetConfig+0x10c>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01a      	beq.n	8009594 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800955e:	4b33      	ldr	r3, [pc, #204]	; (800962c <USBD_SetConfig+0x10c>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2203      	movs	r2, #3
 800956c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009570:	4b2e      	ldr	r3, [pc, #184]	; (800962c <USBD_SetConfig+0x10c>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fb19 	bl	8008bae <USBD_SetClassConfig>
 800957c:	4603      	mov	r3, r0
 800957e:	2b02      	cmp	r3, #2
 8009580:	d104      	bne.n	800958c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f92f 	bl	80097e8 <USBD_CtlError>
          return;
 800958a:	e04c      	b.n	8009626 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f97c 	bl	800988a <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8009592:	e048      	b.n	8009626 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f978 	bl	800988a <USBD_CtlSendStatus>
      break;
 800959a:	e044      	b.n	8009626 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800959c:	4b23      	ldr	r3, [pc, #140]	; (800962c <USBD_SetConfig+0x10c>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d112      	bne.n	80095ca <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80095ac:	4b1f      	ldr	r3, [pc, #124]	; (800962c <USBD_SetConfig+0x10c>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80095b6:	4b1d      	ldr	r3, [pc, #116]	; (800962c <USBD_SetConfig+0x10c>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fb15 	bl	8008bec <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f961 	bl	800988a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095c8:	e02d      	b.n	8009626 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80095ca:	4b18      	ldr	r3, [pc, #96]	; (800962c <USBD_SetConfig+0x10c>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d01d      	beq.n	8009614 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fb03 	bl	8008bec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095e6:	4b11      	ldr	r3, [pc, #68]	; (800962c <USBD_SetConfig+0x10c>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80095f0:	4b0e      	ldr	r3, [pc, #56]	; (800962c <USBD_SetConfig+0x10c>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff fad9 	bl	8008bae <USBD_SetClassConfig>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d104      	bne.n	800960c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f8ef 	bl	80097e8 <USBD_CtlError>
          return;
 800960a:	e00c      	b.n	8009626 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f93c 	bl	800988a <USBD_CtlSendStatus>
      break;
 8009612:	e008      	b.n	8009626 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f938 	bl	800988a <USBD_CtlSendStatus>
      break;
 800961a:	e004      	b.n	8009626 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f8e2 	bl	80097e8 <USBD_CtlError>
      break;
 8009624:	bf00      	nop
    }
  }
}
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	200000f0 	.word	0x200000f0

08009630 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	88db      	ldrh	r3, [r3, #6]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d004      	beq.n	800964c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f8cf 	bl	80097e8 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800964a:	e01f      	b.n	800968c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009652:	2b02      	cmp	r3, #2
 8009654:	d002      	beq.n	800965c <USBD_GetConfig+0x2c>
 8009656:	2b03      	cmp	r3, #3
 8009658:	d00b      	beq.n	8009672 <USBD_GetConfig+0x42>
 800965a:	e012      	b.n	8009682 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8009666:	2201      	movs	r2, #1
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f8cd 	bl	800980a <USBD_CtlSendData>
      break;
 8009670:	e00c      	b.n	800968c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8009676:	2201      	movs	r2, #1
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f8c5 	bl	800980a <USBD_CtlSendData>
      break;
 8009680:	e004      	b.n	800968c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f8af 	bl	80097e8 <USBD_CtlError>
      break;
 800968a:	bf00      	nop
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80096a4:	3b02      	subs	r3, #2
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d815      	bhi.n	80096d6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f043 0202 	orr.w	r2, r3, #2
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80096ca:	2202      	movs	r2, #2
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f89b 	bl	800980a <USBD_CtlSendData>
                      2);
    break;
 80096d4:	e004      	b.n	80096e0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f885 	bl	80097e8 <USBD_CtlError>
    break;
 80096de:	bf00      	nop
  }
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10d      	bne.n	8009716 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8ba 	bl	800988a <USBD_CtlSendStatus>
  }

}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800972e:	3b02      	subs	r3, #2
 8009730:	2b01      	cmp	r3, #1
 8009732:	d812      	bhi.n	800975a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	885b      	ldrh	r3, [r3, #2]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d113      	bne.n	8009764 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f899 	bl	800988a <USBD_CtlSendStatus>
    }
    break;
 8009758:	e004      	b.n	8009764 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f843 	bl	80097e8 <USBD_CtlError>
    break;
 8009762:	e000      	b.n	8009766 <USBD_ClrFeature+0x48>
    break;
 8009764:	bf00      	nop
  }
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	785a      	ldrb	r2, [r3, #1]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3302      	adds	r3, #2
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b29a      	uxth	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	3303      	adds	r3, #3
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	b29b      	uxth	r3, r3
 800979c:	4413      	add	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	3304      	adds	r3, #4
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	3305      	adds	r3, #5
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	3306      	adds	r3, #6
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	3307      	adds	r3, #7
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	80da      	strh	r2, [r3, #6]

}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80097f2:	2180      	movs	r1, #128	; 0x80
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7f8 fe5b 	bl	80024b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7f8 fe57 	bl	80024b0 <USBD_LL_StallEP>
}
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	4613      	mov	r3, r2
 8009816:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2202      	movs	r2, #2
 800981c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800982c:	88fb      	ldrh	r3, [r7, #6]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7f8 fea1 	bl	800257a <USBD_LL_Transmit>
  
  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	4613      	mov	r3, r2
 800984e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009850:	88fb      	ldrh	r3, [r7, #6]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	2100      	movs	r1, #0
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7f8 fe8f 	bl	800257a <USBD_LL_Transmit>
  
  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	4613      	mov	r3, r2
 8009872:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8009874:	88fb      	ldrh	r3, [r7, #6]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7f8 fe94 	bl	80025a8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2204      	movs	r2, #4
 8009896:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800989a:	2300      	movs	r3, #0
 800989c:	2200      	movs	r2, #0
 800989e:	2100      	movs	r1, #0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7f8 fe6a 	bl	800257a <USBD_LL_Transmit>
  
  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2205      	movs	r2, #5
 80098bc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80098c0:	2300      	movs	r3, #0
 80098c2:	2200      	movs	r2, #0
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7f8 fe6e 	bl	80025a8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4d0d      	ldr	r5, [pc, #52]	; (8009910 <__libc_init_array+0x38>)
 80098dc:	4c0d      	ldr	r4, [pc, #52]	; (8009914 <__libc_init_array+0x3c>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	2600      	movs	r6, #0
 80098e4:	42a6      	cmp	r6, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	4d0b      	ldr	r5, [pc, #44]	; (8009918 <__libc_init_array+0x40>)
 80098ea:	4c0c      	ldr	r4, [pc, #48]	; (800991c <__libc_init_array+0x44>)
 80098ec:	f000 fc6e 	bl	800a1cc <_init>
 80098f0:	1b64      	subs	r4, r4, r5
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	2600      	movs	r6, #0
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009900:	4798      	blx	r3
 8009902:	3601      	adds	r6, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f855 3b04 	ldr.w	r3, [r5], #4
 800990a:	4798      	blx	r3
 800990c:	3601      	adds	r6, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	0800a608 	.word	0x0800a608
 8009914:	0800a608 	.word	0x0800a608
 8009918:	0800a608 	.word	0x0800a608
 800991c:	0800a60c 	.word	0x0800a60c

08009920 <memcpy>:
 8009920:	440a      	add	r2, r1
 8009922:	4291      	cmp	r1, r2
 8009924:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009928:	d100      	bne.n	800992c <memcpy+0xc>
 800992a:	4770      	bx	lr
 800992c:	b510      	push	{r4, lr}
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009936:	4291      	cmp	r1, r2
 8009938:	d1f9      	bne.n	800992e <memcpy+0xe>
 800993a:	bd10      	pop	{r4, pc}

0800993c <_free_r>:
 800993c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800993e:	2900      	cmp	r1, #0
 8009940:	d048      	beq.n	80099d4 <_free_r+0x98>
 8009942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009946:	9001      	str	r0, [sp, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f1a1 0404 	sub.w	r4, r1, #4
 800994e:	bfb8      	it	lt
 8009950:	18e4      	addlt	r4, r4, r3
 8009952:	f000 f8e7 	bl	8009b24 <__malloc_lock>
 8009956:	4a20      	ldr	r2, [pc, #128]	; (80099d8 <_free_r+0x9c>)
 8009958:	9801      	ldr	r0, [sp, #4]
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	4615      	mov	r5, r2
 800995e:	b933      	cbnz	r3, 800996e <_free_r+0x32>
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	6014      	str	r4, [r2, #0]
 8009964:	b003      	add	sp, #12
 8009966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800996a:	f000 b8e1 	b.w	8009b30 <__malloc_unlock>
 800996e:	42a3      	cmp	r3, r4
 8009970:	d90b      	bls.n	800998a <_free_r+0x4e>
 8009972:	6821      	ldr	r1, [r4, #0]
 8009974:	1862      	adds	r2, r4, r1
 8009976:	4293      	cmp	r3, r2
 8009978:	bf04      	itt	eq
 800997a:	681a      	ldreq	r2, [r3, #0]
 800997c:	685b      	ldreq	r3, [r3, #4]
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	bf04      	itt	eq
 8009982:	1852      	addeq	r2, r2, r1
 8009984:	6022      	streq	r2, [r4, #0]
 8009986:	602c      	str	r4, [r5, #0]
 8009988:	e7ec      	b.n	8009964 <_free_r+0x28>
 800998a:	461a      	mov	r2, r3
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b10b      	cbz	r3, 8009994 <_free_r+0x58>
 8009990:	42a3      	cmp	r3, r4
 8009992:	d9fa      	bls.n	800998a <_free_r+0x4e>
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	1855      	adds	r5, r2, r1
 8009998:	42a5      	cmp	r5, r4
 800999a:	d10b      	bne.n	80099b4 <_free_r+0x78>
 800999c:	6824      	ldr	r4, [r4, #0]
 800999e:	4421      	add	r1, r4
 80099a0:	1854      	adds	r4, r2, r1
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	d1dd      	bne.n	8009964 <_free_r+0x28>
 80099a8:	681c      	ldr	r4, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	6053      	str	r3, [r2, #4]
 80099ae:	4421      	add	r1, r4
 80099b0:	6011      	str	r1, [r2, #0]
 80099b2:	e7d7      	b.n	8009964 <_free_r+0x28>
 80099b4:	d902      	bls.n	80099bc <_free_r+0x80>
 80099b6:	230c      	movs	r3, #12
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	e7d3      	b.n	8009964 <_free_r+0x28>
 80099bc:	6825      	ldr	r5, [r4, #0]
 80099be:	1961      	adds	r1, r4, r5
 80099c0:	428b      	cmp	r3, r1
 80099c2:	bf04      	itt	eq
 80099c4:	6819      	ldreq	r1, [r3, #0]
 80099c6:	685b      	ldreq	r3, [r3, #4]
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	bf04      	itt	eq
 80099cc:	1949      	addeq	r1, r1, r5
 80099ce:	6021      	streq	r1, [r4, #0]
 80099d0:	6054      	str	r4, [r2, #4]
 80099d2:	e7c7      	b.n	8009964 <_free_r+0x28>
 80099d4:	b003      	add	sp, #12
 80099d6:	bd30      	pop	{r4, r5, pc}
 80099d8:	200000f4 	.word	0x200000f4

080099dc <_malloc_r>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	1ccd      	adds	r5, r1, #3
 80099e0:	f025 0503 	bic.w	r5, r5, #3
 80099e4:	3508      	adds	r5, #8
 80099e6:	2d0c      	cmp	r5, #12
 80099e8:	bf38      	it	cc
 80099ea:	250c      	movcc	r5, #12
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	4606      	mov	r6, r0
 80099f0:	db01      	blt.n	80099f6 <_malloc_r+0x1a>
 80099f2:	42a9      	cmp	r1, r5
 80099f4:	d903      	bls.n	80099fe <_malloc_r+0x22>
 80099f6:	230c      	movs	r3, #12
 80099f8:	6033      	str	r3, [r6, #0]
 80099fa:	2000      	movs	r0, #0
 80099fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fe:	f000 f891 	bl	8009b24 <__malloc_lock>
 8009a02:	4921      	ldr	r1, [pc, #132]	; (8009a88 <_malloc_r+0xac>)
 8009a04:	680a      	ldr	r2, [r1, #0]
 8009a06:	4614      	mov	r4, r2
 8009a08:	b99c      	cbnz	r4, 8009a32 <_malloc_r+0x56>
 8009a0a:	4f20      	ldr	r7, [pc, #128]	; (8009a8c <_malloc_r+0xb0>)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	b923      	cbnz	r3, 8009a1a <_malloc_r+0x3e>
 8009a10:	4621      	mov	r1, r4
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f83c 	bl	8009a90 <_sbrk_r>
 8009a18:	6038      	str	r0, [r7, #0]
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f000 f837 	bl	8009a90 <_sbrk_r>
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	d123      	bne.n	8009a6e <_malloc_r+0x92>
 8009a26:	230c      	movs	r3, #12
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f000 f880 	bl	8009b30 <__malloc_unlock>
 8009a30:	e7e3      	b.n	80099fa <_malloc_r+0x1e>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	1b5b      	subs	r3, r3, r5
 8009a36:	d417      	bmi.n	8009a68 <_malloc_r+0x8c>
 8009a38:	2b0b      	cmp	r3, #11
 8009a3a:	d903      	bls.n	8009a44 <_malloc_r+0x68>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	441c      	add	r4, r3
 8009a40:	6025      	str	r5, [r4, #0]
 8009a42:	e004      	b.n	8009a4e <_malloc_r+0x72>
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	42a2      	cmp	r2, r4
 8009a48:	bf0c      	ite	eq
 8009a4a:	600b      	streq	r3, [r1, #0]
 8009a4c:	6053      	strne	r3, [r2, #4]
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 f86e 	bl	8009b30 <__malloc_unlock>
 8009a54:	f104 000b 	add.w	r0, r4, #11
 8009a58:	1d23      	adds	r3, r4, #4
 8009a5a:	f020 0007 	bic.w	r0, r0, #7
 8009a5e:	1ac2      	subs	r2, r0, r3
 8009a60:	d0cc      	beq.n	80099fc <_malloc_r+0x20>
 8009a62:	1a1b      	subs	r3, r3, r0
 8009a64:	50a3      	str	r3, [r4, r2]
 8009a66:	e7c9      	b.n	80099fc <_malloc_r+0x20>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	6864      	ldr	r4, [r4, #4]
 8009a6c:	e7cc      	b.n	8009a08 <_malloc_r+0x2c>
 8009a6e:	1cc4      	adds	r4, r0, #3
 8009a70:	f024 0403 	bic.w	r4, r4, #3
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	d0e3      	beq.n	8009a40 <_malloc_r+0x64>
 8009a78:	1a21      	subs	r1, r4, r0
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 f808 	bl	8009a90 <_sbrk_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d1dd      	bne.n	8009a40 <_malloc_r+0x64>
 8009a84:	e7cf      	b.n	8009a26 <_malloc_r+0x4a>
 8009a86:	bf00      	nop
 8009a88:	200000f4 	.word	0x200000f4
 8009a8c:	200000f8 	.word	0x200000f8

08009a90 <_sbrk_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_sbrk_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f000 fb88 	bl	800a1b0 <_sbrk>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_sbrk_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_sbrk_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20000d54 	.word	0x20000d54

08009ab0 <_vsniprintf_r>:
 8009ab0:	b530      	push	{r4, r5, lr}
 8009ab2:	1e14      	subs	r4, r2, #0
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	b09b      	sub	sp, #108	; 0x6c
 8009ab8:	4618      	mov	r0, r3
 8009aba:	da05      	bge.n	8009ac8 <_vsniprintf_r+0x18>
 8009abc:	238b      	movs	r3, #139	; 0x8b
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac4:	b01b      	add	sp, #108	; 0x6c
 8009ac6:	bd30      	pop	{r4, r5, pc}
 8009ac8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009acc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ad0:	bf14      	ite	ne
 8009ad2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009ad6:	4623      	moveq	r3, r4
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ae0:	9100      	str	r1, [sp, #0]
 8009ae2:	9104      	str	r1, [sp, #16]
 8009ae4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ae8:	4602      	mov	r2, r0
 8009aea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009aec:	4669      	mov	r1, sp
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 f880 	bl	8009bf4 <_svfiprintf_r>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	bfbc      	itt	lt
 8009af8:	238b      	movlt	r3, #139	; 0x8b
 8009afa:	602b      	strlt	r3, [r5, #0]
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d0e1      	beq.n	8009ac4 <_vsniprintf_r+0x14>
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e7dd      	b.n	8009ac4 <_vsniprintf_r+0x14>

08009b08 <vsniprintf>:
 8009b08:	b507      	push	{r0, r1, r2, lr}
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	460a      	mov	r2, r1
 8009b10:	4601      	mov	r1, r0
 8009b12:	4803      	ldr	r0, [pc, #12]	; (8009b20 <vsniprintf+0x18>)
 8009b14:	6800      	ldr	r0, [r0, #0]
 8009b16:	f7ff ffcb 	bl	8009ab0 <_vsniprintf_r>
 8009b1a:	b003      	add	sp, #12
 8009b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b20:	20000018 	.word	0x20000018

08009b24 <__malloc_lock>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__malloc_lock+0x8>)
 8009b26:	f000 baf9 	b.w	800a11c <__retarget_lock_acquire_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20000d5c 	.word	0x20000d5c

08009b30 <__malloc_unlock>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__malloc_unlock+0x8>)
 8009b32:	f000 baf4 	b.w	800a11e <__retarget_lock_release_recursive>
 8009b36:	bf00      	nop
 8009b38:	20000d5c 	.word	0x20000d5c

08009b3c <__ssputs_r>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	688e      	ldr	r6, [r1, #8]
 8009b42:	429e      	cmp	r6, r3
 8009b44:	4682      	mov	sl, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	4690      	mov	r8, r2
 8009b4a:	461f      	mov	r7, r3
 8009b4c:	d838      	bhi.n	8009bc0 <__ssputs_r+0x84>
 8009b4e:	898a      	ldrh	r2, [r1, #12]
 8009b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b54:	d032      	beq.n	8009bbc <__ssputs_r+0x80>
 8009b56:	6825      	ldr	r5, [r4, #0]
 8009b58:	6909      	ldr	r1, [r1, #16]
 8009b5a:	eba5 0901 	sub.w	r9, r5, r1
 8009b5e:	6965      	ldr	r5, [r4, #20]
 8009b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b68:	3301      	adds	r3, #1
 8009b6a:	444b      	add	r3, r9
 8009b6c:	106d      	asrs	r5, r5, #1
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	bf38      	it	cc
 8009b72:	461d      	movcc	r5, r3
 8009b74:	0553      	lsls	r3, r2, #21
 8009b76:	d531      	bpl.n	8009bdc <__ssputs_r+0xa0>
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7ff ff2f 	bl	80099dc <_malloc_r>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	b950      	cbnz	r0, 8009b98 <__ssputs_r+0x5c>
 8009b82:	230c      	movs	r3, #12
 8009b84:	f8ca 3000 	str.w	r3, [sl]
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8e:	81a3      	strh	r3, [r4, #12]
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b98:	6921      	ldr	r1, [r4, #16]
 8009b9a:	464a      	mov	r2, r9
 8009b9c:	f7ff fec0 	bl	8009920 <memcpy>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	6126      	str	r6, [r4, #16]
 8009bae:	6165      	str	r5, [r4, #20]
 8009bb0:	444e      	add	r6, r9
 8009bb2:	eba5 0509 	sub.w	r5, r5, r9
 8009bb6:	6026      	str	r6, [r4, #0]
 8009bb8:	60a5      	str	r5, [r4, #8]
 8009bba:	463e      	mov	r6, r7
 8009bbc:	42be      	cmp	r6, r7
 8009bbe:	d900      	bls.n	8009bc2 <__ssputs_r+0x86>
 8009bc0:	463e      	mov	r6, r7
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	6820      	ldr	r0, [r4, #0]
 8009bc6:	4641      	mov	r1, r8
 8009bc8:	f000 faaa 	bl	800a120 <memmove>
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	1b9b      	subs	r3, r3, r6
 8009bd2:	4432      	add	r2, r6
 8009bd4:	60a3      	str	r3, [r4, #8]
 8009bd6:	6022      	str	r2, [r4, #0]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7db      	b.n	8009b94 <__ssputs_r+0x58>
 8009bdc:	462a      	mov	r2, r5
 8009bde:	f000 fab9 	bl	800a154 <_realloc_r>
 8009be2:	4606      	mov	r6, r0
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d1e1      	bne.n	8009bac <__ssputs_r+0x70>
 8009be8:	6921      	ldr	r1, [r4, #16]
 8009bea:	4650      	mov	r0, sl
 8009bec:	f7ff fea6 	bl	800993c <_free_r>
 8009bf0:	e7c7      	b.n	8009b82 <__ssputs_r+0x46>
	...

08009bf4 <_svfiprintf_r>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	4698      	mov	r8, r3
 8009bfa:	898b      	ldrh	r3, [r1, #12]
 8009bfc:	061b      	lsls	r3, r3, #24
 8009bfe:	b09d      	sub	sp, #116	; 0x74
 8009c00:	4607      	mov	r7, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	4614      	mov	r4, r2
 8009c06:	d50e      	bpl.n	8009c26 <_svfiprintf_r+0x32>
 8009c08:	690b      	ldr	r3, [r1, #16]
 8009c0a:	b963      	cbnz	r3, 8009c26 <_svfiprintf_r+0x32>
 8009c0c:	2140      	movs	r1, #64	; 0x40
 8009c0e:	f7ff fee5 	bl	80099dc <_malloc_r>
 8009c12:	6028      	str	r0, [r5, #0]
 8009c14:	6128      	str	r0, [r5, #16]
 8009c16:	b920      	cbnz	r0, 8009c22 <_svfiprintf_r+0x2e>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c20:	e0d1      	b.n	8009dc6 <_svfiprintf_r+0x1d2>
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	616b      	str	r3, [r5, #20]
 8009c26:	2300      	movs	r3, #0
 8009c28:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2a:	2320      	movs	r3, #32
 8009c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c34:	2330      	movs	r3, #48	; 0x30
 8009c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009de0 <_svfiprintf_r+0x1ec>
 8009c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c3e:	f04f 0901 	mov.w	r9, #1
 8009c42:	4623      	mov	r3, r4
 8009c44:	469a      	mov	sl, r3
 8009c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c4a:	b10a      	cbz	r2, 8009c50 <_svfiprintf_r+0x5c>
 8009c4c:	2a25      	cmp	r2, #37	; 0x25
 8009c4e:	d1f9      	bne.n	8009c44 <_svfiprintf_r+0x50>
 8009c50:	ebba 0b04 	subs.w	fp, sl, r4
 8009c54:	d00b      	beq.n	8009c6e <_svfiprintf_r+0x7a>
 8009c56:	465b      	mov	r3, fp
 8009c58:	4622      	mov	r2, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff ff6d 	bl	8009b3c <__ssputs_r>
 8009c62:	3001      	adds	r0, #1
 8009c64:	f000 80aa 	beq.w	8009dbc <_svfiprintf_r+0x1c8>
 8009c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c6a:	445a      	add	r2, fp
 8009c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80a2 	beq.w	8009dbc <_svfiprintf_r+0x1c8>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c82:	f10a 0a01 	add.w	sl, sl, #1
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c90:	4654      	mov	r4, sl
 8009c92:	2205      	movs	r2, #5
 8009c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c98:	4851      	ldr	r0, [pc, #324]	; (8009de0 <_svfiprintf_r+0x1ec>)
 8009c9a:	f7f6 faa1 	bl	80001e0 <memchr>
 8009c9e:	9a04      	ldr	r2, [sp, #16]
 8009ca0:	b9d8      	cbnz	r0, 8009cda <_svfiprintf_r+0xe6>
 8009ca2:	06d0      	lsls	r0, r2, #27
 8009ca4:	bf44      	itt	mi
 8009ca6:	2320      	movmi	r3, #32
 8009ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cac:	0711      	lsls	r1, r2, #28
 8009cae:	bf44      	itt	mi
 8009cb0:	232b      	movmi	r3, #43	; 0x2b
 8009cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cba:	2b2a      	cmp	r3, #42	; 0x2a
 8009cbc:	d015      	beq.n	8009cea <_svfiprintf_r+0xf6>
 8009cbe:	9a07      	ldr	r2, [sp, #28]
 8009cc0:	4654      	mov	r4, sl
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	f04f 0c0a 	mov.w	ip, #10
 8009cc8:	4621      	mov	r1, r4
 8009cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cce:	3b30      	subs	r3, #48	; 0x30
 8009cd0:	2b09      	cmp	r3, #9
 8009cd2:	d94e      	bls.n	8009d72 <_svfiprintf_r+0x17e>
 8009cd4:	b1b0      	cbz	r0, 8009d04 <_svfiprintf_r+0x110>
 8009cd6:	9207      	str	r2, [sp, #28]
 8009cd8:	e014      	b.n	8009d04 <_svfiprintf_r+0x110>
 8009cda:	eba0 0308 	sub.w	r3, r0, r8
 8009cde:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	46a2      	mov	sl, r4
 8009ce8:	e7d2      	b.n	8009c90 <_svfiprintf_r+0x9c>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	1d19      	adds	r1, r3, #4
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	9103      	str	r1, [sp, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfbb      	ittet	lt
 8009cf6:	425b      	neglt	r3, r3
 8009cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfc:	9307      	strge	r3, [sp, #28]
 8009cfe:	9307      	strlt	r3, [sp, #28]
 8009d00:	bfb8      	it	lt
 8009d02:	9204      	strlt	r2, [sp, #16]
 8009d04:	7823      	ldrb	r3, [r4, #0]
 8009d06:	2b2e      	cmp	r3, #46	; 0x2e
 8009d08:	d10c      	bne.n	8009d24 <_svfiprintf_r+0x130>
 8009d0a:	7863      	ldrb	r3, [r4, #1]
 8009d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0e:	d135      	bne.n	8009d7c <_svfiprintf_r+0x188>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	9203      	str	r2, [sp, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfb8      	it	lt
 8009d1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d20:	3402      	adds	r4, #2
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009df0 <_svfiprintf_r+0x1fc>
 8009d28:	7821      	ldrb	r1, [r4, #0]
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	f7f6 fa57 	bl	80001e0 <memchr>
 8009d32:	b140      	cbz	r0, 8009d46 <_svfiprintf_r+0x152>
 8009d34:	2340      	movs	r3, #64	; 0x40
 8009d36:	eba0 000a 	sub.w	r0, r0, sl
 8009d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	4303      	orrs	r3, r0
 8009d42:	3401      	adds	r4, #1
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4a:	4826      	ldr	r0, [pc, #152]	; (8009de4 <_svfiprintf_r+0x1f0>)
 8009d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d50:	2206      	movs	r2, #6
 8009d52:	f7f6 fa45 	bl	80001e0 <memchr>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d038      	beq.n	8009dcc <_svfiprintf_r+0x1d8>
 8009d5a:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <_svfiprintf_r+0x1f4>)
 8009d5c:	bb1b      	cbnz	r3, 8009da6 <_svfiprintf_r+0x1b2>
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	3307      	adds	r3, #7
 8009d62:	f023 0307 	bic.w	r3, r3, #7
 8009d66:	3308      	adds	r3, #8
 8009d68:	9303      	str	r3, [sp, #12]
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	4433      	add	r3, r6
 8009d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d70:	e767      	b.n	8009c42 <_svfiprintf_r+0x4e>
 8009d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d76:	460c      	mov	r4, r1
 8009d78:	2001      	movs	r0, #1
 8009d7a:	e7a5      	b.n	8009cc8 <_svfiprintf_r+0xd4>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	3401      	adds	r4, #1
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	4619      	mov	r1, r3
 8009d84:	f04f 0c0a 	mov.w	ip, #10
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8e:	3a30      	subs	r2, #48	; 0x30
 8009d90:	2a09      	cmp	r2, #9
 8009d92:	d903      	bls.n	8009d9c <_svfiprintf_r+0x1a8>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0c5      	beq.n	8009d24 <_svfiprintf_r+0x130>
 8009d98:	9105      	str	r1, [sp, #20]
 8009d9a:	e7c3      	b.n	8009d24 <_svfiprintf_r+0x130>
 8009d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009da0:	4604      	mov	r4, r0
 8009da2:	2301      	movs	r3, #1
 8009da4:	e7f0      	b.n	8009d88 <_svfiprintf_r+0x194>
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462a      	mov	r2, r5
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <_svfiprintf_r+0x1f8>)
 8009dae:	a904      	add	r1, sp, #16
 8009db0:	4638      	mov	r0, r7
 8009db2:	f3af 8000 	nop.w
 8009db6:	1c42      	adds	r2, r0, #1
 8009db8:	4606      	mov	r6, r0
 8009dba:	d1d6      	bne.n	8009d6a <_svfiprintf_r+0x176>
 8009dbc:	89ab      	ldrh	r3, [r5, #12]
 8009dbe:	065b      	lsls	r3, r3, #25
 8009dc0:	f53f af2c 	bmi.w	8009c1c <_svfiprintf_r+0x28>
 8009dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dc6:	b01d      	add	sp, #116	; 0x74
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	4b06      	ldr	r3, [pc, #24]	; (8009dec <_svfiprintf_r+0x1f8>)
 8009dd4:	a904      	add	r1, sp, #16
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f000 f87a 	bl	8009ed0 <_printf_i>
 8009ddc:	e7eb      	b.n	8009db6 <_svfiprintf_r+0x1c2>
 8009dde:	bf00      	nop
 8009de0:	0800a5d4 	.word	0x0800a5d4
 8009de4:	0800a5de 	.word	0x0800a5de
 8009de8:	00000000 	.word	0x00000000
 8009dec:	08009b3d 	.word	0x08009b3d
 8009df0:	0800a5da 	.word	0x0800a5da

08009df4 <_printf_common>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	4616      	mov	r6, r2
 8009dfa:	4699      	mov	r9, r3
 8009dfc:	688a      	ldr	r2, [r1, #8]
 8009dfe:	690b      	ldr	r3, [r1, #16]
 8009e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	bfb8      	it	lt
 8009e08:	4613      	movlt	r3, r2
 8009e0a:	6033      	str	r3, [r6, #0]
 8009e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e10:	4607      	mov	r7, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	b10a      	cbz	r2, 8009e1a <_printf_common+0x26>
 8009e16:	3301      	adds	r3, #1
 8009e18:	6033      	str	r3, [r6, #0]
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	0699      	lsls	r1, r3, #26
 8009e1e:	bf42      	ittt	mi
 8009e20:	6833      	ldrmi	r3, [r6, #0]
 8009e22:	3302      	addmi	r3, #2
 8009e24:	6033      	strmi	r3, [r6, #0]
 8009e26:	6825      	ldr	r5, [r4, #0]
 8009e28:	f015 0506 	ands.w	r5, r5, #6
 8009e2c:	d106      	bne.n	8009e3c <_printf_common+0x48>
 8009e2e:	f104 0a19 	add.w	sl, r4, #25
 8009e32:	68e3      	ldr	r3, [r4, #12]
 8009e34:	6832      	ldr	r2, [r6, #0]
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	dc26      	bgt.n	8009e8a <_printf_common+0x96>
 8009e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e40:	1e13      	subs	r3, r2, #0
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	bf18      	it	ne
 8009e46:	2301      	movne	r3, #1
 8009e48:	0692      	lsls	r2, r2, #26
 8009e4a:	d42b      	bmi.n	8009ea4 <_printf_common+0xb0>
 8009e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e50:	4649      	mov	r1, r9
 8009e52:	4638      	mov	r0, r7
 8009e54:	47c0      	blx	r8
 8009e56:	3001      	adds	r0, #1
 8009e58:	d01e      	beq.n	8009e98 <_printf_common+0xa4>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	68e5      	ldr	r5, [r4, #12]
 8009e5e:	6832      	ldr	r2, [r6, #0]
 8009e60:	f003 0306 	and.w	r3, r3, #6
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	bf08      	it	eq
 8009e68:	1aad      	subeq	r5, r5, r2
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	6922      	ldr	r2, [r4, #16]
 8009e6e:	bf0c      	ite	eq
 8009e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e74:	2500      	movne	r5, #0
 8009e76:	4293      	cmp	r3, r2
 8009e78:	bfc4      	itt	gt
 8009e7a:	1a9b      	subgt	r3, r3, r2
 8009e7c:	18ed      	addgt	r5, r5, r3
 8009e7e:	2600      	movs	r6, #0
 8009e80:	341a      	adds	r4, #26
 8009e82:	42b5      	cmp	r5, r6
 8009e84:	d11a      	bne.n	8009ebc <_printf_common+0xc8>
 8009e86:	2000      	movs	r0, #0
 8009e88:	e008      	b.n	8009e9c <_printf_common+0xa8>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4638      	mov	r0, r7
 8009e92:	47c0      	blx	r8
 8009e94:	3001      	adds	r0, #1
 8009e96:	d103      	bne.n	8009ea0 <_printf_common+0xac>
 8009e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	e7c6      	b.n	8009e32 <_printf_common+0x3e>
 8009ea4:	18e1      	adds	r1, r4, r3
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	2030      	movs	r0, #48	; 0x30
 8009eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eae:	4422      	add	r2, r4
 8009eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009eb8:	3302      	adds	r3, #2
 8009eba:	e7c7      	b.n	8009e4c <_printf_common+0x58>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	47c0      	blx	r8
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d0e6      	beq.n	8009e98 <_printf_common+0xa4>
 8009eca:	3601      	adds	r6, #1
 8009ecc:	e7d9      	b.n	8009e82 <_printf_common+0x8e>
	...

08009ed0 <_printf_i>:
 8009ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	7e27      	ldrb	r7, [r4, #24]
 8009eda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009edc:	2f78      	cmp	r7, #120	; 0x78
 8009ede:	4680      	mov	r8, r0
 8009ee0:	469a      	mov	sl, r3
 8009ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ee6:	d807      	bhi.n	8009ef8 <_printf_i+0x28>
 8009ee8:	2f62      	cmp	r7, #98	; 0x62
 8009eea:	d80a      	bhi.n	8009f02 <_printf_i+0x32>
 8009eec:	2f00      	cmp	r7, #0
 8009eee:	f000 80d8 	beq.w	800a0a2 <_printf_i+0x1d2>
 8009ef2:	2f58      	cmp	r7, #88	; 0x58
 8009ef4:	f000 80a3 	beq.w	800a03e <_printf_i+0x16e>
 8009ef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f00:	e03a      	b.n	8009f78 <_printf_i+0xa8>
 8009f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f06:	2b15      	cmp	r3, #21
 8009f08:	d8f6      	bhi.n	8009ef8 <_printf_i+0x28>
 8009f0a:	a001      	add	r0, pc, #4	; (adr r0, 8009f10 <_printf_i+0x40>)
 8009f0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f7d 	.word	0x08009f7d
 8009f18:	08009ef9 	.word	0x08009ef9
 8009f1c:	08009ef9 	.word	0x08009ef9
 8009f20:	08009ef9 	.word	0x08009ef9
 8009f24:	08009ef9 	.word	0x08009ef9
 8009f28:	08009f7d 	.word	0x08009f7d
 8009f2c:	08009ef9 	.word	0x08009ef9
 8009f30:	08009ef9 	.word	0x08009ef9
 8009f34:	08009ef9 	.word	0x08009ef9
 8009f38:	08009ef9 	.word	0x08009ef9
 8009f3c:	0800a089 	.word	0x0800a089
 8009f40:	08009fad 	.word	0x08009fad
 8009f44:	0800a06b 	.word	0x0800a06b
 8009f48:	08009ef9 	.word	0x08009ef9
 8009f4c:	08009ef9 	.word	0x08009ef9
 8009f50:	0800a0ab 	.word	0x0800a0ab
 8009f54:	08009ef9 	.word	0x08009ef9
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009ef9 	.word	0x08009ef9
 8009f60:	08009ef9 	.word	0x08009ef9
 8009f64:	0800a073 	.word	0x0800a073
 8009f68:	680b      	ldr	r3, [r1, #0]
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	600a      	str	r2, [r1, #0]
 8009f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e0a3      	b.n	800a0c4 <_printf_i+0x1f4>
 8009f7c:	6825      	ldr	r5, [r4, #0]
 8009f7e:	6808      	ldr	r0, [r1, #0]
 8009f80:	062e      	lsls	r6, r5, #24
 8009f82:	f100 0304 	add.w	r3, r0, #4
 8009f86:	d50a      	bpl.n	8009f9e <_printf_i+0xce>
 8009f88:	6805      	ldr	r5, [r0, #0]
 8009f8a:	600b      	str	r3, [r1, #0]
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	da03      	bge.n	8009f98 <_printf_i+0xc8>
 8009f90:	232d      	movs	r3, #45	; 0x2d
 8009f92:	426d      	negs	r5, r5
 8009f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f98:	485e      	ldr	r0, [pc, #376]	; (800a114 <_printf_i+0x244>)
 8009f9a:	230a      	movs	r3, #10
 8009f9c:	e019      	b.n	8009fd2 <_printf_i+0x102>
 8009f9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fa2:	6805      	ldr	r5, [r0, #0]
 8009fa4:	600b      	str	r3, [r1, #0]
 8009fa6:	bf18      	it	ne
 8009fa8:	b22d      	sxthne	r5, r5
 8009faa:	e7ef      	b.n	8009f8c <_printf_i+0xbc>
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	6825      	ldr	r5, [r4, #0]
 8009fb0:	1d18      	adds	r0, r3, #4
 8009fb2:	6008      	str	r0, [r1, #0]
 8009fb4:	0628      	lsls	r0, r5, #24
 8009fb6:	d501      	bpl.n	8009fbc <_printf_i+0xec>
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	e002      	b.n	8009fc2 <_printf_i+0xf2>
 8009fbc:	0669      	lsls	r1, r5, #25
 8009fbe:	d5fb      	bpl.n	8009fb8 <_printf_i+0xe8>
 8009fc0:	881d      	ldrh	r5, [r3, #0]
 8009fc2:	4854      	ldr	r0, [pc, #336]	; (800a114 <_printf_i+0x244>)
 8009fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8009fc6:	bf0c      	ite	eq
 8009fc8:	2308      	moveq	r3, #8
 8009fca:	230a      	movne	r3, #10
 8009fcc:	2100      	movs	r1, #0
 8009fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fd2:	6866      	ldr	r6, [r4, #4]
 8009fd4:	60a6      	str	r6, [r4, #8]
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	bfa2      	ittt	ge
 8009fda:	6821      	ldrge	r1, [r4, #0]
 8009fdc:	f021 0104 	bicge.w	r1, r1, #4
 8009fe0:	6021      	strge	r1, [r4, #0]
 8009fe2:	b90d      	cbnz	r5, 8009fe8 <_printf_i+0x118>
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	d04d      	beq.n	800a084 <_printf_i+0x1b4>
 8009fe8:	4616      	mov	r6, r2
 8009fea:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fee:	fb03 5711 	mls	r7, r3, r1, r5
 8009ff2:	5dc7      	ldrb	r7, [r0, r7]
 8009ff4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ff8:	462f      	mov	r7, r5
 8009ffa:	42bb      	cmp	r3, r7
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	d9f4      	bls.n	8009fea <_printf_i+0x11a>
 800a000:	2b08      	cmp	r3, #8
 800a002:	d10b      	bne.n	800a01c <_printf_i+0x14c>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	07df      	lsls	r7, r3, #31
 800a008:	d508      	bpl.n	800a01c <_printf_i+0x14c>
 800a00a:	6923      	ldr	r3, [r4, #16]
 800a00c:	6861      	ldr	r1, [r4, #4]
 800a00e:	4299      	cmp	r1, r3
 800a010:	bfde      	ittt	le
 800a012:	2330      	movle	r3, #48	; 0x30
 800a014:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a018:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a01c:	1b92      	subs	r2, r2, r6
 800a01e:	6122      	str	r2, [r4, #16]
 800a020:	f8cd a000 	str.w	sl, [sp]
 800a024:	464b      	mov	r3, r9
 800a026:	aa03      	add	r2, sp, #12
 800a028:	4621      	mov	r1, r4
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7ff fee2 	bl	8009df4 <_printf_common>
 800a030:	3001      	adds	r0, #1
 800a032:	d14c      	bne.n	800a0ce <_printf_i+0x1fe>
 800a034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a038:	b004      	add	sp, #16
 800a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03e:	4835      	ldr	r0, [pc, #212]	; (800a114 <_printf_i+0x244>)
 800a040:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	680e      	ldr	r6, [r1, #0]
 800a048:	061f      	lsls	r7, r3, #24
 800a04a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a04e:	600e      	str	r6, [r1, #0]
 800a050:	d514      	bpl.n	800a07c <_printf_i+0x1ac>
 800a052:	07d9      	lsls	r1, r3, #31
 800a054:	bf44      	itt	mi
 800a056:	f043 0320 	orrmi.w	r3, r3, #32
 800a05a:	6023      	strmi	r3, [r4, #0]
 800a05c:	b91d      	cbnz	r5, 800a066 <_printf_i+0x196>
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	f023 0320 	bic.w	r3, r3, #32
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	2310      	movs	r3, #16
 800a068:	e7b0      	b.n	8009fcc <_printf_i+0xfc>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	f043 0320 	orr.w	r3, r3, #32
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	2378      	movs	r3, #120	; 0x78
 800a074:	4828      	ldr	r0, [pc, #160]	; (800a118 <_printf_i+0x248>)
 800a076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a07a:	e7e3      	b.n	800a044 <_printf_i+0x174>
 800a07c:	065e      	lsls	r6, r3, #25
 800a07e:	bf48      	it	mi
 800a080:	b2ad      	uxthmi	r5, r5
 800a082:	e7e6      	b.n	800a052 <_printf_i+0x182>
 800a084:	4616      	mov	r6, r2
 800a086:	e7bb      	b.n	800a000 <_printf_i+0x130>
 800a088:	680b      	ldr	r3, [r1, #0]
 800a08a:	6826      	ldr	r6, [r4, #0]
 800a08c:	6960      	ldr	r0, [r4, #20]
 800a08e:	1d1d      	adds	r5, r3, #4
 800a090:	600d      	str	r5, [r1, #0]
 800a092:	0635      	lsls	r5, r6, #24
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	d501      	bpl.n	800a09c <_printf_i+0x1cc>
 800a098:	6018      	str	r0, [r3, #0]
 800a09a:	e002      	b.n	800a0a2 <_printf_i+0x1d2>
 800a09c:	0671      	lsls	r1, r6, #25
 800a09e:	d5fb      	bpl.n	800a098 <_printf_i+0x1c8>
 800a0a0:	8018      	strh	r0, [r3, #0]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	4616      	mov	r6, r2
 800a0a8:	e7ba      	b.n	800a020 <_printf_i+0x150>
 800a0aa:	680b      	ldr	r3, [r1, #0]
 800a0ac:	1d1a      	adds	r2, r3, #4
 800a0ae:	600a      	str	r2, [r1, #0]
 800a0b0:	681e      	ldr	r6, [r3, #0]
 800a0b2:	6862      	ldr	r2, [r4, #4]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7f6 f892 	bl	80001e0 <memchr>
 800a0bc:	b108      	cbz	r0, 800a0c2 <_printf_i+0x1f2>
 800a0be:	1b80      	subs	r0, r0, r6
 800a0c0:	6060      	str	r0, [r4, #4]
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0cc:	e7a8      	b.n	800a020 <_printf_i+0x150>
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	4632      	mov	r2, r6
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	47d0      	blx	sl
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d0ab      	beq.n	800a034 <_printf_i+0x164>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	079b      	lsls	r3, r3, #30
 800a0e0:	d413      	bmi.n	800a10a <_printf_i+0x23a>
 800a0e2:	68e0      	ldr	r0, [r4, #12]
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	4298      	cmp	r0, r3
 800a0e8:	bfb8      	it	lt
 800a0ea:	4618      	movlt	r0, r3
 800a0ec:	e7a4      	b.n	800a038 <_printf_i+0x168>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	47d0      	blx	sl
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d09b      	beq.n	800a034 <_printf_i+0x164>
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	68e3      	ldr	r3, [r4, #12]
 800a100:	9903      	ldr	r1, [sp, #12]
 800a102:	1a5b      	subs	r3, r3, r1
 800a104:	42ab      	cmp	r3, r5
 800a106:	dcf2      	bgt.n	800a0ee <_printf_i+0x21e>
 800a108:	e7eb      	b.n	800a0e2 <_printf_i+0x212>
 800a10a:	2500      	movs	r5, #0
 800a10c:	f104 0619 	add.w	r6, r4, #25
 800a110:	e7f5      	b.n	800a0fe <_printf_i+0x22e>
 800a112:	bf00      	nop
 800a114:	0800a5e5 	.word	0x0800a5e5
 800a118:	0800a5f6 	.word	0x0800a5f6

0800a11c <__retarget_lock_acquire_recursive>:
 800a11c:	4770      	bx	lr

0800a11e <__retarget_lock_release_recursive>:
 800a11e:	4770      	bx	lr

0800a120 <memmove>:
 800a120:	4288      	cmp	r0, r1
 800a122:	b510      	push	{r4, lr}
 800a124:	eb01 0402 	add.w	r4, r1, r2
 800a128:	d902      	bls.n	800a130 <memmove+0x10>
 800a12a:	4284      	cmp	r4, r0
 800a12c:	4623      	mov	r3, r4
 800a12e:	d807      	bhi.n	800a140 <memmove+0x20>
 800a130:	1e43      	subs	r3, r0, #1
 800a132:	42a1      	cmp	r1, r4
 800a134:	d008      	beq.n	800a148 <memmove+0x28>
 800a136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a13e:	e7f8      	b.n	800a132 <memmove+0x12>
 800a140:	4402      	add	r2, r0
 800a142:	4601      	mov	r1, r0
 800a144:	428a      	cmp	r2, r1
 800a146:	d100      	bne.n	800a14a <memmove+0x2a>
 800a148:	bd10      	pop	{r4, pc}
 800a14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a152:	e7f7      	b.n	800a144 <memmove+0x24>

0800a154 <_realloc_r>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	4607      	mov	r7, r0
 800a158:	4614      	mov	r4, r2
 800a15a:	460e      	mov	r6, r1
 800a15c:	b921      	cbnz	r1, 800a168 <_realloc_r+0x14>
 800a15e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a162:	4611      	mov	r1, r2
 800a164:	f7ff bc3a 	b.w	80099dc <_malloc_r>
 800a168:	b922      	cbnz	r2, 800a174 <_realloc_r+0x20>
 800a16a:	f7ff fbe7 	bl	800993c <_free_r>
 800a16e:	4625      	mov	r5, r4
 800a170:	4628      	mov	r0, r5
 800a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a174:	f000 f814 	bl	800a1a0 <_malloc_usable_size_r>
 800a178:	42a0      	cmp	r0, r4
 800a17a:	d20f      	bcs.n	800a19c <_realloc_r+0x48>
 800a17c:	4621      	mov	r1, r4
 800a17e:	4638      	mov	r0, r7
 800a180:	f7ff fc2c 	bl	80099dc <_malloc_r>
 800a184:	4605      	mov	r5, r0
 800a186:	2800      	cmp	r0, #0
 800a188:	d0f2      	beq.n	800a170 <_realloc_r+0x1c>
 800a18a:	4631      	mov	r1, r6
 800a18c:	4622      	mov	r2, r4
 800a18e:	f7ff fbc7 	bl	8009920 <memcpy>
 800a192:	4631      	mov	r1, r6
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff fbd1 	bl	800993c <_free_r>
 800a19a:	e7e9      	b.n	800a170 <_realloc_r+0x1c>
 800a19c:	4635      	mov	r5, r6
 800a19e:	e7e7      	b.n	800a170 <_realloc_r+0x1c>

0800a1a0 <_malloc_usable_size_r>:
 800a1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a4:	1f18      	subs	r0, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfbc      	itt	lt
 800a1aa:	580b      	ldrlt	r3, [r1, r0]
 800a1ac:	18c0      	addlt	r0, r0, r3
 800a1ae:	4770      	bx	lr

0800a1b0 <_sbrk>:
 800a1b0:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <_sbrk+0x14>)
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	b909      	cbnz	r1, 800a1bc <_sbrk+0xc>
 800a1b8:	4903      	ldr	r1, [pc, #12]	; (800a1c8 <_sbrk+0x18>)
 800a1ba:	6019      	str	r1, [r3, #0]
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	4402      	add	r2, r0
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	4770      	bx	lr
 800a1c4:	200000fc 	.word	0x200000fc
 800a1c8:	20000d64 	.word	0x20000d64

0800a1cc <_init>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <_fini>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr
